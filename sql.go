//line sql.y:2
package sqlfmt

import __yyfmt__ "fmt"

//line sql.y:3
//line sql.y:7
type yySymType struct {
	yys                 int
	sqlSelect           *SelectStmt
	simpleSelect        *SimpleSelect
	fields              []Expr
	expr                Expr
	str                 string
	identifiers         []string
	fromClause          *FromClause
	whereClause         *WhereClause
	orderExpr           OrderExpr
	orderClause         *OrderClause
	groupByClause       *GroupByClause
	limitClause         *LimitClause
	lockingClause       *LockingClause
	lockingItem         LockingItem
	boolean             bool
	placeholder         interface{}
	columnRef           ColumnRef
	whenClauses         []WhenClause
	whenClause          WhenClause
	pgType              PgType
	valuesRow           ValuesRow
	valuesClause        ValuesClause
	funcApplication     FuncApplication
	funcArgs            []FuncArg
	funcArg             FuncArg
	filterClause        *FilterClause
	relationExpr        *RelationExpr
	windowDefinitions   []WindowDefinition
	windowDefinition    WindowDefinition
	windowSpecification WindowSpecification
	overClause          *OverClause
	partitionClause     PartitionClause
	frameClause         *FrameClause
	frameBound          *FrameBound
	arrayExpr           ArrayExpr
	anyName             AnyName
	indirectionEl       IndirectionEl
	indirection         Indirection
	iconst              IntegerLiteral
	optArrayBounds      []IntegerLiteral
}

const OP = 57346
const any_operator = 57347
const IDENT = 57348
const FCONST = 57349
const SCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ABORT_P = 57363
const ABSOLUTE_P = 57364
const ACCESS = 57365
const ACTION = 57366
const ADD_P = 57367
const ADMIN = 57368
const AFTER = 57369
const AGGREGATE = 57370
const ALL = 57371
const ALSO = 57372
const ALTER = 57373
const ALWAYS = 57374
const ANALYSE = 57375
const ANALYZE = 57376
const AND = 57377
const ANY = 57378
const ARRAY = 57379
const AS = 57380
const ASC = 57381
const ASSERTION = 57382
const ASSIGNMENT = 57383
const ASYMMETRIC = 57384
const AT = 57385
const ATTRIBUTE = 57386
const AUTHORIZATION = 57387
const BACKWARD = 57388
const BEFORE = 57389
const BEGIN_P = 57390
const BETWEEN = 57391
const BIGINT = 57392
const BINARY = 57393
const BIT = 57394
const BOOLEAN_P = 57395
const BOTH = 57396
const BY = 57397
const CACHE = 57398
const CALLED = 57399
const CASCADE = 57400
const CASCADED = 57401
const CASE = 57402
const CAST = 57403
const CATALOG_P = 57404
const CHAIN = 57405
const CHAR_P = 57406
const CHARACTER = 57407
const CHARACTERISTICS = 57408
const CHECK = 57409
const CHECKPOINT = 57410
const CLASS = 57411
const CLOSE = 57412
const CLUSTER = 57413
const COALESCE = 57414
const COLLATE = 57415
const COLLATION = 57416
const COLUMN = 57417
const COMMENT = 57418
const COMMENTS = 57419
const COMMIT = 57420
const COMMITTED = 57421
const CONCURRENTLY = 57422
const CONFIGURATION = 57423
const CONFLICT = 57424
const CONNECTION = 57425
const CONSTRAINT = 57426
const CONSTRAINTS = 57427
const CONTENT_P = 57428
const CONTINUE_P = 57429
const CONVERSION_P = 57430
const COPY = 57431
const COST = 57432
const CREATE = 57433
const CROSS = 57434
const CSV = 57435
const CUBE = 57436
const CURRENT_P = 57437
const CURRENT_CATALOG = 57438
const CURRENT_DATE = 57439
const CURRENT_ROLE = 57440
const CURRENT_SCHEMA = 57441
const CURRENT_TIME = 57442
const CURRENT_TIMESTAMP = 57443
const CURRENT_USER = 57444
const CURSOR = 57445
const CYCLE = 57446
const DATA_P = 57447
const DATABASE = 57448
const DAY_P = 57449
const DEALLOCATE = 57450
const DEC = 57451
const DECIMAL_P = 57452
const DECLARE = 57453
const DEFAULT = 57454
const DEFAULTS = 57455
const DEFERRABLE = 57456
const DEFERRED = 57457
const DEFINER = 57458
const DELETE_P = 57459
const DELIMITER = 57460
const DELIMITERS = 57461
const DESC = 57462
const DICTIONARY = 57463
const DISABLE_P = 57464
const DISCARD = 57465
const DISTINCT = 57466
const DO = 57467
const DOCUMENT_P = 57468
const DOMAIN_P = 57469
const DOUBLE_P = 57470
const DROP = 57471
const EACH = 57472
const ELSE = 57473
const ENABLE_P = 57474
const ENCODING = 57475
const ENCRYPTED = 57476
const END_P = 57477
const ENUM_P = 57478
const ESCAPE = 57479
const EVENT = 57480
const EXCEPT = 57481
const EXCLUDE = 57482
const EXCLUDING = 57483
const EXCLUSIVE = 57484
const EXECUTE = 57485
const EXISTS = 57486
const EXPLAIN = 57487
const EXTENSION = 57488
const EXTERNAL = 57489
const EXTRACT = 57490
const FALSE_P = 57491
const FAMILY = 57492
const FETCH = 57493
const FILTER = 57494
const FIRST_P = 57495
const FLOAT_P = 57496
const FOLLOWING = 57497
const FOR = 57498
const FORCE = 57499
const FOREIGN = 57500
const FORWARD = 57501
const FREEZE = 57502
const FROM = 57503
const FULL = 57504
const FUNCTION = 57505
const FUNCTIONS = 57506
const GLOBAL = 57507
const GRANT = 57508
const GRANTED = 57509
const GREATEST = 57510
const GROUP_P = 57511
const GROUPING = 57512
const HANDLER = 57513
const HAVING = 57514
const HEADER_P = 57515
const HOLD = 57516
const HOUR_P = 57517
const IDENTITY_P = 57518
const IF_P = 57519
const ILIKE = 57520
const IMMEDIATE = 57521
const IMMUTABLE = 57522
const IMPLICIT_P = 57523
const IMPORT_P = 57524
const IN_P = 57525
const INCLUDING = 57526
const INCREMENT = 57527
const INDEX = 57528
const INDEXES = 57529
const INHERIT = 57530
const INHERITS = 57531
const INITIALLY = 57532
const INLINE_P = 57533
const INNER_P = 57534
const INOUT = 57535
const INPUT_P = 57536
const INSENSITIVE = 57537
const INSERT = 57538
const INSTEAD = 57539
const INT_P = 57540
const INTEGER = 57541
const INTERSECT = 57542
const INTERVAL = 57543
const INTO = 57544
const INVOKER = 57545
const IS = 57546
const ISNULL = 57547
const ISOLATION = 57548
const JOIN = 57549
const KEY = 57550
const LABEL = 57551
const LANGUAGE = 57552
const LARGE_P = 57553
const LAST_P = 57554
const LATERAL_P = 57555
const LEADING = 57556
const LEAKPROOF = 57557
const LEAST = 57558
const LEFT = 57559
const LEVEL = 57560
const LIKE = 57561
const LIMIT = 57562
const LISTEN = 57563
const LOAD = 57564
const LOCAL = 57565
const LOCALTIME = 57566
const LOCALTIMESTAMP = 57567
const LOCATION = 57568
const LOCK_P = 57569
const LOCKED = 57570
const LOGGED = 57571
const MAPPING = 57572
const MATCH = 57573
const MATERIALIZED = 57574
const MAXVALUE = 57575
const MINUTE_P = 57576
const MINVALUE = 57577
const MODE = 57578
const MONTH_P = 57579
const MOVE = 57580
const NAME_P = 57581
const NAMES = 57582
const NATIONAL = 57583
const NATURAL = 57584
const NCHAR = 57585
const NEXT = 57586
const NO = 57587
const NONE = 57588
const NOT = 57589
const NOTHING = 57590
const NOTIFY = 57591
const NOTNULL = 57592
const NOWAIT = 57593
const NULL_P = 57594
const NULLIF = 57595
const NULLS_P = 57596
const NUMERIC = 57597
const OBJECT_P = 57598
const OF = 57599
const OFF = 57600
const OFFSET = 57601
const OIDS = 57602
const ON = 57603
const ONLY = 57604
const OPERATOR = 57605
const OPTION = 57606
const OPTIONS = 57607
const OR = 57608
const ORDER = 57609
const ORDINALITY = 57610
const OUT_P = 57611
const OUTER_P = 57612
const OVER = 57613
const OVERLAPS = 57614
const OVERLAY = 57615
const OWNED = 57616
const OWNER = 57617
const PARSER = 57618
const PARTIAL = 57619
const PARTITION = 57620
const PASSING = 57621
const PASSWORD = 57622
const PLACING = 57623
const PLANS = 57624
const POLICY = 57625
const POSITION = 57626
const PRECEDING = 57627
const PRECISION = 57628
const PRESERVE = 57629
const PREPARE = 57630
const PREPARED = 57631
const PRIMARY = 57632
const PRIOR = 57633
const PRIVILEGES = 57634
const PROCEDURAL = 57635
const PROCEDURE = 57636
const PROGRAM = 57637
const QUOTE = 57638
const RANGE = 57639
const READ = 57640
const REAL = 57641
const REASSIGN = 57642
const RECHECK = 57643
const RECURSIVE = 57644
const REF = 57645
const REFERENCES = 57646
const REFRESH = 57647
const REINDEX = 57648
const RELATIVE_P = 57649
const RELEASE = 57650
const RENAME = 57651
const REPEATABLE = 57652
const REPLACE = 57653
const REPLICA = 57654
const RESET = 57655
const RESTART = 57656
const RESTRICT = 57657
const RETURNING = 57658
const RETURNS = 57659
const REVOKE = 57660
const RIGHT = 57661
const ROLE = 57662
const ROLLBACK = 57663
const ROLLUP = 57664
const ROW = 57665
const ROWS = 57666
const RULE = 57667
const SAVEPOINT = 57668
const SCHEMA = 57669
const SCROLL = 57670
const SEARCH = 57671
const SECOND_P = 57672
const SECURITY = 57673
const SELECT = 57674
const SEQUENCE = 57675
const SEQUENCES = 57676
const SERIALIZABLE = 57677
const SERVER = 57678
const SESSION = 57679
const SESSION_USER = 57680
const SET = 57681
const SETS = 57682
const SETOF = 57683
const SHARE = 57684
const SHOW = 57685
const SIMILAR = 57686
const SIMPLE = 57687
const SKIP = 57688
const SMALLINT = 57689
const SNAPSHOT = 57690
const SOME = 57691
const SQL_P = 57692
const STABLE = 57693
const STANDALONE_P = 57694
const START = 57695
const STATEMENT = 57696
const STATISTICS = 57697
const STDIN = 57698
const STDOUT = 57699
const STORAGE = 57700
const STRICT_P = 57701
const STRIP_P = 57702
const SUBSTRING = 57703
const SYMMETRIC = 57704
const SYSID = 57705
const SYSTEM_P = 57706
const TABLE = 57707
const TABLES = 57708
const TABLESAMPLE = 57709
const TABLESPACE = 57710
const TEMP = 57711
const TEMPLATE = 57712
const TEMPORARY = 57713
const TEXT_P = 57714
const THEN = 57715
const TIME = 57716
const TIMESTAMP = 57717
const TO = 57718
const TRAILING = 57719
const TRANSACTION = 57720
const TRANSFORM = 57721
const TREAT = 57722
const TRIGGER = 57723
const TRIM = 57724
const TRUE_P = 57725
const TRUNCATE = 57726
const TRUSTED = 57727
const TYPE_P = 57728
const TYPES_P = 57729
const UNBOUNDED = 57730
const UNCOMMITTED = 57731
const UNENCRYPTED = 57732
const UNION = 57733
const UNIQUE = 57734
const UNKNOWN = 57735
const UNLISTEN = 57736
const UNLOGGED = 57737
const UNTIL = 57738
const UPDATE = 57739
const USER = 57740
const USING = 57741
const VACUUM = 57742
const VALID = 57743
const VALIDATE = 57744
const VALIDATOR = 57745
const VALUE_P = 57746
const VALUES = 57747
const VARCHAR = 57748
const VARIADIC = 57749
const VARYING = 57750
const VERBOSE = 57751
const VERSION_P = 57752
const VIEW = 57753
const VIEWS = 57754
const VOLATILE = 57755
const WHEN = 57756
const WHERE = 57757
const WHITESPACE_P = 57758
const WINDOW = 57759
const WITH = 57760
const WITHIN = 57761
const WITHOUT = 57762
const WORK = 57763
const WRAPPER = 57764
const WRITE = 57765
const XML_P = 57766
const XMLATTRIBUTES = 57767
const XMLCONCAT = 57768
const XMLELEMENT = 57769
const XMLEXISTS = 57770
const XMLFOREST = 57771
const XMLPARSE = 57772
const XMLPI = 57773
const XMLROOT = 57774
const XMLSERIALIZE = 57775
const YEAR_P = 57776
const YES_P = 57777
const ZONE = 57778
const NOT_LA = 57779
const NULLS_LA = 57780
const WITH_LA = 57781
const POSTFIXOP = 57782
const UMINUS = 57783

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"OP",
	"any_operator",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ABORT_P",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALL",
	"ALSO",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASSERTION",
	"ASSIGNMENT",
	"ASYMMETRIC",
	"AT",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"BETWEEN",
	"BIGINT",
	"BINARY",
	"BIT",
	"BOOLEAN_P",
	"BOTH",
	"BY",
	"CACHE",
	"CALLED",
	"CASCADE",
	"CASCADED",
	"CASE",
	"CAST",
	"CATALOG_P",
	"CHAIN",
	"CHAR_P",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFLICT",
	"CONNECTION",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COPY",
	"COST",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT_P",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CURSOR",
	"CYCLE",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DEC",
	"DECIMAL_P",
	"DECLARE",
	"DEFAULT",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DELETE_P",
	"DELIMITER",
	"DELIMITERS",
	"DESC",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOCUMENT_P",
	"DOMAIN_P",
	"DOUBLE_P",
	"DROP",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCODING",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"ESCAPE",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FALSE_P",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST_P",
	"FLOAT_P",
	"FOLLOWING",
	"FOR",
	"FORCE",
	"FOREIGN",
	"FORWARD",
	"FREEZE",
	"FROM",
	"FULL",
	"FUNCTION",
	"FUNCTIONS",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUP_P",
	"GROUPING",
	"HANDLER",
	"HAVING",
	"HEADER_P",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IF_P",
	"ILIKE",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"IN_P",
	"INCLUDING",
	"INCREMENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INNER_P",
	"INOUT",
	"INPUT_P",
	"INSENSITIVE",
	"INSERT",
	"INSTEAD",
	"INT_P",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVOKER",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LAST_P",
	"LATERAL_P",
	"LEADING",
	"LEAKPROOF",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LISTEN",
	"LOAD",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MATERIALIZED",
	"MAXVALUE",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NATIONAL",
	"NATURAL",
	"NCHAR",
	"NEXT",
	"NO",
	"NONE",
	"NOT",
	"NOTHING",
	"NOTIFY",
	"NOTNULL",
	"NOWAIT",
	"NULL_P",
	"NULLIF",
	"NULLS_P",
	"NUMERIC",
	"OBJECT_P",
	"OF",
	"OFF",
	"OFFSET",
	"OIDS",
	"ON",
	"ONLY",
	"OPERATOR",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT_P",
	"OUTER_P",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OWNER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSING",
	"PASSWORD",
	"PLACING",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRESERVE",
	"PREPARE",
	"PREPARED",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROGRAM",
	"QUOTE",
	"RANGE",
	"READ",
	"REAL",
	"REASSIGN",
	"RECHECK",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RESTRICT",
	"RETURNING",
	"RETURNS",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCROLL",
	"SEARCH",
	"SECOND_P",
	"SECURITY",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STORAGE",
	"STRICT_P",
	"STRIP_P",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSID",
	"SYSTEM_P",
	"TABLE",
	"TABLES",
	"TABLESAMPLE",
	"TABLESPACE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE_P",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"UPDATE",
	"USER",
	"USING",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VALUE_P",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"VERBOSE",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHEN",
	"WHERE",
	"WHITESPACE_P",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRAPPER",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"ZONE",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"','",
	"':'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyMaxDepth = 200

//line sql.y:2468

// The parser expects the lexer to return 0 on EOF.  Give it a name
// for clarity.
const eof = 0

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 4,
	1, 119,
	-2, 127,
	-1, 5,
	1, 122,
	454, 122,
	-2, 126,
	-1, 12,
	1, 123,
	454, 123,
	-2, 143,
	-1, 398,
	16, 295,
	17, 295,
	453, 295,
	-2, 292,
	-1, 399,
	16, 296,
	17, 296,
	453, 296,
	-2, 293,
	-1, 460,
	323, 213,
	324, 213,
	-2, 31,
	-1, 507,
	139, 127,
	151, 127,
	156, 127,
	200, 127,
	220, 127,
	259, 127,
	267, 127,
	391, 127,
	-2, 84,
	-1, 513,
	453, 283,
	-2, 253,
	-1, 572,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 43,
	-1, 573,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 44,
	-1, 574,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 45,
	-1, 575,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 46,
	-1, 576,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 47,
	-1, 577,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 48,
	-1, 581,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 55,
	-1, 585,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 59,
	-1, 702,
	453, 282,
	-2, 8,
	-1, 744,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 57,
	-1, 745,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 61,
	-1, 748,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 63,
	-1, 802,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 56,
	-1, 805,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 65,
	-1, 806,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 60,
	-1, 809,
	204, 0,
	205, 0,
	250, 0,
	-2, 77,
	-1, 840,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 58,
	-1, 841,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 62,
	-1, 843,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 64,
	-1, 844,
	204, 0,
	205, 0,
	250, 0,
	-2, 78,
	-1, 865,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 66,
	-1, 887,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 575,
}

const yyNprod = 723
const yyPrivate = 57344

var yyTokenNames []string
var yyStates []string

const yyLast = 9898

var yyAct = [...]int{

	736, 886, 767, 858, 885, 870, 677, 854, 828, 788,
	699, 514, 404, 730, 732, 391, 469, 510, 684, 734,
	31, 372, 372, 13, 534, 435, 547, 371, 403, 792,
	390, 695, 686, 26, 895, 689, 894, 838, 17, 756,
	399, 28, 780, 758, 756, 757, 526, 759, 525, 756,
	756, 30, 879, 872, 711, 516, 542, 472, 28, 515,
	8, 432, 24, 799, 741, 884, 853, 851, 30, 850,
	820, 776, 760, 705, 368, 400, 367, 769, 873, 785,
	400, 739, 693, 349, 512, 523, 521, 7, 864, 511,
	797, 431, 473, 10, 731, 742, 855, 733, 770, 690,
	448, 863, 765, 753, 707, 471, 448, 16, 746, 586,
	565, 374, 354, 473, 355, 351, 583, 529, 876, 356,
	538, 475, 535, 536, 350, 899, 848, 898, 751, 692,
	17, 429, 716, 11, 781, 377, 592, 446, 527, 727,
	728, 729, 475, 446, 794, 877, 359, 462, 358, 710,
	358, 474, 358, 353, 528, 455, 833, 582, 832, 786,
	15, 590, 829, 789, 808, 754, 388, 443, 15, 473,
	548, 353, 474, 520, 388, 5, 814, 473, 362, 793,
	22, 7, 473, 867, 830, 473, 366, 903, 388, 473,
	444, 473, 385, 4, 880, 485, 486, 487, 475, 348,
	19, 777, 778, 370, 902, 827, 475, 883, 835, 773,
	388, 6, 489, 473, 475, 539, 12, 357, 787, 357,
	475, 357, 682, 388, 430, 428, 473, 772, 474, 18,
	3, 749, 473, 737, 447, 17, 474, 551, 550, 862,
	447, 474, 475, 553, 474, 388, 456, 552, 473, 361,
	474, 402, 485, 486, 487, 475, 359, 897, 359, 588,
	598, 475, 740, 563, 587, 364, 365, 380, 678, 875,
	847, 817, 474, 363, 691, 23, 869, 475, 384, 397,
	434, 688, 584, 763, 517, 474, 383, 381, 392, 445,
	531, 474, 857, 714, 713, 445, 717, 701, 755, 513,
	842, 540, 461, 537, 360, 352, 440, 474, 458, 530,
	457, 451, 438, 25, 519, 454, 738, 544, 468, 735,
	882, 20, 21, 369, 9, 2, 1, 0, 0, 0,
	0, 0, 0, 493, 0, 0, 807, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 804,
	436, 0, 0, 0, 0, 493, 0, 0, 452, 14,
	459, 0, 750, 0, 0, 0, 0, 470, 0, 0,
	0, 0, 752, 0, 491, 0, 501, 502, 503, 504,
	505, 495, 496, 506, 715, 690, 0, 0, 0, 0,
	0, 0, 0, 791, 0, 589, 491, 518, 0, 0,
	0, 0, 0, 0, 0, 591, 0, 0, 0, 0,
	0, 0, 493, 0, 0, 0, 0, 0, 500, 0,
	0, 0, 0, 0, 0, 0, 500, 497, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	500, 0, 0, 490, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 491, 0, 0, 0, 0, 0, 0,
	0, 0, 500, 0, 28, 0, 439, 524, 450, 449,
	533, 460, 442, 372, 30, 500, 441, 566, 567, 568,
	569, 570, 571, 572, 573, 574, 575, 576, 577, 578,
	579, 580, 581, 28, 585, 0, 541, 500, 0, 494,
	549, 0, 554, 30, 0, 564, 0, 0, 488, 0,
	0, 597, 680, 0, 562, 30, 532, 687, 0, 596,
	836, 494, 700, 0, 680, 683, 436, 481, 597, 681,
	704, 593, 388, 709, 522, 473, 596, 464, 0, 595,
	464, 464, 0, 470, 0, 478, 479, 480, 481, 703,
	702, 706, 0, 0, 465, 708, 595, 465, 465, 712,
	0, 724, 725, 726, 475, 718, 719, 720, 721, 722,
	723, 0, 488, 463, 0, 507, 466, 467, 494, 509,
	0, 0, 0, 744, 745, 0, 0, 748, 488, 0,
	0, 0, 492, 0, 474, 488, 0, 0, 0, 476,
	477, 478, 479, 480, 481, 0, 488, 476, 477, 478,
	479, 480, 481, 0, 492, 0, 0, 482, 483, 484,
	0, 476, 477, 478, 479, 480, 481, 0, 0, 761,
	0, 0, 0, 0, 762, 0, 0, 488, 488, 488,
	488, 488, 488, 476, 477, 478, 479, 480, 481, 0,
	0, 0, 0, 0, 488, 0, 476, 477, 478, 479,
	480, 481, 476, 477, 478, 479, 480, 481, 0, 0,
	0, 492, 0, 0, 482, 483, 484, 0, 476, 477,
	478, 479, 480, 481, 0, 0, 0, 0, 0, 0,
	0, 766, 0, 0, 0, 0, 0, 700, 700, 0,
	0, 0, 488, 488, 488, 488, 488, 488, 488, 488,
	488, 488, 488, 488, 488, 488, 488, 488, 779, 771,
	0, 488, 0, 768, 764, 702, 702, 784, 774, 775,
	0, 0, 0, 30, 790, 0, 0, 0, 0, 0,
	680, 0, 28, 801, 802, 783, 798, 805, 806, 0,
	0, 0, 30, 0, 597, 809, 0, 811, 0, 0,
	800, 0, 596, 813, 0, 0, 815, 810, 0, 0,
	0, 819, 0, 700, 0, 0, 0, 812, 824, 825,
	0, 0, 595, 821, 500, 0, 0, 0, 0, 826,
	0, 0, 0, 0, 0, 0, 0, 0, 822, 823,
	818, 702, 0, 0, 840, 841, 0, 0, 843, 844,
	30, 831, 597, 837, 834, 0, 488, 846, 839, 0,
	596, 0, 0, 488, 0, 0, 0, 0, 0, 0,
	856, 859, 0, 0, 0, 852, 488, 0, 0, 0,
	595, 0, 0, 865, 0, 488, 0, 0, 0, 0,
	0, 0, 860, 861, 0, 0, 0, 0, 0, 0,
	868, 0, 0, 0, 874, 0, 0, 0, 680, 0,
	0, 866, 488, 859, 878, 0, 881, 890, 890, 0,
	488, 488, 891, 893, 488, 892, 871, 0, 890, 896,
	0, 0, 0, 0, 0, 0, 30, 0, 0, 0,
	0, 0, 488, 0, 890, 904, 0, 0, 0, 0,
	871, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	30, 0, 0, 0, 0, 0, 488, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 488, 488, 0,
	0, 488, 488, 0, 0, 488, 0, 488, 0, 488,
	0, 488, 0, 0, 0, 488, 0, 0, 0, 0,
	488, 488, 0, 0, 0, 476, 477, 478, 479, 480,
	481, 0, 0, 0, 0, 0, 488, 488, 0, 488,
	488, 0, 488, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 488, 0, 0, 488, 0, 0, 0, 0,
	0, 488, 0, 0, 0, 0, 0, 0, 0, 0,
	488, 0, 594, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 488, 32, 33, 34,
	35, 36, 37, 38, 39, 599, 40, 41, 42, 600,
	601, 602, 603, 604, 605, 606, 43, 44, 607, 45,
	46, 405, 47, 48, 49, 300, 301, 406, 302, 303,
	608, 50, 51, 52, 53, 54, 609, 610, 55, 56,
	304, 305, 57, 611, 58, 59, 60, 61, 306, 612,
	407, 613, 62, 63, 64, 65, 408, 66, 67, 68,
	614, 69, 70, 71, 72, 73, 74, 615, 409, 75,
	76, 77, 616, 617, 618, 410, 619, 620, 621, 78,
	79, 80, 81, 82, 83, 307, 308, 84, 622, 85,
	623, 86, 87, 88, 89, 90, 624, 91, 92, 93,
	625, 626, 94, 95, 96, 97, 98, 627, 99, 100,
	101, 628, 102, 103, 104, 629, 105, 106, 107, 108,
	309, 109, 110, 111, 310, 630, 112, 631, 113, 114,
	311, 115, 632, 116, 633, 117, 411, 634, 412, 118,
	119, 120, 635, 121, 312, 636, 313, 122, 637, 123,
	124, 125, 126, 127, 413, 128, 129, 130, 131, 638,
	132, 133, 134, 135, 136, 137, 639, 138, 414, 314,
	139, 140, 141, 142, 315, 316, 640, 317, 641, 143,
	415, 416, 144, 417, 145, 146, 147, 148, 149, 642,
	643, 150, 318, 418, 151, 419, 644, 152, 153, 154,
	645, 646, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 319, 420, 320,
	170, 171, 321, 647, 172, 173, 421, 174, 648, 322,
	175, 323, 176, 177, 178, 649, 179, 650, 651, 180,
	181, 182, 652, 653, 183, 324, 422, 184, 423, 325,
	185, 186, 187, 188, 189, 190, 191, 654, 192, 193,
	326, 194, 327, 197, 195, 196, 655, 198, 199, 200,
	201, 202, 203, 204, 205, 328, 206, 207, 208, 209,
	656, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 657, 221, 222, 424, 223, 224, 225, 329,
	226, 227, 228, 229, 230, 231, 232, 233, 658, 234,
	235, 236, 237, 238, 659, 239, 240, 330, 241, 242,
	425, 243, 244, 331, 245, 660, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 332, 661, 257,
	258, 662, 259, 426, 260, 261, 262, 263, 264, 663,
	333, 334, 664, 665, 265, 266, 335, 267, 336, 666,
	268, 269, 270, 271, 272, 273, 274, 667, 668, 275,
	276, 277, 278, 279, 669, 670, 280, 281, 282, 283,
	284, 337, 338, 671, 285, 427, 286, 287, 288, 289,
	672, 673, 290, 674, 675, 291, 292, 293, 294, 295,
	296, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	297, 298, 299, 594, 0, 0, 0, 0, 0, 0,
	0, 0, 685, 0, 0, 0, 0, 0, 32, 33,
	34, 35, 36, 37, 38, 39, 599, 40, 41, 42,
	600, 601, 602, 603, 604, 605, 606, 43, 44, 607,
	45, 46, 405, 47, 48, 49, 300, 301, 406, 302,
	303, 608, 50, 51, 52, 53, 54, 609, 610, 55,
	56, 304, 305, 57, 611, 58, 59, 60, 61, 306,
	612, 407, 613, 62, 63, 64, 65, 408, 66, 67,
	68, 614, 69, 70, 71, 72, 73, 74, 615, 409,
	75, 76, 77, 616, 617, 618, 410, 619, 620, 621,
	78, 79, 80, 81, 82, 83, 307, 308, 84, 622,
	85, 623, 86, 87, 88, 89, 90, 624, 91, 92,
	93, 625, 626, 94, 95, 96, 97, 98, 627, 99,
	100, 101, 628, 102, 103, 104, 629, 105, 106, 107,
	108, 309, 109, 110, 111, 310, 630, 112, 631, 113,
	114, 311, 115, 632, 116, 633, 117, 411, 634, 412,
	118, 119, 120, 635, 121, 312, 636, 313, 122, 637,
	123, 124, 125, 126, 127, 413, 128, 129, 130, 131,
	638, 132, 133, 134, 135, 136, 137, 639, 138, 414,
	314, 139, 140, 141, 142, 315, 316, 640, 317, 641,
	143, 415, 416, 144, 417, 145, 146, 147, 148, 149,
	642, 643, 150, 318, 418, 151, 419, 644, 152, 153,
	154, 645, 646, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 319, 420,
	320, 170, 171, 321, 647, 172, 173, 421, 174, 648,
	322, 175, 323, 176, 177, 178, 649, 179, 650, 651,
	180, 181, 182, 652, 653, 183, 324, 422, 184, 423,
	325, 185, 186, 187, 188, 189, 190, 191, 654, 192,
	193, 326, 194, 327, 197, 195, 196, 655, 198, 199,
	200, 201, 202, 203, 204, 205, 328, 206, 207, 208,
	209, 656, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 657, 221, 222, 424, 223, 224, 225,
	329, 226, 227, 228, 229, 230, 231, 232, 233, 658,
	234, 235, 236, 237, 238, 659, 239, 240, 330, 241,
	242, 425, 243, 244, 331, 245, 660, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 332, 661,
	257, 258, 662, 259, 426, 260, 261, 262, 263, 264,
	663, 333, 334, 664, 665, 265, 266, 335, 267, 336,
	666, 268, 269, 270, 271, 272, 273, 274, 667, 668,
	275, 276, 277, 278, 279, 669, 670, 280, 281, 282,
	283, 284, 337, 338, 671, 285, 427, 286, 287, 288,
	289, 672, 673, 290, 674, 675, 291, 292, 293, 294,
	295, 296, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 297, 298, 299, 398, 0, 401, 0, 0, 388,
	400, 0, 0, 0, 0, 0, 0, 0, 0, 32,
	33, 34, 35, 36, 37, 38, 39, 696, 40, 41,
	42, 0, 0, 0, 0, 387, 0, 0, 43, 44,
	0, 45, 46, 405, 47, 48, 49, 300, 301, 406,
	302, 303, 0, 50, 51, 52, 53, 54, 396, 0,
	55, 56, 304, 305, 57, 0, 58, 59, 60, 61,
	306, 0, 407, 0, 62, 63, 64, 65, 408, 66,
	67, 68, 0, 69, 70, 71, 72, 73, 74, 0,
	409, 75, 76, 77, 0, 0, 0, 410, 0, 0,
	0, 78, 79, 80, 81, 82, 83, 307, 308, 84,
	0, 85, 0, 86, 87, 88, 89, 90, 0, 91,
	92, 93, 697, 0, 94, 95, 96, 97, 98, 0,
	99, 100, 101, 0, 102, 103, 104, 0, 105, 106,
	107, 108, 386, 109, 110, 111, 310, 394, 112, 0,
	113, 114, 311, 115, 0, 116, 0, 117, 411, 0,
	412, 118, 119, 120, 0, 121, 312, 0, 313, 122,
	0, 123, 124, 125, 126, 127, 413, 128, 129, 130,
	131, 0, 132, 133, 134, 135, 136, 137, 0, 138,
	414, 314, 139, 140, 141, 142, 315, 316, 0, 317,
	0, 143, 415, 416, 144, 417, 145, 146, 147, 148,
	149, 0, 0, 150, 318, 418, 151, 419, 0, 152,
	153, 154, 0, 0, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 319,
	420, 320, 170, 171, 321, 378, 172, 173, 421, 174,
	395, 322, 175, 323, 176, 177, 178, 0, 179, 0,
	0, 389, 181, 182, 0, 0, 183, 324, 422, 184,
	423, 325, 185, 186, 187, 188, 189, 190, 191, 0,
	192, 193, 326, 194, 327, 197, 195, 196, 0, 198,
	199, 200, 201, 202, 203, 204, 205, 328, 206, 207,
	208, 209, 0, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 0, 221, 222, 424, 223, 224,
	225, 329, 226, 227, 228, 229, 230, 231, 232, 233,
	0, 234, 235, 236, 237, 238, 0, 239, 240, 330,
	241, 242, 425, 243, 244, 331, 245, 0, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 332,
	0, 257, 258, 0, 259, 426, 260, 261, 262, 263,
	264, 0, 333, 334, 0, 0, 265, 266, 335, 267,
	336, 393, 268, 269, 270, 271, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 284, 337, 338, 0, 285, 427, 286, 287,
	288, 289, 0, 0, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 297, 298, 299, 379, 0, 0, 0, 0,
	0, 0, 375, 376, 698, 0, 0, 0, 398, 0,
	401, 382, 694, 388, 400, 0, 0, 0, 0, 0,
	0, 0, 0, 32, 33, 34, 35, 36, 37, 38,
	39, 0, 40, 41, 42, 0, 0, 0, 0, 387,
	0, 0, 43, 44, 0, 45, 46, 405, 47, 48,
	49, 300, 301, 406, 302, 303, 0, 50, 51, 52,
	53, 54, 396, 0, 55, 56, 304, 305, 57, 0,
	58, 59, 60, 61, 306, 0, 407, 0, 62, 63,
	64, 65, 408, 66, 67, 68, 0, 69, 70, 71,
	72, 73, 74, 0, 409, 75, 76, 77, 0, 0,
	0, 410, 0, 0, 0, 78, 79, 80, 81, 82,
	83, 307, 308, 84, 0, 85, 0, 86, 87, 88,
	89, 90, 0, 91, 92, 93, 0, 0, 94, 95,
	96, 97, 98, 0, 99, 100, 101, 0, 102, 103,
	104, 0, 105, 106, 107, 108, 386, 109, 110, 111,
	310, 394, 112, 0, 113, 114, 311, 115, 0, 116,
	0, 117, 411, 0, 412, 118, 119, 120, 0, 121,
	312, 0, 313, 122, 0, 123, 124, 125, 126, 127,
	413, 128, 129, 130, 131, 0, 132, 133, 134, 135,
	136, 137, 0, 138, 414, 314, 139, 140, 141, 142,
	315, 316, 0, 317, 0, 143, 415, 416, 144, 417,
	145, 146, 147, 148, 149, 0, 0, 150, 318, 418,
	151, 419, 0, 152, 153, 154, 0, 0, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 319, 420, 320, 170, 171, 321, 378,
	172, 173, 421, 174, 395, 322, 175, 323, 176, 177,
	178, 0, 179, 0, 0, 389, 181, 182, 0, 0,
	183, 324, 422, 184, 423, 325, 185, 186, 187, 188,
	189, 190, 191, 0, 192, 193, 326, 194, 327, 197,
	195, 196, 0, 198, 199, 200, 201, 202, 203, 204,
	205, 328, 206, 207, 208, 209, 0, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 0, 221,
	222, 424, 223, 224, 225, 329, 226, 227, 228, 229,
	230, 231, 232, 233, 0, 234, 235, 236, 237, 238,
	0, 239, 240, 330, 241, 242, 425, 243, 244, 331,
	245, 0, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 332, 0, 257, 258, 0, 259, 426,
	260, 261, 262, 263, 264, 0, 333, 334, 0, 0,
	265, 266, 335, 267, 336, 393, 268, 269, 270, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 284, 337, 338, 0,
	285, 427, 286, 287, 288, 289, 0, 0, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 297, 298, 299, 379,
	0, 0, 0, 398, 0, 401, 375, 376, 388, 400,
	0, 0, 0, 511, 679, 382, 0, 0, 32, 33,
	34, 35, 36, 37, 38, 39, 0, 40, 41, 42,
	0, 0, 0, 0, 387, 0, 0, 43, 44, 0,
	45, 46, 405, 47, 48, 49, 300, 301, 406, 302,
	303, 0, 50, 51, 52, 53, 54, 396, 0, 55,
	56, 304, 305, 57, 0, 58, 59, 60, 61, 306,
	0, 407, 0, 62, 63, 64, 65, 408, 66, 67,
	68, 0, 69, 70, 71, 72, 73, 74, 0, 409,
	75, 76, 77, 0, 0, 0, 410, 0, 0, 0,
	78, 79, 80, 81, 82, 83, 307, 308, 84, 0,
	85, 0, 86, 87, 88, 89, 90, 0, 91, 92,
	93, 0, 0, 94, 95, 96, 97, 98, 0, 99,
	100, 101, 0, 102, 103, 104, 0, 105, 106, 107,
	108, 386, 109, 110, 111, 310, 394, 112, 0, 113,
	114, 311, 115, 0, 116, 0, 117, 411, 0, 412,
	118, 119, 120, 0, 121, 312, 0, 313, 122, 0,
	123, 124, 125, 126, 127, 413, 128, 129, 130, 131,
	0, 132, 133, 134, 135, 136, 137, 0, 138, 414,
	314, 139, 140, 141, 142, 315, 316, 0, 317, 0,
	143, 415, 416, 144, 417, 145, 146, 147, 148, 149,
	0, 0, 150, 318, 418, 151, 419, 0, 152, 153,
	154, 0, 0, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 319, 420,
	320, 170, 171, 321, 378, 172, 173, 421, 174, 395,
	322, 175, 323, 176, 177, 178, 0, 179, 0, 0,
	389, 181, 182, 0, 0, 183, 324, 422, 184, 423,
	325, 185, 186, 187, 188, 189, 190, 191, 0, 192,
	193, 326, 194, 327, 197, 195, 196, 0, 198, 199,
	200, 201, 202, 203, 204, 205, 328, 206, 207, 208,
	209, 0, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 0, 221, 222, 424, 223, 224, 225,
	329, 226, 227, 228, 229, 230, 231, 232, 233, 8,
	234, 235, 236, 237, 238, 0, 239, 240, 330, 241,
	242, 425, 243, 244, 331, 245, 0, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 332, 0,
	257, 258, 10, 259, 426, 260, 261, 262, 263, 264,
	0, 333, 334, 0, 0, 265, 266, 335, 267, 336,
	393, 268, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 284, 508, 338, 0, 285, 427, 286, 287, 288,
	289, 0, 0, 290, 0, 0, 291, 292, 293, 294,
	295, 296, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 297, 298, 299, 379, 0, 0, 0, 398, 0,
	401, 375, 376, 388, 400, 0, 0, 0, 0, 0,
	382, 0, 0, 32, 33, 34, 35, 36, 37, 38,
	39, 0, 40, 41, 42, 0, 0, 0, 0, 387,
	0, 0, 43, 44, 0, 45, 46, 405, 47, 48,
	49, 300, 301, 406, 302, 303, 0, 50, 51, 52,
	53, 54, 396, 0, 55, 56, 304, 305, 57, 0,
	58, 59, 60, 61, 306, 0, 407, 0, 62, 63,
	64, 65, 408, 66, 67, 68, 0, 69, 70, 71,
	72, 73, 74, 0, 409, 75, 76, 77, 0, 0,
	0, 410, 0, 0, 0, 78, 79, 80, 81, 82,
	83, 307, 308, 84, 437, 85, 0, 86, 87, 88,
	89, 90, 0, 91, 92, 93, 0, 0, 94, 95,
	96, 97, 98, 0, 99, 100, 101, 0, 102, 103,
	104, 0, 105, 106, 107, 108, 386, 109, 110, 111,
	310, 394, 112, 0, 113, 114, 311, 115, 0, 116,
	0, 117, 411, 0, 412, 118, 119, 120, 0, 121,
	312, 0, 313, 122, 0, 123, 124, 125, 126, 127,
	413, 128, 129, 130, 131, 0, 132, 133, 134, 135,
	136, 137, 0, 138, 414, 314, 139, 140, 141, 142,
	315, 316, 0, 317, 0, 143, 415, 416, 144, 417,
	145, 146, 147, 148, 149, 0, 0, 150, 318, 418,
	151, 419, 0, 152, 153, 154, 0, 0, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 319, 420, 320, 170, 171, 321, 378,
	172, 173, 421, 174, 395, 322, 175, 323, 176, 177,
	178, 0, 179, 0, 0, 389, 181, 182, 0, 0,
	183, 324, 422, 184, 423, 325, 185, 186, 187, 188,
	189, 190, 191, 0, 192, 193, 326, 194, 327, 197,
	195, 196, 0, 198, 199, 200, 201, 202, 203, 204,
	205, 328, 206, 207, 208, 209, 0, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 0, 221,
	222, 424, 223, 224, 225, 329, 226, 227, 228, 229,
	230, 231, 232, 233, 0, 234, 235, 236, 237, 238,
	0, 239, 240, 330, 241, 242, 425, 243, 244, 331,
	245, 0, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 332, 0, 257, 258, 0, 259, 426,
	260, 261, 262, 263, 264, 0, 333, 334, 0, 0,
	265, 266, 335, 267, 336, 393, 268, 269, 270, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 284, 337, 338, 0,
	285, 427, 286, 287, 288, 289, 0, 0, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 297, 298, 299, 379,
	0, 0, 0, 398, 0, 401, 375, 376, 388, 400,
	0, 0, 0, 0, 0, 382, 0, 0, 32, 33,
	34, 35, 36, 37, 38, 39, 0, 40, 41, 42,
	0, 0, 0, 0, 387, 0, 0, 43, 44, 0,
	45, 46, 405, 47, 48, 49, 300, 301, 406, 302,
	303, 0, 50, 51, 52, 53, 54, 396, 0, 55,
	56, 304, 305, 57, 0, 58, 59, 60, 61, 306,
	0, 407, 0, 62, 63, 64, 65, 408, 66, 67,
	68, 0, 69, 70, 71, 72, 73, 74, 0, 409,
	75, 76, 77, 0, 0, 0, 410, 0, 0, 0,
	78, 79, 80, 81, 82, 83, 307, 308, 84, 0,
	85, 0, 86, 87, 88, 89, 90, 0, 91, 92,
	93, 0, 0, 94, 95, 96, 97, 98, 0, 99,
	100, 101, 0, 102, 103, 104, 0, 105, 106, 107,
	108, 386, 109, 110, 111, 310, 394, 112, 0, 113,
	114, 311, 115, 0, 116, 0, 117, 411, 0, 412,
	118, 119, 120, 0, 121, 312, 0, 313, 122, 0,
	123, 124, 125, 126, 127, 413, 128, 129, 130, 131,
	0, 132, 133, 134, 135, 136, 137, 0, 138, 414,
	314, 139, 140, 141, 142, 315, 316, 0, 317, 0,
	143, 415, 416, 144, 417, 145, 146, 147, 148, 149,
	0, 0, 150, 318, 418, 151, 419, 0, 152, 153,
	154, 0, 0, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 319, 420,
	320, 170, 171, 321, 378, 172, 173, 421, 174, 395,
	322, 175, 323, 176, 177, 178, 0, 179, 0, 0,
	389, 181, 182, 0, 0, 183, 324, 422, 184, 423,
	325, 185, 186, 187, 188, 189, 190, 191, 0, 192,
	193, 326, 194, 327, 197, 195, 196, 0, 198, 199,
	200, 201, 202, 203, 204, 205, 328, 206, 207, 208,
	209, 0, 210, 211, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 0, 221, 222, 424, 223, 224, 225,
	329, 226, 227, 228, 229, 230, 231, 232, 233, 0,
	234, 235, 236, 237, 238, 0, 239, 240, 330, 241,
	242, 425, 243, 244, 331, 245, 0, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 332, 0,
	257, 258, 0, 259, 426, 260, 261, 262, 263, 264,
	0, 333, 334, 0, 0, 265, 266, 335, 267, 336,
	393, 268, 269, 270, 271, 272, 273, 274, 0, 0,
	275, 276, 277, 278, 279, 0, 0, 280, 281, 282,
	283, 284, 337, 338, 0, 285, 427, 286, 287, 288,
	289, 0, 0, 290, 0, 0, 291, 292, 293, 294,
	295, 296, 339, 340, 341, 342, 343, 344, 345, 346,
	347, 297, 298, 299, 379, 0, 0, 0, 0, 0,
	0, 375, 376, 373, 0, 0, 398, 0, 401, 0,
	382, 388, 400, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 33, 34, 35, 36, 37, 38, 39, 453,
	40, 41, 42, 0, 0, 0, 0, 387, 0, 0,
	43, 44, 0, 45, 46, 405, 47, 48, 49, 300,
	301, 406, 302, 303, 0, 50, 51, 52, 53, 54,
	396, 0, 55, 56, 304, 305, 57, 0, 58, 59,
	60, 61, 306, 0, 407, 0, 62, 63, 64, 65,
	408, 66, 67, 68, 0, 69, 70, 71, 72, 73,
	74, 0, 409, 75, 76, 77, 0, 0, 0, 410,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 307,
	308, 84, 0, 85, 0, 86, 87, 88, 89, 90,
	0, 91, 92, 93, 0, 0, 94, 95, 96, 97,
	98, 0, 99, 100, 101, 0, 102, 103, 104, 0,
	105, 106, 107, 108, 386, 109, 110, 111, 310, 394,
	112, 0, 113, 114, 311, 115, 0, 116, 0, 117,
	411, 0, 412, 118, 119, 120, 0, 121, 312, 0,
	313, 122, 0, 123, 124, 125, 126, 127, 413, 128,
	129, 130, 131, 0, 132, 133, 134, 135, 136, 137,
	0, 138, 414, 314, 139, 140, 141, 142, 315, 316,
	0, 317, 0, 143, 415, 416, 144, 417, 145, 146,
	147, 148, 149, 0, 0, 150, 318, 418, 151, 419,
	0, 152, 153, 154, 0, 0, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 319, 420, 320, 170, 171, 321, 378, 172, 173,
	421, 174, 395, 322, 175, 323, 176, 177, 178, 0,
	179, 0, 0, 389, 181, 182, 0, 0, 183, 324,
	422, 184, 423, 325, 185, 186, 187, 188, 189, 190,
	191, 0, 192, 193, 326, 194, 327, 197, 195, 196,
	0, 198, 199, 200, 201, 202, 203, 204, 205, 328,
	206, 207, 208, 209, 0, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 0, 221, 222, 424,
	223, 224, 225, 329, 226, 227, 228, 229, 230, 231,
	232, 233, 0, 234, 235, 236, 237, 238, 0, 239,
	240, 330, 241, 242, 425, 243, 244, 331, 245, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 332, 0, 257, 258, 0, 259, 426, 260, 261,
	262, 263, 264, 0, 333, 334, 0, 0, 265, 266,
	335, 267, 336, 393, 268, 269, 270, 271, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 284, 337, 338, 0, 285, 427,
	286, 287, 288, 289, 0, 0, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 297, 298, 299, 379, 0, 0,
	0, 398, 0, 401, 375, 376, 388, 400, 0, 0,
	0, 0, 0, 382, 0, 0, 32, 33, 34, 35,
	36, 37, 38, 39, 0, 40, 41, 42, 0, 0,
	0, 0, 387, 0, 0, 43, 44, 0, 45, 46,
	405, 47, 48, 49, 300, 301, 406, 302, 303, 0,
	50, 51, 52, 53, 54, 396, 0, 55, 56, 304,
	305, 57, 0, 58, 59, 60, 61, 306, 0, 407,
	0, 62, 63, 64, 65, 408, 66, 67, 68, 0,
	69, 70, 71, 72, 73, 74, 0, 409, 75, 76,
	889, 0, 0, 0, 410, 0, 0, 0, 78, 79,
	80, 81, 82, 83, 307, 308, 84, 0, 85, 0,
	86, 87, 88, 89, 90, 0, 91, 92, 93, 0,
	0, 94, 95, 96, 97, 98, 0, 99, 100, 101,
	0, 102, 103, 104, 0, 105, 106, 107, 108, 386,
	109, 110, 111, 310, 394, 112, 0, 113, 114, 311,
	115, 0, 116, 0, 117, 411, 0, 412, 118, 119,
	120, 0, 121, 312, 0, 313, 122, 0, 123, 124,
	125, 126, 127, 413, 128, 129, 130, 131, 0, 132,
	133, 134, 135, 136, 137, 0, 138, 414, 314, 139,
	140, 141, 142, 315, 316, 0, 317, 0, 143, 415,
	416, 144, 417, 145, 146, 147, 148, 149, 0, 0,
	150, 318, 418, 151, 419, 0, 152, 153, 154, 0,
	0, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 319, 420, 320, 170,
	171, 321, 378, 172, 173, 421, 174, 395, 322, 175,
	323, 176, 177, 178, 0, 179, 0, 0, 389, 181,
	182, 0, 0, 183, 324, 422, 184, 423, 325, 185,
	186, 187, 188, 189, 190, 191, 0, 192, 193, 326,
	194, 327, 197, 195, 196, 0, 198, 199, 200, 201,
	202, 203, 204, 205, 328, 206, 207, 208, 209, 0,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 0, 221, 222, 424, 223, 224, 225, 329, 226,
	227, 228, 229, 230, 231, 232, 233, 0, 234, 235,
	236, 237, 238, 0, 239, 240, 330, 241, 242, 425,
	243, 244, 331, 245, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 332, 0, 257, 258,
	0, 259, 426, 260, 261, 262, 263, 264, 0, 333,
	334, 0, 0, 265, 266, 335, 267, 336, 393, 268,
	269, 270, 271, 888, 273, 274, 0, 0, 275, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 284,
	337, 338, 0, 285, 427, 286, 287, 288, 289, 0,
	0, 290, 0, 0, 291, 292, 293, 294, 295, 296,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 297,
	298, 299, 379, 0, 0, 0, 398, 0, 401, 375,
	376, 388, 400, 0, 0, 0, 0, 0, 382, 0,
	0, 32, 33, 34, 35, 36, 37, 38, 39, 0,
	40, 41, 42, 0, 0, 0, 0, 387, 0, 0,
	43, 44, 0, 45, 46, 405, 47, 48, 49, 887,
	301, 406, 302, 303, 0, 50, 51, 52, 53, 54,
	396, 0, 55, 56, 304, 305, 57, 0, 58, 59,
	60, 61, 306, 0, 407, 0, 62, 63, 64, 65,
	408, 66, 67, 68, 0, 69, 70, 71, 72, 73,
	74, 0, 409, 75, 76, 889, 0, 0, 0, 410,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 307,
	308, 84, 0, 85, 0, 86, 87, 88, 89, 90,
	0, 91, 92, 93, 0, 0, 94, 95, 96, 97,
	98, 0, 99, 100, 101, 0, 102, 103, 104, 0,
	105, 106, 107, 108, 386, 109, 110, 111, 310, 394,
	112, 0, 113, 114, 311, 115, 0, 116, 0, 117,
	411, 0, 412, 118, 119, 120, 0, 121, 312, 0,
	313, 122, 0, 123, 124, 125, 126, 127, 413, 128,
	129, 130, 131, 0, 132, 133, 134, 135, 136, 137,
	0, 138, 414, 314, 139, 140, 141, 142, 315, 316,
	0, 317, 0, 143, 415, 416, 144, 417, 145, 146,
	147, 148, 149, 0, 0, 150, 318, 418, 151, 419,
	0, 152, 153, 154, 0, 0, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 319, 420, 320, 170, 171, 321, 378, 172, 173,
	421, 174, 395, 322, 175, 323, 176, 177, 178, 0,
	179, 0, 0, 389, 181, 182, 0, 0, 183, 324,
	422, 184, 423, 325, 185, 186, 187, 188, 189, 190,
	191, 0, 192, 193, 326, 194, 327, 197, 195, 196,
	0, 198, 199, 200, 201, 202, 203, 204, 205, 328,
	206, 207, 208, 209, 0, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 0, 221, 222, 424,
	223, 224, 225, 329, 226, 227, 228, 229, 230, 231,
	232, 233, 0, 234, 235, 236, 237, 238, 0, 239,
	240, 330, 241, 242, 425, 243, 244, 331, 245, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 332, 0, 257, 258, 0, 259, 426, 260, 261,
	262, 263, 264, 0, 333, 334, 0, 0, 265, 266,
	335, 267, 336, 393, 268, 269, 270, 271, 888, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 284, 337, 338, 0, 285, 427,
	286, 287, 288, 289, 0, 0, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 297, 298, 299, 379, 0, 0,
	0, 398, 0, 401, 375, 376, 388, 400, 0, 0,
	0, 0, 0, 382, 0, 0, 32, 33, 34, 35,
	36, 37, 38, 39, 0, 40, 41, 42, 0, 0,
	0, 0, 387, 0, 0, 43, 44, 0, 45, 46,
	405, 47, 48, 49, 300, 301, 406, 302, 303, 0,
	50, 51, 52, 53, 54, 396, 0, 55, 56, 304,
	305, 57, 0, 58, 59, 60, 61, 306, 0, 407,
	0, 62, 63, 64, 65, 408, 66, 67, 68, 0,
	69, 70, 71, 72, 73, 74, 0, 409, 75, 76,
	77, 0, 0, 0, 410, 0, 0, 0, 78, 79,
	80, 81, 82, 83, 307, 308, 84, 0, 85, 0,
	86, 87, 88, 89, 90, 0, 91, 92, 93, 0,
	0, 94, 95, 96, 97, 98, 0, 99, 100, 101,
	0, 102, 103, 104, 0, 105, 106, 107, 108, 386,
	109, 110, 111, 310, 394, 112, 0, 113, 114, 311,
	115, 0, 116, 0, 117, 411, 0, 412, 118, 119,
	120, 0, 121, 312, 0, 313, 122, 0, 123, 124,
	125, 126, 127, 413, 128, 129, 130, 131, 0, 132,
	133, 134, 135, 136, 137, 0, 138, 414, 314, 139,
	140, 141, 142, 315, 316, 0, 317, 0, 143, 415,
	416, 144, 417, 145, 146, 147, 148, 149, 0, 0,
	150, 318, 418, 151, 419, 0, 152, 153, 154, 0,
	0, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 319, 420, 320, 170,
	171, 321, 378, 172, 173, 421, 174, 395, 322, 175,
	323, 176, 177, 178, 0, 179, 0, 0, 389, 181,
	182, 0, 0, 183, 324, 422, 184, 423, 325, 185,
	186, 187, 188, 189, 190, 191, 0, 192, 193, 326,
	194, 327, 197, 195, 196, 0, 198, 199, 200, 201,
	202, 203, 204, 205, 328, 206, 207, 208, 209, 0,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 0, 221, 222, 424, 223, 224, 225, 329, 226,
	227, 228, 229, 230, 231, 232, 233, 0, 234, 235,
	236, 237, 238, 0, 239, 240, 330, 241, 242, 425,
	243, 244, 331, 245, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 332, 0, 257, 258,
	0, 259, 426, 260, 261, 262, 263, 264, 0, 333,
	334, 0, 0, 265, 266, 335, 267, 336, 393, 268,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 284,
	337, 338, 0, 285, 427, 286, 287, 288, 289, 0,
	0, 290, 0, 0, 291, 292, 293, 294, 295, 296,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 297,
	298, 299, 379, 0, 0, 0, 398, 0, 401, 375,
	376, 388, 400, 0, 0, 0, 0, 0, 382, 0,
	0, 32, 33, 34, 35, 36, 37, 38, 39, 0,
	40, 41, 42, 0, 0, 0, 0, 387, 0, 0,
	43, 44, 0, 45, 46, 405, 47, 48, 49, 300,
	301, 406, 302, 303, 0, 50, 51, 52, 53, 54,
	396, 0, 55, 56, 304, 305, 57, 0, 58, 59,
	60, 61, 306, 0, 407, 0, 62, 63, 64, 65,
	408, 66, 67, 68, 0, 69, 70, 71, 72, 73,
	74, 0, 409, 75, 76, 889, 0, 0, 0, 410,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 307,
	308, 84, 0, 85, 0, 86, 87, 88, 89, 90,
	0, 91, 92, 93, 0, 0, 94, 95, 96, 97,
	98, 0, 99, 100, 101, 0, 102, 103, 104, 0,
	105, 106, 107, 108, 386, 109, 110, 111, 310, 394,
	112, 0, 113, 114, 311, 115, 0, 116, 0, 117,
	411, 0, 412, 118, 119, 120, 0, 121, 312, 0,
	313, 122, 0, 123, 124, 125, 126, 127, 0, 128,
	129, 130, 131, 0, 132, 133, 134, 135, 136, 137,
	0, 138, 414, 314, 139, 140, 141, 142, 315, 316,
	0, 317, 0, 143, 0, 0, 144, 417, 145, 146,
	147, 148, 149, 0, 0, 150, 318, 418, 151, 0,
	0, 152, 153, 154, 0, 0, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 319, 420, 320, 170, 171, 321, 378, 172, 173,
	0, 174, 395, 322, 175, 323, 176, 177, 178, 0,
	179, 0, 0, 389, 181, 182, 0, 0, 183, 324,
	422, 184, 423, 325, 185, 186, 187, 188, 189, 190,
	191, 0, 192, 193, 326, 194, 327, 197, 195, 196,
	0, 198, 199, 200, 201, 202, 203, 204, 205, 328,
	206, 207, 208, 209, 0, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 0, 221, 222, 424,
	223, 224, 225, 329, 226, 227, 228, 229, 230, 231,
	232, 233, 0, 234, 235, 236, 237, 238, 0, 239,
	240, 330, 241, 242, 0, 243, 244, 331, 245, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 332, 0, 257, 258, 0, 259, 426, 260, 261,
	262, 263, 264, 0, 333, 334, 0, 0, 265, 266,
	335, 267, 336, 393, 268, 269, 270, 271, 888, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 284, 337, 338, 0, 285, 427,
	286, 287, 288, 289, 0, 0, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 297, 298, 299, 0, 0, 29,
	0, 0, 0, 0, 375, 376, 0, 0, 0, 0,
	0, 0, 0, 382, 32, 33, 34, 35, 36, 37,
	38, 39, 0, 40, 41, 42, 0, 0, 0, 0,
	0, 0, 0, 43, 44, 0, 45, 46, 0, 47,
	48, 49, 300, 301, 0, 302, 303, 0, 50, 51,
	52, 53, 54, 0, 0, 55, 56, 304, 305, 57,
	0, 58, 59, 60, 61, 306, 0, 0, 0, 62,
	63, 64, 65, 0, 66, 67, 68, 0, 69, 70,
	71, 72, 73, 74, 0, 0, 75, 76, 77, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 80, 81,
	82, 83, 307, 308, 84, 0, 85, 0, 86, 87,
	88, 89, 90, 0, 91, 92, 93, 0, 0, 94,
	95, 96, 97, 98, 0, 99, 100, 101, 0, 102,
	103, 104, 0, 105, 106, 107, 108, 309, 109, 110,
	111, 310, 0, 112, 0, 113, 114, 311, 115, 0,
	116, 0, 117, 0, 0, 0, 118, 119, 120, 0,
	121, 312, 0, 313, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 130, 131, 0, 132, 133, 134,
	135, 136, 137, 0, 138, 0, 314, 139, 140, 141,
	142, 315, 316, 0, 317, 0, 143, 0, 0, 144,
	0, 145, 146, 147, 148, 149, 0, 0, 150, 318,
	0, 151, 0, 0, 152, 153, 154, 0, 0, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	166, 167, 168, 169, 319, 0, 320, 170, 171, 321,
	0, 172, 173, 0, 174, 0, 322, 175, 323, 176,
	177, 178, 0, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 324, 0, 184, 0, 325, 185, 186, 187,
	188, 189, 190, 191, 0, 192, 193, 326, 194, 327,
	197, 195, 196, 0, 198, 199, 200, 201, 202, 203,
	204, 205, 328, 206, 207, 208, 209, 0, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 0,
	221, 222, 0, 223, 224, 225, 329, 226, 227, 228,
	229, 230, 231, 232, 233, 0, 234, 235, 236, 237,
	238, 0, 239, 240, 330, 241, 242, 0, 243, 244,
	331, 245, 0, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 332, 0, 257, 258, 0, 259,
	0, 260, 261, 262, 263, 264, 0, 333, 334, 0,
	0, 265, 266, 335, 267, 336, 0, 268, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 284, 337, 338,
	0, 285, 0, 286, 287, 288, 289, 0, 0, 290,
	0, 0, 291, 292, 293, 294, 295, 296, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 297, 298, 299,
	0, 0, 29, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 769, 32, 33, 34,
	35, 36, 37, 38, 39, 0, 40, 41, 42, 0,
	0, 0, 0, 0, 0, 0, 43, 44, 0, 45,
	46, 0, 47, 48, 49, 300, 301, 0, 302, 303,
	0, 50, 51, 52, 53, 54, 0, 0, 55, 56,
	304, 305, 57, 0, 58, 59, 60, 61, 306, 0,
	0, 0, 62, 63, 64, 65, 0, 66, 67, 68,
	0, 69, 70, 71, 72, 73, 74, 0, 0, 75,
	76, 77, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 80, 81, 82, 83, 307, 308, 84, 0, 85,
	0, 86, 87, 88, 89, 90, 0, 91, 92, 93,
	0, 0, 94, 95, 96, 97, 98, 0, 99, 100,
	101, 0, 102, 103, 104, 0, 105, 106, 107, 108,
	309, 109, 110, 111, 310, 0, 112, 0, 113, 114,
	311, 115, 0, 116, 0, 117, 0, 0, 0, 118,
	119, 120, 0, 121, 312, 0, 313, 122, 0, 123,
	124, 125, 126, 127, 0, 128, 129, 130, 131, 0,
	132, 133, 134, 135, 136, 137, 0, 138, 0, 314,
	139, 140, 141, 142, 315, 316, 0, 317, 0, 143,
	0, 0, 144, 0, 145, 146, 147, 148, 149, 0,
	0, 150, 318, 0, 151, 0, 0, 152, 153, 154,
	0, 0, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 319, 0, 320,
	170, 171, 321, 0, 172, 173, 0, 174, 0, 322,
	175, 323, 176, 177, 178, 0, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 324, 0, 184, 0, 325,
	185, 186, 187, 188, 189, 190, 191, 0, 192, 193,
	326, 194, 327, 197, 195, 196, 0, 198, 199, 200,
	201, 202, 203, 204, 205, 328, 206, 207, 208, 209,
	0, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 0, 221, 222, 0, 223, 224, 225, 329,
	226, 227, 228, 229, 230, 231, 232, 233, 0, 234,
	235, 236, 237, 238, 0, 239, 240, 330, 241, 242,
	0, 243, 244, 331, 245, 0, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 332, 0, 257,
	258, 0, 259, 0, 260, 261, 262, 263, 264, 0,
	333, 334, 0, 0, 265, 266, 335, 267, 336, 0,
	268, 269, 270, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	284, 337, 338, 0, 285, 0, 286, 287, 288, 289,
	0, 0, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	297, 298, 299, 0, 0, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 433,
	32, 33, 34, 35, 36, 37, 38, 39, 0, 40,
	41, 42, 0, 0, 0, 0, 0, 0, 0, 43,
	44, 0, 45, 46, 0, 47, 48, 49, 300, 301,
	0, 302, 303, 0, 50, 51, 52, 53, 54, 0,
	0, 55, 56, 304, 305, 57, 0, 58, 59, 60,
	61, 306, 0, 0, 0, 62, 63, 64, 65, 0,
	66, 67, 68, 0, 69, 70, 71, 72, 73, 74,
	0, 0, 75, 76, 77, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 80, 81, 82, 83, 307, 308,
	84, 0, 85, 0, 86, 87, 88, 89, 90, 0,
	91, 92, 93, 0, 0, 94, 95, 96, 97, 98,
	0, 99, 100, 101, 0, 102, 103, 104, 0, 105,
	106, 107, 108, 309, 109, 110, 111, 310, 0, 112,
	0, 113, 114, 311, 115, 0, 116, 0, 117, 0,
	0, 0, 118, 119, 120, 0, 121, 312, 0, 313,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	130, 131, 0, 132, 133, 134, 135, 136, 137, 0,
	138, 0, 314, 139, 140, 141, 142, 315, 316, 0,
	317, 0, 143, 0, 0, 144, 0, 145, 146, 147,
	148, 149, 0, 0, 150, 318, 0, 151, 0, 0,
	152, 153, 154, 0, 0, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	319, 0, 320, 170, 171, 321, 0, 172, 173, 0,
	174, 0, 322, 175, 323, 176, 177, 178, 0, 179,
	0, 27, 180, 181, 182, 0, 0, 183, 324, 0,
	184, 0, 325, 185, 186, 187, 188, 189, 190, 191,
	0, 192, 193, 326, 194, 327, 197, 195, 196, 0,
	198, 199, 200, 201, 202, 203, 204, 205, 328, 206,
	207, 208, 209, 0, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 0, 221, 222, 0, 223,
	224, 225, 329, 226, 227, 228, 229, 230, 231, 232,
	233, 0, 234, 235, 236, 237, 238, 0, 239, 240,
	330, 241, 242, 0, 243, 244, 331, 245, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	332, 0, 257, 258, 0, 259, 0, 260, 261, 262,
	263, 264, 0, 333, 334, 0, 0, 265, 266, 335,
	267, 336, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 284, 337, 338, 0, 285, 0, 286,
	287, 288, 289, 0, 0, 290, 0, 0, 291, 292,
	293, 294, 295, 296, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 297, 298, 299, 29, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 33, 34, 35, 36, 37, 38, 39, 0,
	40, 41, 42, 0, 0, 0, 0, 0, 0, 0,
	43, 44, 0, 45, 46, 0, 47, 48, 49, 300,
	301, 0, 302, 303, 0, 50, 51, 52, 53, 54,
	0, 0, 55, 56, 304, 305, 57, 0, 58, 59,
	60, 61, 306, 0, 0, 0, 62, 63, 64, 65,
	0, 66, 67, 68, 0, 69, 70, 71, 72, 73,
	74, 0, 0, 75, 76, 77, 0, 0, 0, 0,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 307,
	308, 84, 0, 85, 0, 86, 87, 88, 89, 90,
	0, 91, 92, 93, 0, 0, 94, 95, 96, 97,
	98, 0, 99, 100, 101, 0, 102, 103, 104, 0,
	105, 106, 107, 108, 309, 109, 110, 111, 310, 0,
	112, 0, 113, 114, 311, 115, 0, 116, 0, 117,
	0, 0, 0, 118, 119, 120, 0, 121, 312, 0,
	313, 122, 0, 123, 124, 125, 126, 127, 0, 128,
	129, 130, 131, 0, 132, 133, 134, 135, 136, 137,
	0, 138, 0, 314, 139, 140, 141, 142, 315, 316,
	0, 317, 0, 143, 0, 0, 144, 0, 145, 146,
	147, 148, 149, 0, 0, 150, 318, 0, 151, 0,
	0, 152, 153, 154, 0, 0, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 319, 0, 320, 170, 171, 321, 0, 172, 173,
	0, 174, 0, 322, 175, 323, 176, 177, 178, 0,
	179, 0, 0, 180, 181, 182, 0, 0, 183, 324,
	0, 184, 0, 325, 185, 186, 187, 188, 189, 190,
	191, 0, 192, 193, 326, 194, 327, 197, 195, 196,
	0, 198, 199, 200, 201, 202, 203, 204, 205, 328,
	206, 207, 208, 209, 0, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 0, 221, 222, 0,
	223, 224, 225, 329, 226, 227, 228, 229, 230, 231,
	232, 233, 0, 234, 235, 236, 237, 238, 0, 239,
	240, 330, 241, 242, 0, 243, 244, 331, 245, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 332, 0, 257, 258, 0, 259, 0, 260, 261,
	262, 263, 264, 0, 333, 334, 0, 0, 265, 266,
	335, 267, 336, 0, 268, 269, 270, 271, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 284, 337, 338, 0, 285, 0,
	286, 287, 288, 289, 0, 0, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 297, 298, 299, 29, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 32, 33, 34, 35, 36, 37, 38, 39,
	0, 40, 41, 42, 0, 0, 0, 0, 0, 0,
	0, 43, 44, 0, 45, 46, 0, 47, 48, 49,
	300, 301, 0, 302, 303, 0, 50, 51, 52, 53,
	54, 0, 0, 55, 56, 304, 305, 57, 0, 58,
	59, 60, 61, 306, 0, 0, 0, 62, 63, 64,
	65, 0, 66, 67, 68, 0, 69, 70, 71, 72,
	73, 74, 0, 0, 75, 76, 77, 0, 0, 0,
	0, 0, 0, 0, 78, 79, 80, 81, 82, 83,
	307, 308, 84, 0, 85, 0, 86, 87, 88, 89,
	90, 0, 91, 92, 93, 0, 0, 94, 95, 96,
	97, 98, 0, 99, 100, 101, 0, 102, 103, 104,
	0, 105, 106, 107, 108, 309, 109, 110, 111, 310,
	0, 112, 0, 113, 114, 311, 115, 0, 116, 0,
	117, 0, 0, 0, 118, 119, 120, 0, 121, 312,
	0, 313, 122, 0, 123, 124, 125, 126, 127, 0,
	128, 129, 130, 131, 0, 132, 133, 134, 135, 136,
	137, 0, 138, 0, 314, 139, 140, 141, 142, 315,
	316, 0, 317, 0, 143, 0, 0, 144, 0, 145,
	146, 147, 148, 149, 0, 0, 150, 318, 0, 151,
	0, 0, 152, 153, 154, 0, 0, 155, 156, 157,
	158, 159, 160, 161, 162, 163, 164, 165, 166, 167,
	168, 169, 319, 0, 320, 170, 171, 321, 0, 172,
	173, 0, 174, 0, 322, 175, 323, 176, 177, 178,
	0, 179, 0, 0, 180, 181, 182, 0, 0, 183,
	324, 0, 184, 0, 325, 185, 186, 187, 188, 0,
	190, 191, 0, 192, 193, 326, 194, 327, 197, 195,
	196, 0, 198, 199, 200, 201, 202, 203, 0, 205,
	328, 206, 207, 208, 209, 0, 210, 211, 212, 213,
	214, 215, 216, 217, 218, 219, 220, 0, 221, 222,
	0, 223, 224, 225, 329, 0, 227, 228, 229, 230,
	231, 232, 233, 0, 234, 235, 236, 237, 238, 0,
	239, 240, 330, 241, 242, 0, 243, 244, 331, 245,
	0, 246, 247, 248, 249, 250, 251, 252, 253, 254,
	255, 256, 332, 0, 257, 258, 0, 259, 0, 260,
	261, 262, 263, 264, 0, 333, 334, 0, 0, 265,
	266, 335, 267, 336, 0, 268, 269, 270, 271, 272,
	273, 274, 0, 0, 275, 276, 277, 278, 279, 0,
	0, 280, 281, 282, 283, 284, 337, 338, 0, 285,
	0, 286, 287, 288, 289, 0, 0, 290, 0, 0,
	291, 292, 293, 294, 295, 296, 339, 340, 341, 342,
	343, 344, 345, 346, 347, 297, 298, 299, 561, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 32, 33, 34, 35, 36, 37, 38,
	39, 0, 40, 41, 42, 0, 0, 0, 0, 0,
	0, 0, 43, 44, 0, 45, 46, 405, 47, 48,
	49, 0, 558, 406, 0, 560, 0, 50, 51, 52,
	53, 54, 0, 0, 55, 56, 0, 0, 57, 0,
	58, 59, 60, 61, 0, 0, 407, 0, 62, 63,
	64, 65, 408, 66, 67, 68, 0, 69, 70, 71,
	72, 73, 74, 0, 409, 75, 76, 77, 0, 0,
	0, 410, 0, 0, 0, 78, 79, 80, 81, 82,
	83, 0, 0, 84, 0, 85, 0, 86, 87, 88,
	89, 90, 0, 91, 92, 93, 0, 0, 94, 95,
	96, 97, 98, 0, 99, 100, 101, 0, 102, 103,
	104, 0, 105, 106, 107, 108, 0, 109, 110, 111,
	0, 0, 112, 0, 113, 114, 0, 115, 0, 116,
	0, 117, 411, 0, 412, 118, 119, 120, 0, 121,
	0, 0, 0, 122, 0, 123, 124, 125, 126, 127,
	413, 128, 129, 130, 131, 0, 132, 133, 134, 135,
	136, 137, 0, 138, 414, 0, 139, 140, 141, 142,
	555, 556, 0, 0, 0, 143, 415, 416, 144, 417,
	145, 146, 147, 148, 149, 0, 0, 150, 0, 418,
	151, 419, 0, 152, 153, 154, 0, 0, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 0, 420, 0, 170, 171, 0, 0,
	172, 173, 421, 174, 0, 0, 175, 0, 176, 177,
	178, 0, 179, 0, 0, 180, 181, 182, 0, 0,
	183, 0, 422, 184, 423, 0, 185, 186, 187, 188,
	189, 190, 191, 0, 192, 193, 0, 194, 0, 197,
	195, 196, 0, 198, 199, 200, 201, 202, 203, 204,
	205, 559, 206, 207, 208, 209, 0, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 0, 221,
	222, 424, 223, 224, 225, 0, 226, 227, 228, 229,
	230, 231, 232, 233, 0, 234, 235, 236, 237, 238,
	0, 239, 240, 0, 241, 242, 425, 243, 244, 557,
	245, 0, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 0, 0, 257, 258, 0, 259, 426,
	260, 261, 262, 263, 264, 0, 0, 0, 0, 0,
	265, 266, 0, 267, 0, 0, 268, 269, 270, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 284, 0, 0, 0,
	285, 427, 286, 287, 288, 289, 0, 0, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 0, 0, 0,
	0, 0, 388, 0, 0, 473, 297, 298, 299, 485,
	486, 487, 0, 0, 0, 0, 0, 0, 0, 0,
	388, 0, 0, 473, 0, 0, 489, 485, 486, 487,
	0, 0, 0, 0, 475, 0, 0, 0, 388, 0,
	0, 473, 0, 0, 489, 485, 486, 487, 0, 0,
	0, 0, 475, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 489, 0, 474, 0, 0, 0, 0, 0,
	475, 388, 0, 0, 473, 0, 0, 0, 485, 486,
	487, 0, 474, 0, 0, 0, 0, 0, 0, 388,
	0, 0, 473, 0, 0, 489, 485, 486, 487, 0,
	474, 0, 0, 475, 0, 0, 0, 0, 0, 0,
	0, 388, 0, 489, 473, 0, 0, 545, 485, 486,
	487, 475, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 474, 0, 489, 0, 0, 0, 0,
	0, 0, 0, 475, 0, 0, 0, 0, 796, 0,
	0, 474, 0, 388, 0, 0, 473, 0, 0, 0,
	485, 486, 487, 0, 0, 0, 0, 0, 0, 493,
	0, 0, 0, 474, 0, 388, 0, 489, 473, 0,
	795, 0, 0, 0, 0, 475, 0, 493, 0, 0,
	0, 0, 0, 0, 0, 495, 496, 0, 546, 0,
	0, 0, 0, 0, 0, 493, 0, 475, 0, 0,
	491, 0, 0, 495, 496, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 388, 0, 491, 473,
	0, 495, 496, 485, 486, 487, 0, 474, 493, 0,
	0, 497, 0, 0, 0, 0, 491, 0, 0, 0,
	489, 0, 0, 0, 500, 901, 493, 490, 475, 497,
	0, 0, 0, 0, 495, 496, 0, 0, 0, 0,
	0, 0, 500, 0, 0, 490, 0, 497, 493, 491,
	0, 388, 495, 496, 473, 0, 0, 0, 474, 0,
	500, 0, 0, 490, 0, 0, 0, 491, 0, 0,
	0, 803, 0, 0, 495, 496, 0, 0, 0, 0,
	497, 0, 0, 475, 0, 0, 0, 0, 0, 491,
	493, 0, 388, 500, 0, 473, 490, 0, 497, 0,
	0, 0, 0, 0, 0, 494, 0, 0, 0, 0,
	0, 500, 0, 474, 490, 0, 495, 496, 0, 0,
	497, 0, 0, 494, 475, 0, 0, 0, 0, 0,
	0, 491, 499, 500, 0, 0, 490, 388, 0, 0,
	473, 494, 0, 0, 485, 486, 487, 0, 0, 0,
	0, 0, 0, 0, 474, 900, 0, 0, 0, 0,
	0, 489, 497, 493, 498, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 494, 500, 0, 747, 490, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 495,
	496, 0, 494, 0, 0, 0, 0, 500, 492, 474,
	0, 482, 483, 484, 491, 476, 477, 478, 479, 480,
	481, 0, 0, 0, 494, 849, 492, 0, 743, 482,
	483, 484, 0, 476, 477, 478, 479, 480, 481, 0,
	0, 0, 0, 782, 492, 497, 0, 482, 483, 484,
	0, 476, 477, 478, 479, 480, 481, 543, 500, 0,
	0, 676, 0, 0, 0, 0, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 492, 0, 0,
	482, 483, 484, 0, 476, 477, 478, 479, 480, 481,
	0, 0, 845, 0, 0, 492, 0, 0, 482, 483,
	484, 0, 476, 477, 478, 479, 480, 481, 0, 0,
	0, 0, 0, 500, 493, 0, 0, 492, 0, 0,
	482, 483, 484, 0, 476, 477, 478, 479, 480, 481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 494,
	495, 496, 0, 0, 0, 0, 0, 0, 0, 388,
	0, 0, 473, 0, 500, 491, 485, 486, 487, 492,
	0, 0, 482, 483, 484, 0, 476, 477, 478, 479,
	480, 481, 0, 489, 0, 0, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 497, 0, 476, 477,
	478, 479, 480, 481, 0, 0, 0, 388, 0, 500,
	473, 0, 490, 0, 485, 486, 487, 0, 0, 0,
	0, 474, 0, 0, 0, 0, 0, 0, 0, 388,
	0, 489, 473, 0, 0, 0, 485, 486, 487, 475,
	0, 0, 492, 0, 0, 482, 483, 484, 0, 476,
	477, 478, 479, 480, 481, 0, 0, 0, 0, 0,
	0, 475, 0, 0, 0, 0, 0, 0, 0, 474,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	494, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 476, 477, 478, 479, 480, 481,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 493, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 476, 477, 478, 479, 480,
	481, 0, 495, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 0, 0, 493, 0, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 482, 483, 484, 0,
	476, 477, 478, 479, 480, 481, 493, 0, 497, 0,
	495, 496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 500, 0, 0, 490, 491, 0, 0, 0, 0,
	0, 0, 495, 496, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 491, 0, 0,
	0, 0, 0, 0, 0, 0, 497, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 500,
	0, 0, 490, 0, 0, 0, 0, 0, 497, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 500, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 816, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	494, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 494, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 482, 483,
	484, 0, 476, 477, 478, 479, 480, 481, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 492, 0, 0, 482, 483, 484, 0,
	476, 477, 478, 479, 480, 481, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 492, 0, 0, 482, 483,
	484, 0, 476, 477, 478, 479, 480, 481,
}
var yyPact = [...]int{

	-272, -1000, -1000, -1000, -1000, -1000, -32, -272, 151, -394,
	7099, -370, -1000, -3, 149, 149, 149, 131, -378, -380,
	3617, 3617, -1000, -130, -370, -1000, -355, 6666, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 3182,
	-1, 15, 11, -108, -113, 1, -1000, 4060, 2, 5365,
	-110, -272, -1000, -1000, -272, -272, 5365, -1000, -1000, -1000,
	-399, -1000, 9176, -1000, -1000, 5365, 5365, 5365, 5365, 5365,
	-1000, -1000, 2747, -1000, -1000, -1000, -366, -362, -1000, -369,
	-396, -1000, -1000, -1000, -1000, -1000, 5365, 21, -1000, -1000,
	-1000, -1000, -367, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -399, -368,
	-1000, -1000, -1000, 7530, -408, -1000, 9426, -1000, -1000, -1000,
	-1000, -1000, -1000, -102, -124, -1000, -54, -1000, -225, -1000,
	-1000, -1000, 9426, -1000, 63, -1000, -1000, -1000, -201, 9426,
	-1000, -131, 7530, -40, -1000, -1000, -1000, -40, -400, -1000,
	8898, 9, 3617, 8392, 7530, -264, 5365, 5365, 5365, 5365,
	5365, 5365, 5365, 5365, 5365, 5365, 5365, 5365, 5365, 5365,
	5365, 5365, -62, 5365, -267, 12, -1000, -1000, 1437, -1000,
	-369, 175, 175, 218, 9448, 9448, 8847, -380, -370, -1000,
	-1000, 2312, 217, -396, -1000, 1006, 5365, -315, 9426, -142,
	-371, 1868, 9, 5365, -381, 3182, -1000, -1000, -293, -1000,
	-201, -1000, 5365, -1000, -1000, -1000, -1000, -1000, -1000, -79,
	-402, -1000, 5365, 121, -344, -1000, -1000, -318, 5365, -1000,
	-1000, -1000, -1000, -1000, -372, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -391, -341, 99, 99, 78, 78,
	78, 171, 155, 155, 155, 155, 155, 155, 218, 9448,
	9035, 9131, 5365, 5365, -268, 9090, 5365, -1000, -21, -1000,
	-1000, -1000, 4, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -407, -409, -1000,
	9426, -1000, -382, -1000, -1000, -1000, -1000, 177, -29, -1000,
	5365, -1000, 6233, -317, -1000, -229, 5365, 5365, -383, -1000,
	9426, 185, -1000, -318, -412, -1000, -1000, -1000, -128, 8829,
	-1000, 7530, -1000, -344, -1000, -374, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 6, -6, 5365, -63, -1000, 8962, -361, -1000, 5365,
	-392, 1437, 5365, 5365, 8984, 212, 5365, 5365, 199, -1000,
	-1000, -1000, -1000, 3, 5365, -396, 5365, -1000, -1000, -362,
	-1000, -1000, 5365, 41, -1000, 5365, 9378, -1000, -1000, 7961,
	5365, -384, 5365, -1000, -229, -229, -1000, 5365, 5365, -6,
	-1000, -1000, -1000, -1000, -1000, 200, -1000, -1000, -10, 129,
	9426, 5365, -49, -51, 5365, 202, -1000, 68, -417, 1437,
	-1000, 168, 521, 5365, 5365, 163, 521, 5365, 5365, 234,
	-1000, 9426, -1000, 8880, -1000, 9426, 5365, -152, -1000, 8811,
	-1000, -1000, -385, -387, 9426, 9426, -10, -388, -321, 5365,
	5365, -1000, 5365, 5365, -160, -1000, -1000, -364, -1000, -1000,
	521, 521, 5365, 521, 234, -1000, 9426, -137, 128, -1000,
	-1000, -1000, -321, -1000, -1000, 7530, 9426, -403, -1000, 9426,
	-1000, -1000, -375, 5365, -1000, 521, -179, 5365, -1000, -404,
	-1000, 156, 5365, 201, 9426, -389, 4930, 4930, -406, 7530,
	-376, -1000, -420, -1000, -1000, -1000, -1000, 5800, -28, -198,
	8920, -1000, -1000, -1000, 198, -1000, 152, -1000, -1000, -1000,
	-1000, -1000, -1000, 4495, -1000,
}
var yyPgo = [...]int{

	0, 326, 325, 229, 192, 211, 175, 324, 323, 203,
	322, 6, 321, 19, 27, 0, 111, 26, 320, 319,
	14, 16, 23, 209, 318, 317, 13, 105, 316, 24,
	315, 315, 314, 313, 115, 312, 112, 114, 311, 310,
	309, 308, 306, 124, 305, 119, 304, 303, 302, 301,
	301, 11, 299, 298, 18, 33, 30, 298, 297, 296,
	135, 294, 293, 9, 292, 3, 8, 249, 290, 288,
	287, 15, 286, 284, 283, 281, 35, 25, 280, 199,
	279, 31, 10, 278, 276, 7, 5, 2, 274, 271,
	270, 269, 4, 1, 17, 268, 267, 263, 262, 32,
	40, 20, 28, 12, 260, 251, 247, 243, 238, 237,
	233, 233,
}
var yyR1 = [...]int{

	0, 1, 25, 25, 25, 26, 26, 26, 58, 13,
	13, 13, 97, 97, 98, 98, 108, 110, 110, 110,
	109, 109, 106, 28, 28, 107, 107, 107, 107, 107,
	107, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 16,
	16, 16, 16, 16, 16, 16, 16, 80, 80, 80,
	80, 80, 83, 18, 18, 19, 19, 19, 19, 19,
	17, 17, 17, 47, 47, 47, 11, 11, 81, 81,
	82, 82, 82, 94, 94, 94, 95, 95, 2, 2,
	4, 4, 3, 3, 3, 3, 5, 5, 6, 6,
	6, 6, 6, 6, 6, 27, 67, 67, 67, 10,
	10, 12, 12, 22, 22, 23, 24, 24, 21, 21,
	63, 63, 64, 64, 65, 66, 66, 43, 43, 42,
	42, 44, 44, 45, 46, 46, 46, 46, 48, 48,
	85, 85, 84, 84, 86, 88, 88, 88, 87, 89,
	89, 90, 90, 91, 91, 91, 92, 92, 93, 93,
	93, 93, 93, 33, 33, 33, 33, 34, 34, 34,
	34, 35, 35, 36, 36, 37, 37, 38, 38, 39,
	40, 40, 40, 41, 29, 29, 30, 30, 7, 7,
	20, 20, 31, 31, 32, 32, 62, 62, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	60, 60, 61, 61, 72, 75, 75, 76, 74, 74,
	73, 73, 96, 96, 51, 51, 51, 51, 52, 52,
	53, 53, 77, 77, 78, 78, 79, 8, 8, 9,
	9, 14, 14, 14, 14, 49, 49, 55, 50, 50,
	57, 54, 105, 105, 70, 70, 70, 70, 70, 71,
	69, 68, 56, 56, 56, 102, 102, 102, 111, 111,
	111, 111, 99, 99, 99, 99, 99, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 101, 101, 101, 101, 101, 101, 101,
	101, 101, 101, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
	104, 104, 104,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 0, 2, 2, 0, 1, 1,
	3, 2, 1, 2, 2, 3, 2, 3, 4, 0,
	1, 1, 2, 3, 0, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 5, 2, 2, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 3, 3, 2, 2, 3, 5, 4, 6, 3,
	5, 4, 6, 4, 6, 5, 7, 3, 2, 4,
	2, 3, 4, 3, 4, 3, 4, 5, 6, 1,
	1, 4, 1, 1, 1, 2, 2, 3, 5, 6,
	6, 4, 3, 1, 3, 3, 4, 4, 7, 5,
	2, 2, 0, 1, 2, 0, 1, 3, 1, 3,
	1, 3, 3, 3, 3, 2, 1, 3, 1, 1,
	3, 3, 1, 2, 4, 4, 1, 1, 9, 9,
	1, 2, 4, 4, 4, 0, 1, 1, 0, 1,
	5, 1, 0, 1, 0, 3, 1, 3, 4, 3,
	3, 0, 1, 3, 1, 2, 0, 1, 3, 1,
	0, 1, 2, 3, 2, 4, 2, 3, 2, 0,
	2, 0, 1, 3, 3, 2, 2, 0, 6, 1,
	0, 3, 0, 2, 2, 0, 1, 4, 2, 2,
	2, 2, 2, 1, 2, 2, 4, 2, 2, 1,
	1, 1, 0, 2, 5, 2, 3, 1, 1, 1,
	1, 3, 0, 1, 1, 1, 1, 1, 2, 3,
	2, 0, 5, 0, 5, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 1, 4, 5, 1, 2, 4, 2, 0,
	1, 0, 1, 2, 2, 2, 3, 5, 1, 2,
	0, 2, 1, 1, 1, 3, 3, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 1, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var yyChk = [...]int{

	-1000, -1, -2, -3, -4, -6, -5, 453, 332, -7,
	365, 405, -23, -22, 391, 200, 139, 267, -3, -4,
	-12, -10, 29, 124, 456, -33, -55, 262, -56, 6,
	-100, -101, 21, 22, 23, 24, 25, 26, 27, 28,
	30, 31, 32, 40, 41, 43, 44, 46, 47, 48,
	55, 56, 57, 58, 59, 62, 63, 66, 68, 69,
	70, 71, 76, 77, 78, 79, 81, 82, 83, 85,
	86, 87, 88, 89, 90, 93, 94, 95, 103, 104,
	105, 106, 107, 108, 111, 113, 115, 116, 117, 118,
	119, 121, 122, 123, 126, 127, 128, 129, 130, 132,
	133, 134, 136, 137, 138, 140, 141, 142, 143, 145,
	146, 147, 150, 152, 153, 155, 157, 159, 163, 164,
	165, 167, 171, 173, 174, 175, 176, 177, 179, 180,
	181, 182, 184, 185, 186, 187, 188, 189, 191, 194,
	195, 196, 197, 203, 206, 208, 209, 210, 211, 212,
	215, 218, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	244, 245, 248, 249, 251, 254, 256, 257, 258, 260,
	263, 264, 265, 268, 271, 274, 275, 276, 277, 278,
	279, 280, 282, 283, 285, 288, 289, 287, 291, 292,
	293, 294, 295, 296, 297, 298, 300, 301, 302, 303,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 317, 318, 320, 321, 322, 324, 325, 326, 327,
	328, 329, 330, 331, 333, 334, 335, 336, 337, 339,
	340, 342, 343, 345, 346, 348, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 360, 363, 364, 366,
	368, 369, 370, 371, 372, 378, 379, 381, 384, 385,
	386, 387, 388, 389, 390, 393, 394, 395, 396, 397,
	400, 401, 402, 403, 404, 408, 410, 411, 412, 413,
	416, 419, 420, 421, 422, 423, 424, 434, 435, 436,
	49, 50, 52, 53, 64, 65, 72, 109, 110, 144,
	148, 154, 168, 170, 193, 198, 199, 201, 216, 241,
	243, 246, 253, 255, 269, 273, 284, 286, 299, 323,
	341, 347, 361, 374, 375, 380, 382, 405, 406, 425,
	426, 427, 428, 429, 430, 431, 432, 433, -79, 453,
	-43, -34, -44, 156, -36, -37, -45, 220, 151, 259,
	-46, -67, 29, 124, -67, -67, 55, 454, 454, -8,
	-9, -14, -15, 446, -16, 444, 445, -60, 247, 437,
	-96, -70, 453, -72, -83, -4, 144, 37, 11, 263,
	-56, -71, -69, 383, 149, 252, 60, -80, 6, -100,
	12, 8, -105, -102, -103, 45, 51, 74, 80, 92,
	99, 160, 162, 178, 192, 204, 205, 207, 217, 219,
	242, 250, 270, 272, 319, 344, 367, 409, -9, 261,
	-79, 446, -55, 453, -78, -77, -15, 112, -35, -34,
	-42, -43, -45, 156, 298, 397, 245, 342, 208, -37,
	-36, -38, -15, 29, -30, 153, 244, -39, -41, -15,
	-16, -48, 257, -5, -6, -4, -5, -5, -24, -21,
	-15, -27, 456, 14, 73, 43, 444, 445, 446, 447,
	448, 449, 440, 441, 442, 18, 19, 20, -60, 35,
	266, 219, 437, 178, 344, 204, 205, 250, 38, 6,
	263, -15, -15, -15, -15, -15, -15, -4, 405, -4,
	-94, 451, 453, -52, -51, 455, 451, -73, -15, -32,
	152, 453, -27, 453, -55, 456, 454, 262, 208, 342,
	-40, -68, 453, -71, -29, 323, 324, -47, 251, 346,
	-49, -55, 456, 399, -25, 39, 120, -17, 161, -14,
	-108, -109, -106, -107, -102, 198, 199, 347, 50, 299,
	53, 6, -100, -97, -56, 374, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -15, 219, 178, 344, -15, 376, 252, 247, 383,
	149, 393, 124, -99, 6, -100, -101, -103, -104, 29,
	33, 34, 35, 36, 37, 38, 39, 42, 54, 60,
	61, 67, 73, 75, 84, 91, 96, 97, 98, 100,
	101, 102, 112, 114, 120, 124, 125, 131, 135, 139,
	149, 151, 156, 158, 161, 166, 169, 172, 183, 190,
	200, 202, 213, 214, 220, 224, 225, 247, 252, 259,
	261, 262, 266, 267, 281, 290, 304, 316, 332, 338,
	349, 362, 365, 373, 376, 377, 383, 391, 392, 398,
	399, 407, 414, 415, 417, 418, 454, -11, -95, 452,
	-15, -94, 5, -51, -54, 446, -99, -15, -75, -76,
	414, -88, 271, 453, 454, -81, 29, 124, 446, -82,
	-15, -58, -102, -17, -11, 454, -77, 397, -29, -15,
	228, 456, -21, -61, -62, 263, 11, -59, 444, 445,
	446, 447, 448, 449, 440, 441, 442, 18, 19, 20,
	-26, 438, -20, 415, -13, -19, -15, -110, -28, 453,
	-98, 455, 436, 137, -15, -15, 376, 137, -15, 252,
	383, 149, 393, 124, 161, -53, 456, 452, 452, 456,
	454, 452, 457, -74, -76, 131, -15, -87, -56, 453,
	415, -22, 456, -23, -81, -81, 454, 16, 17, -20,
	454, 262, 454, -55, -26, 453, 153, 212, -63, 169,
	-15, 456, 92, 242, 207, 38, 6, 451, -11, 455,
	-54, -15, -15, 137, 137, -15, -15, 137, 161, -15,
	-51, -15, -94, -15, 135, -15, 373, -89, -56, -15,
	454, -82, -22, -22, -15, -15, -63, 5, -66, 172,
	55, -13, 207, 207, -13, 6, 452, -71, 454, -54,
	-15, -15, 137, -15, -15, 452, -15, -90, 278, 454,
	454, 454, -66, 454, -85, 417, -15, -64, -65, -15,
	-13, -13, 399, 261, 452, -15, -22, 55, -85, -84,
	-86, -56, 456, 453, -15, -91, 297, 324, -11, 456,
	38, -65, -18, 6, 454, -92, -93, 49, 388, 95,
	-15, -92, -86, -87, 456, 454, -93, 285, 155, 323,
	285, 155, 6, 35, -93,
}
var yyDef = [...]int{

	0, -2, 1, 118, -2, -2, 144, 0, 142, 130,
	0, 0, -2, 0, 138, 138, 138, 0, 0, 127,
	268, 0, 141, 139, 0, 131, 193, 0, 277, 292,
	293, 294, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 404,
	405, 406, 407, 408, 409, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 422, 423, 424,
	425, 426, 427, 428, 429, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 457, 458, 459, 460, 461, 462, 463, 464,
	465, 466, 467, 468, 469, 470, 471, 472, 473, 474,
	475, 476, 477, 478, 479, 480, 481, 482, 483, 484,
	485, 486, 487, 488, 489, 490, 491, 492, 493, 494,
	495, 496, 497, 498, 499, 500, 501, 502, 503, 504,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 522, 523, 524,
	525, 526, 527, 528, 529, 530, 531, 532, 533, 534,
	535, 536, 537, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 600, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 613, 614,
	615, 616, 617, 618, 619, 620, 621, 622, 218, 0,
	202, 160, 157, 0, 199, 200, 161, 0, 0, 0,
	169, 0, 136, 137, 0, 0, 0, 120, 121, 135,
	267, 269, 273, 274, 31, 0, 0, 0, 0, 0,
	79, 80, 0, 82, 83, 84, 584, 0, 240, 455,
	252, 284, 285, 286, 287, 288, 251, 225, -2, -2,
	289, 290, 0, 282, 297, 623, 624, 625, 626, 627,
	628, 629, 630, 631, 632, 633, 634, 635, 636, 637,
	638, 639, 640, 641, 642, 643, 644, 645, 135, 0,
	219, 194, 195, 0, 0, 264, 262, 263, 124, 201,
	125, 159, 162, 0, 0, 164, 0, 166, 0, 197,
	198, 203, 207, 208, 212, 216, 217, 205, 0, 209,
	-2, 105, 0, 132, 126, 127, 133, 134, 145, 146,
	4, 102, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 70, 0, 272,
	0, 35, 36, 50, 53, 54, 0, -2, 612, 85,
	86, 0, 0, -2, 258, 0, 0, 0, 250, 177,
	0, 0, 102, 0, 0, 0, 266, 158, 0, 167,
	0, 210, 0, 291, 206, 214, 215, 163, 103, 0,
	168, 275, 0, 0, 7, 2, 3, 221, 0, 270,
	32, 19, 20, 21, 24, 25, 26, 27, 28, 29,
	30, 295, 296, 33, 12, 0, 37, 38, 39, 40,
	41, 42, -2, -2, -2, -2, -2, -2, 49, 51,
	52, -2, 0, 0, 0, -2, 0, 67, 0, 71,
	73, 75, 0, 271, 302, 303, 304, 305, 306, 646,
	647, 648, 649, 650, 651, 652, 653, 654, 655, 656,
	657, 658, 659, 660, 661, 662, 663, 664, 665, 666,
	667, 668, 669, 670, 671, 672, 673, 674, 675, 676,
	677, 678, 679, 680, 681, 682, 683, 684, 685, 686,
	687, 688, 689, 690, 691, 692, 693, 694, 695, 696,
	697, 698, 699, 700, 701, 702, 703, 704, 705, 706,
	707, 708, 709, 710, 711, 712, 713, 714, 715, 716,
	717, 718, 719, 720, 721, 722, 260, 0, 0, 115,
	106, 116, 0, 259, 254, 255, 281, 0, 249, 245,
	0, 92, 0, 0, 87, 144, 0, 0, 0, 108,
	110, 0, -2, 221, 0, 196, 265, 165, 0, 0,
	104, 0, 147, 7, 242, 0, 226, 227, 228, 229,
	230, 231, 232, 233, 234, 235, 236, 237, 238, 239,
	149, 0, 151, 0, 100, 101, 9, 16, 22, 0,
	13, 0, 0, 0, -2, -2, 0, 0, -2, 69,
	72, 74, 76, 0, 0, 81, 0, 113, 114, 0,
	241, 256, 0, 0, 246, 0, 0, 175, 176, 180,
	0, 0, 0, 143, 144, 144, 91, 0, 0, 151,
	140, 204, 211, 276, 148, 0, 5, 6, 156, 0,
	220, 0, 0, 0, 0, 0, 11, 0, 0, 0,
	14, 34, -2, 0, 0, -2, -2, 0, 0, -2,
	261, 107, 117, 0, 244, 248, 0, 182, 179, 0,
	88, 109, 0, 0, 111, 112, 156, 0, 171, 0,
	0, 95, 0, 0, 0, 10, 17, 0, 23, 15,
	-2, -2, 0, -2, -2, 257, 247, 144, 0, 224,
	89, 90, 171, 243, 128, 0, 155, 150, 152, 154,
	96, 97, 0, 0, 18, -2, 185, 0, 129, 170,
	172, 0, 0, 0, 99, 0, 0, 0, 181, 0,
	0, 153, 0, 93, 178, 183, 186, -2, 547, 352,
	0, 184, 173, 174, 0, 98, 0, 188, 189, 190,
	191, 192, 94, 0, 187,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 448, 3, 3,
	453, 454, 446, 444, 456, 445, 455, 447, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 457, 3,
	440, 442, 441, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 451, 3, 452, 449,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var yyTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 443, 57783, 450, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lookahead func() int
}

func (p *yyParserImpl) Lookahead() int {
	return p.lookahead()
}

func yyNewParser() yyParser {
	p := &yyParserImpl{
		lookahead: func() int { return -1 },
	}
	return p
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	var yyDollar []yySymType
	yyS := make([]yySymType, yyMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yychar := -1
	yytoken := -1 // yychar translated into internal numbering
	yyrcvr.lookahead = func() int { return yychar }
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yychar = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yychar < 0 {
		yychar, yytoken = yylex1(yylex, &yylval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yychar = -1
		yytoken = -1
		yyVAL = yylval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yychar < 0 {
			yychar, yytoken = yylex1(yylex, &yylval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yychar = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:343
		{
			yyVAL.sqlSelect = yyDollar[1].sqlSelect
			yylex.(*sqlLex).stmt = yyDollar[1].sqlSelect
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:349
		{
			yyVAL.str = "asc"
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:350
		{
			yyVAL.str = "desc"
		}
	case 4:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:351
		{
			yyVAL.str = ""
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:354
		{
			yyVAL.str = "first"
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:355
		{
			yyVAL.str = "last"
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:356
		{
			yyVAL.str = ""
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:365
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:369
		{
			yyVAL.expr = AliasedExpr{Expr: yyDollar[1].expr, Alias: yyDollar[3].str}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:373
		{
			yyVAL.expr = AliasedExpr{Expr: yyDollar[1].expr, Alias: yyDollar[2].str}
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:380
		{
			yyVAL.anyName = AnyName{yyDollar[1].str}
		}
	case 13:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:384
		{
			yyVAL.anyName = AnyName{yyDollar[1].str}
			yyVAL.anyName = append(yyVAL.anyName, yyDollar[2].anyName...)
		}
	case 14:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:391
		{
			yyVAL.anyName = AnyName{yyDollar[2].str}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:395
		{
			yyVAL.anyName = append(yyDollar[1].anyName, yyDollar[3].str)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:412
		{
			yyVAL.pgType = yyDollar[1].pgType
			yyVAL.pgType.ArrayBounds = yyDollar[2].optArrayBounds
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:434
		{
			yyVAL.optArrayBounds = append(yyDollar[1].optArrayBounds, "")
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:438
		{
			yyVAL.optArrayBounds = append(yyDollar[1].optArrayBounds, yyDollar[3].iconst)
		}
	case 19:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:442
		{
			yyVAL.optArrayBounds = nil
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:445
		{
			yyVAL.pgType = yyDollar[1].pgType
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:446
		{
			yyVAL.pgType = yyDollar[1].pgType
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:493
		{
			yyVAL.pgType = PgType{Name: yyDollar[1].str}
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:504
		{
			yyVAL.placeholder = yyDollar[2].fields
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:505
		{
			yyVAL.placeholder = nil
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:512
		{
			yyVAL.pgType = PgType{Name: "int"}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:516
		{
			yyVAL.pgType = PgType{Name: "integer"}
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:520
		{
			yyVAL.pgType = PgType{Name: "smallint"}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:524
		{
			yyVAL.pgType = PgType{Name: "bigint"}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:528
		{
			yyVAL.pgType = PgType{Name: "real"}
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:562
		{
			yyVAL.pgType = PgType{Name: "bool"}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:618
		{
			yyVAL.expr = TypecastExpr{Expr: yyDollar[1].expr, Typename: yyDollar[3].pgType}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:622
		{
			yyVAL.expr = CollateExpr{Expr: yyDollar[1].expr, Collation: yyDollar[3].anyName}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:626
		{
			yyVAL.expr = AtTimeZoneExpr{Expr: yyDollar[1].expr, TimeZone: yyDollar[5].expr}
		}
	case 35:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:639
		{
			yyVAL.expr = UnaryExpr{Operator: "+", Expr: yyDollar[2].expr}
		}
	case 36:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:643
		{
			yyVAL.expr = UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:647
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: "+", Right: yyDollar[3].expr}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:651
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: "-", Right: yyDollar[3].expr}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:655
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: "*", Right: yyDollar[3].expr}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:659
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: "/", Right: yyDollar[3].expr}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:663
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: "%", Right: yyDollar[3].expr}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:667
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: "^", Right: yyDollar[3].expr}
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:671
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: "<", Right: yyDollar[3].expr}
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:675
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: ">", Right: yyDollar[3].expr}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:679
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: "=", Right: yyDollar[3].expr}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:683
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: "<=", Right: yyDollar[3].expr}
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:687
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: ">=", Right: yyDollar[3].expr}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:691
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: "!=", Right: yyDollar[3].expr}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:695
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:699
		{
			yyVAL.expr = UnaryExpr{Operator: yyDollar[1].str, Expr: yyDollar[2].expr}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:706
		{
			yyVAL.expr = BooleanExpr{Left: yyDollar[1].expr, Operator: "and", Right: yyDollar[3].expr}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:710
		{
			yyVAL.expr = BooleanExpr{Left: yyDollar[1].expr, Operator: "or", Right: yyDollar[3].expr}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:714
		{
			yyVAL.expr = NotExpr{Expr: yyDollar[2].expr}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:718
		{
			yyVAL.expr = NotExpr{Expr: yyDollar[2].expr}
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:722
		{
			yyVAL.expr = TextOpWithEscapeExpr{Left: yyDollar[1].expr, Operator: "like", Right: yyDollar[3].expr}
		}
	case 56:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:726
		{
			yyVAL.expr = TextOpWithEscapeExpr{Left: yyDollar[1].expr, Operator: "like", Right: yyDollar[3].expr, Escape: yyDollar[5].expr}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:730
		{
			yyVAL.expr = TextOpWithEscapeExpr{Left: yyDollar[1].expr, Operator: "not like", Right: yyDollar[4].expr}
		}
	case 58:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:734
		{
			yyVAL.expr = TextOpWithEscapeExpr{Left: yyDollar[1].expr, Operator: "not like", Right: yyDollar[4].expr, Escape: yyDollar[6].expr}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:738
		{
			yyVAL.expr = TextOpWithEscapeExpr{Left: yyDollar[1].expr, Operator: "ilike", Right: yyDollar[3].expr}
		}
	case 60:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:742
		{
			yyVAL.expr = TextOpWithEscapeExpr{Left: yyDollar[1].expr, Operator: "ilike", Right: yyDollar[3].expr, Escape: yyDollar[5].expr}
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:746
		{
			yyVAL.expr = TextOpWithEscapeExpr{Left: yyDollar[1].expr, Operator: "not ilike", Right: yyDollar[4].expr}
		}
	case 62:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:750
		{
			yyVAL.expr = TextOpWithEscapeExpr{Left: yyDollar[1].expr, Operator: "not ilike", Right: yyDollar[4].expr, Escape: yyDollar[6].expr}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:755
		{
			yyVAL.expr = TextOpWithEscapeExpr{Left: yyDollar[1].expr, Operator: "similar to", Right: yyDollar[4].expr}
		}
	case 64:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:759
		{
			yyVAL.expr = TextOpWithEscapeExpr{Left: yyDollar[1].expr, Operator: "similar to", Right: yyDollar[4].expr, Escape: yyDollar[6].expr}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:763
		{
			yyVAL.expr = TextOpWithEscapeExpr{Left: yyDollar[1].expr, Operator: "not similar to", Right: yyDollar[5].expr}
		}
	case 66:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:767
		{
			yyVAL.expr = TextOpWithEscapeExpr{Left: yyDollar[1].expr, Operator: "not similar to", Right: yyDollar[5].expr, Escape: yyDollar[7].expr}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:780
		{
			yyVAL.expr = IsNullExpr{Expr: yyDollar[1].expr}
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:784
		{
			yyVAL.expr = IsNullExpr{Expr: yyDollar[1].expr}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:788
		{
			yyVAL.expr = IsNullExpr{Expr: yyDollar[1].expr, Not: true}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:792
		{
			yyVAL.expr = IsNullExpr{Expr: yyDollar[1].expr, Not: true}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:799
		{
			yyVAL.expr = IsBoolOpExpr{Expr: yyDollar[1].expr, Op: "true"}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:803
		{
			yyVAL.expr = IsBoolOpExpr{Expr: yyDollar[1].expr, Not: true, Op: "true"}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:807
		{
			yyVAL.expr = IsBoolOpExpr{Expr: yyDollar[1].expr, Op: "false"}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:811
		{
			yyVAL.expr = IsBoolOpExpr{Expr: yyDollar[1].expr, Not: true, Op: "false"}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:815
		{
			yyVAL.expr = IsBoolOpExpr{Expr: yyDollar[1].expr, Op: "unknown"}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:819
		{
			yyVAL.expr = IsBoolOpExpr{Expr: yyDollar[1].expr, Not: true, Op: "unknown"}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:823
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: "is distinct from", Right: yyDollar[5].expr}
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:827
		{
			yyVAL.expr = BinaryExpr{Left: yyDollar[1].expr, Operator: "is not distinct from", Right: yyDollar[6].expr}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:854
		{
			yyVAL.expr = yyDollar[1].columnRef
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:855
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:861
		{
			yyVAL.expr = ParenExpr{Expr: yyDollar[2].expr, Indirection: yyDollar[4].indirection}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:864
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:865
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:867
		{
			yyVAL.expr = yyDollar[1].sqlSelect
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:874
		{
			yyVAL.expr = ExistsExpr(*yyDollar[2].sqlSelect)
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:880
		{
			yyVAL.expr = ArrayConstructorExpr(yyDollar[2].arrayExpr)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:893
		{
			yyVAL.funcApplication = FuncApplication{Name: yyDollar[1].str}
		}
	case 88:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:897
		{
			yyVAL.funcApplication = FuncApplication{Name: yyDollar[1].str, Args: yyDollar[3].funcArgs, OrderClause: yyDollar[4].orderClause}
		}
	case 89:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:905
		{
			yyVAL.funcApplication = FuncApplication{Name: yyDollar[1].str, Args: yyDollar[4].funcArgs, OrderClause: yyDollar[5].orderClause}
		}
	case 90:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:909
		{
			yyVAL.funcApplication = FuncApplication{Name: yyDollar[1].str, Distinct: true, Args: yyDollar[4].funcArgs, OrderClause: yyDollar[5].orderClause}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:913
		{
			yyVAL.funcApplication = FuncApplication{Name: yyDollar[1].str, Star: true}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:929
		{
			yyVAL.expr = &FuncExpr{FuncApplication: yyDollar[1].funcApplication, FilterClause: yyDollar[2].filterClause, OverClause: yyDollar[3].overClause}
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:947
		{
			yyVAL.identifiers = []string{yyDollar[1].str}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:951
		{
			yyVAL.identifiers = append(yyDollar[1].identifiers, yyDollar[3].str)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:957
		{
			yyVAL.expr = JoinExpr{Left: yyDollar[1].expr, Join: ",", Right: yyDollar[3].expr}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:961
		{
			yyVAL.expr = JoinExpr{Left: yyDollar[1].expr, Join: "cross join", Right: yyDollar[4].expr}
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:965
		{
			yyVAL.expr = JoinExpr{Left: yyDollar[1].expr, Join: "natural join", Right: yyDollar[4].expr}
		}
	case 98:
		yyDollar = yyS[yypt-7 : yypt+1]
		//line sql.y:969
		{
			yyVAL.expr = JoinExpr{Left: yyDollar[1].expr, Join: "join", Right: yyDollar[3].expr, Using: yyDollar[6].identifiers}
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:973
		{
			yyVAL.expr = JoinExpr{Left: yyDollar[1].expr, Join: "join", Right: yyDollar[3].expr, On: yyDollar[5].expr}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:979
		{
			yyVAL.fromClause = &FromClause{Expr: yyDollar[2].expr}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:983
		{
			yyVAL.fromClause = &FromClause{Expr: yyDollar[2].expr}
		}
	case 102:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:986
		{
			yyVAL.fromClause = nil
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:990
		{
			yyVAL.str = "nowait"
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:991
		{
			yyVAL.str = "skip locked"
		}
	case 105:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:992
		{
			yyVAL.str = ""
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:997
		{
			yyVAL.fields = []Expr{yyDollar[1].expr}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1001
		{
			yyVAL.fields = append(yyDollar[1].fields, yyDollar[3].expr)
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1008
		{
			yyVAL.funcArgs = []FuncArg{yyDollar[1].funcArg}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1012
		{
			yyVAL.funcArgs = append(yyDollar[1].funcArgs, yyDollar[3].funcArg)
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1018
		{
			yyVAL.funcArg = FuncArg{Expr: yyDollar[1].expr}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1022
		{
			yyVAL.funcArg = FuncArg{Name: yyDollar[1].str, NameOp: ":=", Expr: yyDollar[3].expr}
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1026
		{
			yyVAL.funcArg = FuncArg{Name: yyDollar[1].str, NameOp: "=>", Expr: yyDollar[3].expr}
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1032
		{
			yyVAL.arrayExpr = ArrayExpr(yyDollar[2].fields)
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1036
		{
			yyVAL.arrayExpr = yyDollar[2].arrayExpr
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1040
		{
			yyVAL.arrayExpr = ArrayExpr{}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1046
		{
			yyVAL.arrayExpr = ArrayExpr{yyDollar[1].arrayExpr}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1050
		{
			yyVAL.arrayExpr = append(yyDollar[1].arrayExpr, yyDollar[3].arrayExpr)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1106
		{
			yyDollar[2].sqlSelect.ParenWrapped = true
			yyVAL.sqlSelect = yyDollar[2].sqlSelect
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1110
		{
			yyVAL.sqlSelect = yyDollar[2].sqlSelect
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1114
		{
			ss := &SelectStmt{}
			ss.SimpleSelect = *yyDollar[1].simpleSelect
			yyVAL.sqlSelect = ss
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1120
		{
			yyDollar[1].sqlSelect.OrderClause = yyDollar[2].orderClause
			yyVAL.sqlSelect = yyDollar[1].sqlSelect
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1125
		{
			yyDollar[1].sqlSelect.OrderClause = yyDollar[2].orderClause
			yyDollar[1].sqlSelect.LockingClause = yyDollar[3].lockingClause
			yyDollar[1].sqlSelect.LimitClause = yyDollar[4].limitClause
			yyVAL.sqlSelect = yyDollar[1].sqlSelect
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1132
		{
			yyDollar[1].sqlSelect.OrderClause = yyDollar[2].orderClause
			yyDollar[1].sqlSelect.LimitClause = yyDollar[3].limitClause
			yyDollar[1].sqlSelect.LockingClause = yyDollar[4].lockingClause
			yyVAL.sqlSelect = yyDollar[1].sqlSelect
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1141
		{
			ss := &SelectStmt{}
			ss.SimpleSelect = *yyDollar[1].simpleSelect
			yyVAL.sqlSelect = ss
		}
	case 128:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1175
		{
			ss := &SimpleSelect{}
			ss.TargetList = yyDollar[3].fields
			ss.FromClause = yyDollar[5].fromClause
			ss.WhereClause = yyDollar[6].whereClause
			ss.GroupByClause = yyDollar[7].groupByClause
			ss.HavingClause = yyDollar[8].expr
			ss.WindowClause = yyDollar[9].windowDefinitions
			yyVAL.simpleSelect = ss
		}
	case 129:
		yyDollar = yyS[yypt-9 : yypt+1]
		//line sql.y:1188
		{
			ss := &SimpleSelect{}
			ss.DistinctList = yyDollar[2].fields
			ss.TargetList = yyDollar[3].fields
			ss.FromClause = yyDollar[5].fromClause
			ss.WhereClause = yyDollar[6].whereClause
			ss.GroupByClause = yyDollar[7].groupByClause
			ss.HavingClause = yyDollar[8].expr
			ss.WindowClause = yyDollar[9].windowDefinitions
			yyVAL.simpleSelect = ss
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1200
		{
			ss := &SimpleSelect{}
			ss.ValuesClause = yyDollar[1].valuesClause
			yyVAL.simpleSelect = ss
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1206
		{
			ss := &SimpleSelect{}
			ss.Table = yyDollar[2].relationExpr
			yyVAL.simpleSelect = ss
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1212
		{
			ss := &SimpleSelect{}
			ss.LeftSelect = yyDollar[1].sqlSelect
			ss.SetOp = "union"
			ss.SetAll = yyDollar[3].boolean
			ss.RightSelect = yyDollar[4].sqlSelect
			yyVAL.simpleSelect = ss
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1221
		{
			ss := &SimpleSelect{}
			ss.LeftSelect = yyDollar[1].sqlSelect
			ss.SetOp = "intersect"
			ss.SetAll = yyDollar[3].boolean
			ss.RightSelect = yyDollar[4].sqlSelect
			yyVAL.simpleSelect = ss
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1230
		{
			ss := &SimpleSelect{}
			ss.LeftSelect = yyDollar[1].sqlSelect
			ss.SetOp = "except"
			ss.SetAll = yyDollar[3].boolean
			ss.RightSelect = yyDollar[4].sqlSelect
			yyVAL.simpleSelect = ss
		}
	case 135:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1254
		{
			yyVAL.placeholder = nil
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1259
		{
			yyVAL.boolean = true
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1260
		{
			yyVAL.boolean = false
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1261
		{
			yyVAL.boolean = false
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1266
		{
			yyVAL.fields = make([]Expr, 0)
		}
	case 140:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1267
		{
			yyVAL.fields = yyDollar[4].fields
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1270
		{
			yyVAL.placeholder = nil
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1271
		{
			yyVAL.placeholder = nil
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1274
		{
			yyVAL.orderClause = yyDollar[1].orderClause
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1275
		{
			yyVAL.orderClause = nil
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1278
		{
			yyVAL.orderClause = yyDollar[3].orderClause
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1282
		{
			yyVAL.orderClause = &OrderClause{Exprs: []OrderExpr{yyDollar[1].orderExpr}}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1286
		{
			yyDollar[1].orderClause.Exprs = append(yyDollar[1].orderClause.Exprs, yyDollar[3].orderExpr)
			yyVAL.orderClause = yyDollar[1].orderClause
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1294
		{
			yyVAL.orderExpr = OrderExpr{Expr: yyDollar[1].expr, Using: yyDollar[3].str, Nulls: yyDollar[4].str}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1298
		{
			yyVAL.orderExpr = OrderExpr{Expr: yyDollar[1].expr, Order: yyDollar[2].str, Nulls: yyDollar[3].str}
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1323
		{
			yyVAL.groupByClause = &GroupByClause{Exprs: yyDollar[3].fields}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1324
		{
			yyVAL.groupByClause = nil
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1328
		{
			yyVAL.fields = []Expr{yyDollar[1].expr}
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1332
		{
			yyVAL.fields = append(yyDollar[1].fields, yyDollar[3].expr)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1345
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1346
		{
			yyVAL.expr = nil
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1349
		{
			yyVAL.lockingClause = yyDollar[1].lockingClause
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1350
		{
			yyVAL.lockingClause = nil
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1353
		{
			yyVAL.lockingClause = yyDollar[1].lockingClause
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1354
		{
			yyVAL.lockingClause = nil
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1358
		{
			yyVAL.lockingClause = &LockingClause{Locks: []LockingItem{yyDollar[1].lockingItem}}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1362
		{
			yyDollar[1].lockingClause.Locks = append(yyDollar[1].lockingClause.Locks, yyDollar[2].lockingItem)
			yyVAL.lockingClause = yyDollar[1].lockingClause
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1369
		{
			yyVAL.lockingItem = LockingItem{Strength: yyDollar[1].str, LockedRels: yyDollar[2].identifiers, WaitPolicy: yyDollar[3].str}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1374
		{
			yyVAL.str = "update"
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1375
		{
			yyVAL.str = "no key update"
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1376
		{
			yyVAL.str = "share"
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1377
		{
			yyVAL.str = "key share"
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1380
		{
			yyVAL.identifiers = yyDollar[2].identifiers
		}
	case 169:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1381
		{
			yyVAL.identifiers = nil
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1389
		{
			yyVAL.windowDefinitions = yyDollar[2].windowDefinitions
		}
	case 171:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1392
		{
			yyVAL.windowDefinitions = nil
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1396
		{
			yyVAL.windowDefinitions = []WindowDefinition{yyDollar[1].windowDefinition}
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1400
		{
			yyVAL.windowDefinitions = append(yyDollar[1].windowDefinitions, yyDollar[3].windowDefinition)
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1406
		{
			yyVAL.windowDefinition = WindowDefinition{Name: yyDollar[1].str, Specification: yyDollar[3].windowSpecification}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1412
		{
			spec := yyDollar[2].windowSpecification
			yyVAL.overClause = &OverClause{Specification: &spec}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1417
		{
			yyVAL.overClause = &OverClause{Name: yyDollar[2].str}
		}
	case 177:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1420
		{
			yyVAL.overClause = nil
		}
	case 178:
		yyDollar = yyS[yypt-6 : yypt+1]
		//line sql.y:1424
		{
			yyVAL.windowSpecification = WindowSpecification{ExistingName: yyDollar[2].str, PartitionClause: yyDollar[3].partitionClause, OrderClause: yyDollar[4].orderClause, FrameClause: yyDollar[5].frameClause}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1439
		{
			yyVAL.str = yyDollar[1].str
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1440
		{
			yyVAL.str = ""
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1443
		{
			yyVAL.partitionClause = PartitionClause(yyDollar[3].fields)
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1444
		{
			yyVAL.partitionClause = nil
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1455
		{
			yyDollar[2].frameClause.Mode = "range"
			yyVAL.frameClause = yyDollar[2].frameClause
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1460
		{
			yyDollar[2].frameClause.Mode = "rows"
			yyVAL.frameClause = yyDollar[2].frameClause
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1465
		{
			yyVAL.frameClause = nil
		}
	case 186:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1471
		{
			yyVAL.frameClause = &FrameClause{Start: yyDollar[1].frameBound}
		}
	case 187:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1475
		{
			yyVAL.frameClause = &FrameClause{Start: yyDollar[2].frameBound, End: yyDollar[4].frameBound}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1486
		{
			yyVAL.frameBound = &FrameBound{Direction: "preceding"}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1490
		{
			yyVAL.frameBound = &FrameBound{Direction: "following"}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1494
		{
			yyVAL.frameBound = &FrameBound{CurrentRow: true}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1498
		{
			yyVAL.frameBound = &FrameBound{BoundExpr: yyDollar[1].expr, Direction: "preceding"}
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1502
		{
			yyVAL.frameBound = &FrameBound{BoundExpr: yyDollar[1].expr, Direction: "following"}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1510
		{
			yyVAL.relationExpr = &RelationExpr{Name: yyDollar[1].str}
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1514
		{
			yyVAL.relationExpr = &RelationExpr{Name: yyDollar[1].str, Star: true}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1518
		{
			yyVAL.relationExpr = &RelationExpr{Name: yyDollar[2].str, Only: true}
		}
	case 196:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1522
		{
			yyVAL.relationExpr = &RelationExpr{Name: yyDollar[3].str, Only: true}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1530
		{
			yyVAL.limitClause = &LimitClause{Limit: yyDollar[1].expr, Offset: yyDollar[2].expr}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1534
		{
			yyVAL.limitClause = &LimitClause{Limit: yyDollar[2].expr, Offset: yyDollar[1].expr}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1538
		{
			yyVAL.limitClause = &LimitClause{Limit: yyDollar[1].expr}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1542
		{
			yyVAL.limitClause = &LimitClause{Offset: yyDollar[1].expr}
		}
	case 202:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1549
		{
			yyVAL.limitClause = nil
		}
	case 203:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1553
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 204:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1558
		{
			yyVAL.expr = yyDollar[3].expr
		}
	case 205:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1564
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 206:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1569
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1574
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1576
		{
			yyVAL.expr = nil
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1581
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1590
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1591
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 212:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1592
		{
			yyVAL.expr = IntegerLiteral("1")
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1599
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1603
		{
			yyVAL.placeholder = 0
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1604
		{
			yyVAL.placeholder = 0
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1607
		{
			yyVAL.placeholder = 0
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1608
		{
			yyVAL.placeholder = 0
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1612
		{
			yyVAL.valuesClause = ValuesClause{yyDollar[2].valuesRow}
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1616
		{
			yyVAL.valuesClause = append(yyDollar[1].valuesClause, yyDollar[3].valuesRow)
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1633
		{
			yyVAL.whereClause = &WhereClause{Expr: yyDollar[2].expr}
		}
	case 221:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1634
		{
			yyVAL.whereClause = nil
		}
	case 222:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1643
		{
			panic("TODO")
		}
	case 223:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1644
		{
			yyVAL.placeholder = nil
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1649
		{
			yyVAL.filterClause = &FilterClause{Expr: yyDollar[4].expr}
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1652
		{
			yyVAL.filterClause = nil
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1656
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 227:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1657
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1660
		{
			yyVAL.str = "+"
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1661
		{
			yyVAL.str = "-"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1662
		{
			yyVAL.str = "*"
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1663
		{
			yyVAL.str = "/"
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1664
		{
			yyVAL.str = "%"
		}
	case 233:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1665
		{
			yyVAL.str = "^"
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1666
		{
			yyVAL.str = "<"
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1667
		{
			yyVAL.str = ">"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1668
		{
			yyVAL.str = "="
		}
	case 237:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1669
		{
			yyVAL.str = "<="
		}
	case 238:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1670
		{
			yyVAL.str = ">="
		}
	case 239:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1671
		{
			yyVAL.str = "<>"
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1674
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 241:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1675
		{
			yyVAL.str = yyDollar[3].str
		}
	case 242:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1678
		{
			yyVAL.str = string(yyDollar[1].str)
		}
	case 243:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1679
		{
			yyVAL.str = yyDollar[3].str
		}
	case 244:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1691
		{
			yyVAL.expr = CaseExpr{CaseArg: yyDollar[2].expr, WhenClauses: yyDollar[3].whenClauses, Default: yyDollar[4].expr}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1698
		{
			yyVAL.whenClauses = []WhenClause{yyDollar[1].whenClause}
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1702
		{
			yyVAL.whenClauses = append(yyDollar[1].whenClauses, yyDollar[2].whenClause)
		}
	case 247:
		yyDollar = yyS[yypt-4 : yypt+1]
		//line sql.y:1708
		{
			yyVAL.whenClause = WhenClause{When: yyDollar[2].expr, Then: yyDollar[4].expr}
		}
	case 248:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1713
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 249:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1714
		{
			yyVAL.expr = nil
		}
	case 250:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1717
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 251:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1718
		{
			yyVAL.expr = nil
		}
	case 252:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1722
		{
			yyVAL.columnRef = ColumnRef{Name: yyDollar[1].str}
		}
	case 253:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1726
		{
			yyVAL.columnRef = ColumnRef{Name: yyDollar[1].str, Indirection: yyDollar[2].indirection}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1734
		{
			yyVAL.indirectionEl = IndirectionEl{Name: yyDollar[2].str}
		}
	case 255:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1738
		{
			yyVAL.indirectionEl = IndirectionEl{Name: "*"}
		}
	case 256:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1742
		{
			yyVAL.indirectionEl = IndirectionEl{LowerSubscript: yyDollar[2].expr}
		}
	case 257:
		yyDollar = yyS[yypt-5 : yypt+1]
		//line sql.y:1746
		{
			yyVAL.indirectionEl = IndirectionEl{LowerSubscript: yyDollar[2].expr, UpperSubscript: yyDollar[4].expr}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1751
		{
			yyVAL.indirection = Indirection{yyDollar[1].indirectionEl}
		}
	case 259:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1752
		{
			yyVAL.indirection = append(yyDollar[1].indirection, yyDollar[2].indirectionEl)
		}
	case 260:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1755
		{
			yyVAL.indirection = nil
		}
	case 261:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1757
		{
			if yyDollar[1].indirection != nil {
				yyVAL.indirection = append(yyDollar[1].indirection, yyDollar[2].indirectionEl)
			} else {
				yyVAL.indirection = Indirection{yyDollar[2].indirectionEl}
			}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1773
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1774
		{
			yyVAL.expr = DefaultExpr(true)
		}
	case 264:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1778
		{
			yyVAL.valuesRow = ValuesRow{yyDollar[1].expr}
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1782
		{
			yyVAL.valuesRow = append(yyDollar[1].valuesRow, yyDollar[3].expr)
		}
	case 266:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1793
		{
			yyVAL.valuesRow = yyDollar[2].valuesRow
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1804
		{
			yyVAL.fields = yyDollar[1].fields
		}
	case 268:
		yyDollar = yyS[yypt-0 : yypt+1]
		//line sql.y:1805
		{
			yyVAL.fields = nil
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1808
		{
			yyVAL.fields = []Expr{yyDollar[1].expr}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1810
		{
			yyVAL.fields = append(yyDollar[1].fields, yyDollar[3].expr)
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1816
		{
			yyVAL.expr = AliasedExpr{Expr: yyDollar[1].expr, Alias: yyDollar[3].str}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1820
		{
			yyVAL.expr = AliasedExpr{Expr: yyDollar[1].expr, Alias: yyDollar[2].str}
		}
	case 274:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1825
		{
			yyVAL.expr = ColumnRef{Name: "*"}
		}
	case 275:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1839
		{
			yyVAL.identifiers = []string{yyDollar[1].str}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1843
		{
			yyVAL.identifiers = append(yyDollar[1].identifiers, yyDollar[3].str)
		}
	case 277:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1856
		{
			yyVAL.str = yyDollar[1].str
		}
	case 278:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1888
		{
			yyVAL.identifiers = []string{yyDollar[1].str}
		}
	case 279:
		yyDollar = yyS[yypt-3 : yypt+1]
		//line sql.y:1890
		{
			yyVAL.identifiers = append(yyDollar[1].identifiers, yyDollar[3].str)
		}
	case 280:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1895
		{
			yyVAL.str = yyDollar[1].str
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1898
		{
			yyVAL.str = yyDollar[1].str
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1911
		{
			yyVAL.str = yyDollar[1].str
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
		//line sql.y:1915
		{
			panic("TODO")
		}
	case 284:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1925
		{
			yyVAL.expr = yyDollar[1].iconst
		}
	case 285:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1932
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 286:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1945
		{
			yyVAL.expr = BoolLiteral(true)
		}
	case 287:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1949
		{
			yyVAL.expr = BoolLiteral(false)
		}
	case 288:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1953
		{
			yyVAL.expr = NullLiteral{}
		}
	case 289:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1957
		{
			yyVAL.iconst = IntegerLiteral(yyDollar[1].str)
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1958
		{
			yyVAL.expr = StringLiteral(yyDollar[1].str)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:1961
		{
			yyVAL.expr = yyDollar[1].iconst
		}
	case 302:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2004
		{
			yyVAL.str = yyDollar[1].str
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2005
		{
			yyVAL.str = yyDollar[1].str
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2006
		{
			yyVAL.str = yyDollar[1].str
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2007
		{
			yyVAL.str = yyDollar[1].str
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
		//line sql.y:2008
		{
			yyVAL.str = yyDollar[1].str
		}
	}
	goto yystack /* stack new state and value */
}

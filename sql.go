//line sql.y:2
package main

import __yyfmt__ "fmt"

//line sql.y:3
//line sql.y:7
type sqlSymType struct {
	yys             int
	sqlSelect       *SelectStmt
	simpleSelect    *SimpleSelect
	fields          []Expr
	expr            Expr
	str             string
	identifiers     []string
	fromClause      *FromClause
	whereClause     *WhereClause
	orderExpr       OrderExpr
	orderClause     *OrderClause
	groupByClause   *GroupByClause
	limitClause     *LimitClause
	lockingClause   *LockingClause
	lockingItem     LockingItem
	boolean         bool
	placeholder     interface{}
	qualifiedName   QualifiedName
	whenClauses     []WhenClause
	whenClause      WhenClause
	pgType          PgType
	valuesRow       ValuesRow
	valuesClause    ValuesClause
	funcApplication FuncApplication
	funcArgs        []FuncArg
	funcArg         FuncArg
}

const OP = 57346
const any_operator = 57347
const IDENT = 57348
const FCONST = 57349
const SCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ABORT_P = 57363
const ABSOLUTE_P = 57364
const ACCESS = 57365
const ACTION = 57366
const ADD_P = 57367
const ADMIN = 57368
const AFTER = 57369
const AGGREGATE = 57370
const ALL = 57371
const ALSO = 57372
const ALTER = 57373
const ALWAYS = 57374
const ANALYSE = 57375
const ANALYZE = 57376
const AND = 57377
const ANY = 57378
const ARRAY = 57379
const AS = 57380
const ASC = 57381
const ASSERTION = 57382
const ASSIGNMENT = 57383
const ASYMMETRIC = 57384
const AT = 57385
const ATTRIBUTE = 57386
const AUTHORIZATION = 57387
const BACKWARD = 57388
const BEFORE = 57389
const BEGIN_P = 57390
const BETWEEN = 57391
const BIGINT = 57392
const BINARY = 57393
const BIT = 57394
const BOOLEAN_P = 57395
const BOTH = 57396
const BY = 57397
const CACHE = 57398
const CALLED = 57399
const CASCADE = 57400
const CASCADED = 57401
const CASE = 57402
const CAST = 57403
const CATALOG_P = 57404
const CHAIN = 57405
const CHAR_P = 57406
const CHARACTER = 57407
const CHARACTERISTICS = 57408
const CHECK = 57409
const CHECKPOINT = 57410
const CLASS = 57411
const CLOSE = 57412
const CLUSTER = 57413
const COALESCE = 57414
const COLLATE = 57415
const COLLATION = 57416
const COLUMN = 57417
const COMMENT = 57418
const COMMENTS = 57419
const COMMIT = 57420
const COMMITTED = 57421
const CONCURRENTLY = 57422
const CONFIGURATION = 57423
const CONFLICT = 57424
const CONNECTION = 57425
const CONSTRAINT = 57426
const CONSTRAINTS = 57427
const CONTENT_P = 57428
const CONTINUE_P = 57429
const CONVERSION_P = 57430
const COPY = 57431
const COST = 57432
const CREATE = 57433
const CROSS = 57434
const CSV = 57435
const CUBE = 57436
const CURRENT_P = 57437
const CURRENT_CATALOG = 57438
const CURRENT_DATE = 57439
const CURRENT_ROLE = 57440
const CURRENT_SCHEMA = 57441
const CURRENT_TIME = 57442
const CURRENT_TIMESTAMP = 57443
const CURRENT_USER = 57444
const CURSOR = 57445
const CYCLE = 57446
const DATA_P = 57447
const DATABASE = 57448
const DAY_P = 57449
const DEALLOCATE = 57450
const DEC = 57451
const DECIMAL_P = 57452
const DECLARE = 57453
const DEFAULT = 57454
const DEFAULTS = 57455
const DEFERRABLE = 57456
const DEFERRED = 57457
const DEFINER = 57458
const DELETE_P = 57459
const DELIMITER = 57460
const DELIMITERS = 57461
const DESC = 57462
const DICTIONARY = 57463
const DISABLE_P = 57464
const DISCARD = 57465
const DISTINCT = 57466
const DO = 57467
const DOCUMENT_P = 57468
const DOMAIN_P = 57469
const DOUBLE_P = 57470
const DROP = 57471
const EACH = 57472
const ELSE = 57473
const ENABLE_P = 57474
const ENCODING = 57475
const ENCRYPTED = 57476
const END_P = 57477
const ENUM_P = 57478
const ESCAPE = 57479
const EVENT = 57480
const EXCEPT = 57481
const EXCLUDE = 57482
const EXCLUDING = 57483
const EXCLUSIVE = 57484
const EXECUTE = 57485
const EXISTS = 57486
const EXPLAIN = 57487
const EXTENSION = 57488
const EXTERNAL = 57489
const EXTRACT = 57490
const FALSE_P = 57491
const FAMILY = 57492
const FETCH = 57493
const FILTER = 57494
const FIRST_P = 57495
const FLOAT_P = 57496
const FOLLOWING = 57497
const FOR = 57498
const FORCE = 57499
const FOREIGN = 57500
const FORWARD = 57501
const FREEZE = 57502
const FROM = 57503
const FULL = 57504
const FUNCTION = 57505
const FUNCTIONS = 57506
const GLOBAL = 57507
const GRANT = 57508
const GRANTED = 57509
const GREATEST = 57510
const GROUP_P = 57511
const GROUPING = 57512
const HANDLER = 57513
const HAVING = 57514
const HEADER_P = 57515
const HOLD = 57516
const HOUR_P = 57517
const IDENTITY_P = 57518
const IF_P = 57519
const ILIKE = 57520
const IMMEDIATE = 57521
const IMMUTABLE = 57522
const IMPLICIT_P = 57523
const IMPORT_P = 57524
const IN_P = 57525
const INCLUDING = 57526
const INCREMENT = 57527
const INDEX = 57528
const INDEXES = 57529
const INHERIT = 57530
const INHERITS = 57531
const INITIALLY = 57532
const INLINE_P = 57533
const INNER_P = 57534
const INOUT = 57535
const INPUT_P = 57536
const INSENSITIVE = 57537
const INSERT = 57538
const INSTEAD = 57539
const INT_P = 57540
const INTEGER = 57541
const INTERSECT = 57542
const INTERVAL = 57543
const INTO = 57544
const INVOKER = 57545
const IS = 57546
const ISNULL = 57547
const ISOLATION = 57548
const JOIN = 57549
const KEY = 57550
const LABEL = 57551
const LANGUAGE = 57552
const LARGE_P = 57553
const LAST_P = 57554
const LATERAL_P = 57555
const LEADING = 57556
const LEAKPROOF = 57557
const LEAST = 57558
const LEFT = 57559
const LEVEL = 57560
const LIKE = 57561
const LIMIT = 57562
const LISTEN = 57563
const LOAD = 57564
const LOCAL = 57565
const LOCALTIME = 57566
const LOCALTIMESTAMP = 57567
const LOCATION = 57568
const LOCK_P = 57569
const LOCKED = 57570
const LOGGED = 57571
const MAPPING = 57572
const MATCH = 57573
const MATERIALIZED = 57574
const MAXVALUE = 57575
const MINUTE_P = 57576
const MINVALUE = 57577
const MODE = 57578
const MONTH_P = 57579
const MOVE = 57580
const NAME_P = 57581
const NAMES = 57582
const NATIONAL = 57583
const NATURAL = 57584
const NCHAR = 57585
const NEXT = 57586
const NO = 57587
const NONE = 57588
const NOT = 57589
const NOTHING = 57590
const NOTIFY = 57591
const NOTNULL = 57592
const NOWAIT = 57593
const NULL_P = 57594
const NULLIF = 57595
const NULLS_P = 57596
const NUMERIC = 57597
const OBJECT_P = 57598
const OF = 57599
const OFF = 57600
const OFFSET = 57601
const OIDS = 57602
const ON = 57603
const ONLY = 57604
const OPERATOR = 57605
const OPTION = 57606
const OPTIONS = 57607
const OR = 57608
const ORDER = 57609
const ORDINALITY = 57610
const OUT_P = 57611
const OUTER_P = 57612
const OVER = 57613
const OVERLAPS = 57614
const OVERLAY = 57615
const OWNED = 57616
const OWNER = 57617
const PARSER = 57618
const PARTIAL = 57619
const PARTITION = 57620
const PASSING = 57621
const PASSWORD = 57622
const PLACING = 57623
const PLANS = 57624
const POLICY = 57625
const POSITION = 57626
const PRECEDING = 57627
const PRECISION = 57628
const PRESERVE = 57629
const PREPARE = 57630
const PREPARED = 57631
const PRIMARY = 57632
const PRIOR = 57633
const PRIVILEGES = 57634
const PROCEDURAL = 57635
const PROCEDURE = 57636
const PROGRAM = 57637
const QUOTE = 57638
const RANGE = 57639
const READ = 57640
const REAL = 57641
const REASSIGN = 57642
const RECHECK = 57643
const RECURSIVE = 57644
const REF = 57645
const REFERENCES = 57646
const REFRESH = 57647
const REINDEX = 57648
const RELATIVE_P = 57649
const RELEASE = 57650
const RENAME = 57651
const REPEATABLE = 57652
const REPLACE = 57653
const REPLICA = 57654
const RESET = 57655
const RESTART = 57656
const RESTRICT = 57657
const RETURNING = 57658
const RETURNS = 57659
const REVOKE = 57660
const RIGHT = 57661
const ROLE = 57662
const ROLLBACK = 57663
const ROLLUP = 57664
const ROW = 57665
const ROWS = 57666
const RULE = 57667
const SAVEPOINT = 57668
const SCHEMA = 57669
const SCROLL = 57670
const SEARCH = 57671
const SECOND_P = 57672
const SECURITY = 57673
const SELECT = 57674
const SEQUENCE = 57675
const SEQUENCES = 57676
const SERIALIZABLE = 57677
const SERVER = 57678
const SESSION = 57679
const SESSION_USER = 57680
const SET = 57681
const SETS = 57682
const SETOF = 57683
const SHARE = 57684
const SHOW = 57685
const SIMILAR = 57686
const SIMPLE = 57687
const SKIP = 57688
const SMALLINT = 57689
const SNAPSHOT = 57690
const SOME = 57691
const SQL_P = 57692
const STABLE = 57693
const STANDALONE_P = 57694
const START = 57695
const STATEMENT = 57696
const STATISTICS = 57697
const STDIN = 57698
const STDOUT = 57699
const STORAGE = 57700
const STRICT_P = 57701
const STRIP_P = 57702
const SUBSTRING = 57703
const SYMMETRIC = 57704
const SYSID = 57705
const SYSTEM_P = 57706
const TABLE = 57707
const TABLES = 57708
const TABLESAMPLE = 57709
const TABLESPACE = 57710
const TEMP = 57711
const TEMPLATE = 57712
const TEMPORARY = 57713
const TEXT_P = 57714
const THEN = 57715
const TIME = 57716
const TIMESTAMP = 57717
const TO = 57718
const TRAILING = 57719
const TRANSACTION = 57720
const TRANSFORM = 57721
const TREAT = 57722
const TRIGGER = 57723
const TRIM = 57724
const TRUE_P = 57725
const TRUNCATE = 57726
const TRUSTED = 57727
const TYPE_P = 57728
const TYPES_P = 57729
const UNBOUNDED = 57730
const UNCOMMITTED = 57731
const UNENCRYPTED = 57732
const UNION = 57733
const UNIQUE = 57734
const UNKNOWN = 57735
const UNLISTEN = 57736
const UNLOGGED = 57737
const UNTIL = 57738
const UPDATE = 57739
const USER = 57740
const USING = 57741
const VACUUM = 57742
const VALID = 57743
const VALIDATE = 57744
const VALIDATOR = 57745
const VALUE_P = 57746
const VALUES = 57747
const VARCHAR = 57748
const VARIADIC = 57749
const VARYING = 57750
const VERBOSE = 57751
const VERSION_P = 57752
const VIEW = 57753
const VIEWS = 57754
const VOLATILE = 57755
const WHEN = 57756
const WHERE = 57757
const WHITESPACE_P = 57758
const WINDOW = 57759
const WITH = 57760
const WITHIN = 57761
const WITHOUT = 57762
const WORK = 57763
const WRAPPER = 57764
const WRITE = 57765
const XML_P = 57766
const XMLATTRIBUTES = 57767
const XMLCONCAT = 57768
const XMLELEMENT = 57769
const XMLEXISTS = 57770
const XMLFOREST = 57771
const XMLPARSE = 57772
const XMLPI = 57773
const XMLROOT = 57774
const XMLSERIALIZE = 57775
const YEAR_P = 57776
const YES_P = 57777
const ZONE = 57778
const NOT_LA = 57779
const NULLS_LA = 57780
const WITH_LA = 57781
const POSTFIXOP = 57782
const UMINUS = 57783

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"OP",
	"any_operator",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ABORT_P",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALL",
	"ALSO",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASSERTION",
	"ASSIGNMENT",
	"ASYMMETRIC",
	"AT",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"BETWEEN",
	"BIGINT",
	"BINARY",
	"BIT",
	"BOOLEAN_P",
	"BOTH",
	"BY",
	"CACHE",
	"CALLED",
	"CASCADE",
	"CASCADED",
	"CASE",
	"CAST",
	"CATALOG_P",
	"CHAIN",
	"CHAR_P",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFLICT",
	"CONNECTION",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COPY",
	"COST",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT_P",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CURSOR",
	"CYCLE",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DEC",
	"DECIMAL_P",
	"DECLARE",
	"DEFAULT",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DELETE_P",
	"DELIMITER",
	"DELIMITERS",
	"DESC",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOCUMENT_P",
	"DOMAIN_P",
	"DOUBLE_P",
	"DROP",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCODING",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"ESCAPE",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FALSE_P",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST_P",
	"FLOAT_P",
	"FOLLOWING",
	"FOR",
	"FORCE",
	"FOREIGN",
	"FORWARD",
	"FREEZE",
	"FROM",
	"FULL",
	"FUNCTION",
	"FUNCTIONS",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUP_P",
	"GROUPING",
	"HANDLER",
	"HAVING",
	"HEADER_P",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IF_P",
	"ILIKE",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"IN_P",
	"INCLUDING",
	"INCREMENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INNER_P",
	"INOUT",
	"INPUT_P",
	"INSENSITIVE",
	"INSERT",
	"INSTEAD",
	"INT_P",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVOKER",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LAST_P",
	"LATERAL_P",
	"LEADING",
	"LEAKPROOF",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LISTEN",
	"LOAD",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MATERIALIZED",
	"MAXVALUE",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NATIONAL",
	"NATURAL",
	"NCHAR",
	"NEXT",
	"NO",
	"NONE",
	"NOT",
	"NOTHING",
	"NOTIFY",
	"NOTNULL",
	"NOWAIT",
	"NULL_P",
	"NULLIF",
	"NULLS_P",
	"NUMERIC",
	"OBJECT_P",
	"OF",
	"OFF",
	"OFFSET",
	"OIDS",
	"ON",
	"ONLY",
	"OPERATOR",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT_P",
	"OUTER_P",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OWNER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSING",
	"PASSWORD",
	"PLACING",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRESERVE",
	"PREPARE",
	"PREPARED",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROGRAM",
	"QUOTE",
	"RANGE",
	"READ",
	"REAL",
	"REASSIGN",
	"RECHECK",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RESTRICT",
	"RETURNING",
	"RETURNS",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCROLL",
	"SEARCH",
	"SECOND_P",
	"SECURITY",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STORAGE",
	"STRICT_P",
	"STRIP_P",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSID",
	"SYSTEM_P",
	"TABLE",
	"TABLES",
	"TABLESAMPLE",
	"TABLESPACE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE_P",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"UPDATE",
	"USER",
	"USING",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VALUE_P",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"VERBOSE",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHEN",
	"WHERE",
	"WHITESPACE_P",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRAPPER",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"ZONE",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"','",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlMaxDepth = 200

//line sql.y:2267

// The parser expects the lexer to return 0 on EOF.  Give it a name
// for clarity.
const eof = 0

//line yacctab:1
var sqlExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 4,
	1, 108,
	-2, 116,
	-1, 5,
	1, 111,
	454, 111,
	-2, 115,
	-1, 11,
	1, 112,
	454, 112,
	-2, 131,
	-1, 71,
	16, 255,
	17, 255,
	453, 255,
	-2, 252,
	-1, 72,
	16, 256,
	17, 256,
	453, 256,
	-2, 253,
	-1, 446,
	323, 176,
	324, 176,
	-2, 29,
	-1, 493,
	139, 116,
	151, 116,
	156, 116,
	200, 116,
	220, 116,
	259, 116,
	267, 116,
	391, 116,
	-2, 82,
	-1, 496,
	453, 244,
	-2, 216,
	-1, 557,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 41,
	-1, 558,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 42,
	-1, 559,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 43,
	-1, 560,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 44,
	-1, 561,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 45,
	-1, 562,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 46,
	-1, 566,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 53,
	-1, 570,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 57,
	-1, 679,
	453, 243,
	-2, 8,
	-1, 721,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 55,
	-1, 722,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 59,
	-1, 725,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 61,
	-1, 769,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 54,
	-1, 772,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 63,
	-1, 773,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 58,
	-1, 776,
	204, 0,
	205, 0,
	250, 0,
	-2, 75,
	-1, 800,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 56,
	-1, 801,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 60,
	-1, 803,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 62,
	-1, 804,
	204, 0,
	205, 0,
	250, 0,
	-2, 76,
	-1, 819,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 64,
}

const sqlNprod = 683
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 5851

var sqlAct = [...]int{

	713, 813, 810, 790, 711, 756, 497, 676, 707, 522,
	664, 393, 709, 11, 681, 12, 73, 668, 455, 392,
	48, 48, 515, 421, 666, 47, 422, 532, 829, 16,
	828, 760, 822, 64, 438, 688, 445, 72, 798, 748,
	747, 747, 507, 456, 506, 527, 458, 23, 498, 766,
	718, 809, 487, 488, 489, 490, 491, 8, 807, 492,
	783, 743, 733, 44, 74, 43, 823, 753, 739, 738,
	500, 716, 53, 25, 495, 505, 503, 459, 65, 708,
	719, 502, 457, 781, 710, 736, 669, 434, 818, 577,
	684, 434, 723, 571, 730, 550, 510, 16, 568, 519,
	516, 517, 15, 749, 508, 62, 461, 34, 459, 35,
	418, 448, 29, 441, 575, 687, 509, 34, 693, 728,
	795, 474, 794, 14, 432, 704, 705, 706, 432, 754,
	10, 34, 778, 791, 775, 731, 460, 461, 757, 567,
	672, 429, 533, 29, 671, 38, 762, 21, 62, 50,
	459, 459, 792, 42, 459, 471, 472, 473, 31, 744,
	745, 46, 459, 14, 5, 30, 62, 460, 830, 459,
	32, 827, 475, 471, 472, 473, 33, 430, 7, 764,
	461, 761, 417, 461, 62, 446, 33, 459, 755, 435,
	475, 471, 472, 473, 520, 61, 4, 436, 461, 428,
	33, 26, 450, 18, 442, 450, 450, 797, 475, 460,
	460, 763, 573, 460, 459, 35, 461, 572, 741, 6,
	459, 433, 726, 27, 24, 433, 817, 789, 460, 427,
	16, 62, 536, 451, 459, 662, 451, 451, 62, 35,
	39, 459, 22, 461, 17, 3, 460, 535, 419, 461,
	425, 37, 538, 537, 493, 76, 583, 449, 717, 548,
	452, 453, 56, 461, 569, 60, 40, 41, 674, 70,
	461, 420, 479, 460, 667, 734, 431, 499, 59, 460,
	431, 57, 66, 512, 812, 691, 690, 694, 678, 732,
	496, 521, 447, 460, 518, 36, 28, 426, 444, 511,
	460, 443, 437, 424, 670, 501, 440, 715, 714, 529,
	454, 712, 826, 477, 19, 479, 20, 45, 9, 2,
	1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 479, 0, 0, 0, 0, 0, 0,
	0, 481, 482, 0, 0, 0, 0, 0, 574, 0,
	0, 479, 0, 727, 13, 0, 477, 486, 576, 481,
	482, 0, 0, 729, 802, 0, 0, 0, 669, 0,
	692, 0, 0, 0, 477, 0, 0, 481, 482, 0,
	0, 0, 0, 0, 0, 0, 0, 483, 0, 0,
	0, 0, 477, 0, 0, 759, 0, 0, 0, 62,
	486, 0, 459, 476, 0, 483, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 486, 0,
	0, 476, 0, 483, 0, 0, 0, 0, 0, 0,
	0, 461, 0, 0, 0, 0, 486, 0, 480, 476,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 48,
	0, 460, 0, 551, 552, 553, 554, 555, 556, 557,
	558, 559, 560, 561, 562, 563, 564, 565, 566, 539,
	570, 480, 523, 486, 534, 0, 525, 0, 0, 0,
	486, 0, 0, 0, 549, 474, 582, 547, 525, 480,
	504, 581, 0, 663, 677, 513, 682, 422, 0, 578,
	582, 474, 467, 0, 686, 581, 0, 480, 474, 514,
	0, 0, 580, 679, 0, 774, 0, 0, 456, 474,
	683, 478, 680, 0, 685, 0, 580, 0, 462, 463,
	464, 465, 466, 467, 0, 0, 689, 701, 702, 703,
	0, 695, 696, 697, 698, 699, 700, 0, 0, 0,
	474, 474, 474, 474, 474, 474, 0, 0, 721, 722,
	0, 0, 725, 474, 478, 0, 0, 468, 469, 470,
	0, 462, 463, 464, 465, 466, 467, 0, 0, 0,
	0, 820, 478, 0, 0, 468, 469, 470, 0, 462,
	463, 464, 465, 466, 467, 0, 0, 0, 0, 750,
	478, 0, 0, 468, 469, 470, 0, 462, 463, 464,
	465, 466, 467, 0, 474, 474, 474, 474, 474, 474,
	474, 474, 474, 474, 474, 474, 474, 474, 474, 474,
	0, 0, 0, 474, 462, 463, 464, 465, 466, 467,
	0, 486, 464, 465, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 462, 463, 464, 465, 466, 467,
	737, 462, 463, 464, 465, 466, 467, 0, 0, 0,
	0, 0, 0, 0, 0, 735, 0, 0, 742, 0,
	740, 0, 0, 746, 0, 0, 0, 0, 751, 752,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 758, 0, 0, 0, 0, 0, 682, 0, 0,
	768, 769, 523, 0, 772, 773, 525, 0, 0, 767,
	582, 765, 776, 0, 0, 581, 0, 779, 0, 777,
	0, 0, 677, 0, 0, 785, 786, 0, 788, 784,
	474, 0, 787, 782, 0, 474, 580, 0, 0, 474,
	0, 679, 0, 0, 793, 0, 0, 796, 0, 0,
	0, 800, 801, 0, 0, 803, 804, 799, 582, 0,
	0, 805, 806, 581, 0, 0, 474, 0, 0, 0,
	0, 808, 811, 814, 474, 474, 0, 0, 474, 815,
	816, 0, 0, 819, 580, 0, 0, 0, 0, 0,
	474, 821, 0, 0, 0, 0, 0, 0, 0, 824,
	0, 0, 0, 814, 825, 0, 0, 0, 0, 0,
	0, 474, 462, 463, 464, 465, 466, 467, 0, 0,
	0, 474, 474, 0, 0, 474, 474, 0, 0, 474,
	0, 0, 474, 0, 0, 0, 0, 0, 474, 474,
	0, 474, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 474, 474, 0, 474, 474, 474, 474,
	0, 0, 0, 579, 474, 0, 0, 474, 0, 0,
	0, 0, 474, 0, 0, 0, 0, 474, 77, 78,
	79, 80, 81, 82, 83, 84, 584, 85, 86, 87,
	585, 586, 587, 588, 589, 590, 591, 88, 89, 592,
	90, 91, 394, 92, 93, 94, 344, 345, 395, 346,
	347, 593, 95, 96, 97, 98, 99, 594, 595, 100,
	101, 348, 349, 102, 596, 103, 104, 105, 106, 350,
	597, 396, 598, 107, 108, 109, 110, 397, 111, 112,
	113, 599, 114, 115, 116, 117, 118, 119, 600, 398,
	120, 121, 122, 601, 602, 603, 399, 604, 605, 606,
	123, 124, 125, 126, 127, 128, 351, 352, 129, 607,
	130, 608, 131, 132, 133, 134, 135, 609, 136, 137,
	138, 610, 611, 139, 140, 141, 142, 143, 612, 144,
	145, 146, 613, 147, 148, 149, 614, 150, 151, 152,
	153, 353, 154, 155, 156, 354, 615, 157, 616, 158,
	159, 355, 160, 617, 161, 618, 162, 400, 619, 401,
	163, 164, 165, 620, 166, 356, 621, 357, 167, 622,
	168, 169, 170, 171, 172, 402, 173, 174, 175, 176,
	623, 177, 178, 179, 180, 181, 182, 624, 183, 403,
	358, 184, 185, 186, 187, 359, 360, 625, 361, 626,
	188, 404, 405, 189, 406, 190, 191, 192, 193, 194,
	627, 628, 195, 362, 407, 196, 408, 629, 197, 198,
	199, 630, 631, 200, 201, 202, 203, 204, 205, 206,
	207, 208, 209, 210, 211, 212, 213, 214, 363, 409,
	364, 215, 216, 365, 632, 217, 218, 410, 219, 633,
	366, 220, 367, 221, 222, 223, 634, 224, 635, 636,
	526, 225, 226, 637, 638, 227, 368, 411, 228, 412,
	369, 229, 230, 231, 232, 233, 234, 235, 639, 236,
	237, 370, 238, 371, 241, 239, 240, 640, 242, 243,
	244, 245, 246, 247, 248, 249, 372, 250, 251, 252,
	253, 641, 254, 255, 256, 257, 258, 259, 260, 261,
	262, 263, 264, 642, 265, 266, 413, 267, 268, 269,
	373, 270, 271, 272, 273, 274, 275, 276, 277, 643,
	278, 279, 280, 281, 282, 644, 283, 284, 374, 285,
	286, 414, 287, 288, 375, 289, 645, 290, 291, 292,
	293, 294, 295, 296, 297, 298, 299, 300, 376, 646,
	301, 302, 647, 303, 415, 304, 305, 306, 307, 308,
	648, 377, 378, 649, 650, 309, 310, 379, 311, 380,
	651, 312, 313, 314, 315, 316, 317, 318, 652, 653,
	319, 320, 321, 322, 323, 654, 655, 324, 325, 326,
	327, 328, 381, 382, 656, 329, 416, 330, 331, 332,
	333, 657, 658, 334, 659, 660, 335, 336, 337, 338,
	339, 340, 383, 384, 385, 386, 387, 388, 389, 390,
	391, 341, 342, 343, 579, 0, 0, 0, 0, 0,
	0, 0, 0, 665, 0, 0, 0, 0, 0, 77,
	78, 79, 80, 81, 82, 83, 84, 584, 85, 86,
	87, 585, 586, 587, 588, 589, 590, 591, 88, 89,
	592, 90, 91, 394, 92, 93, 94, 344, 345, 395,
	346, 347, 593, 95, 96, 97, 98, 99, 594, 595,
	100, 101, 348, 349, 102, 596, 103, 104, 105, 106,
	350, 597, 396, 598, 107, 108, 109, 110, 397, 111,
	112, 113, 599, 114, 115, 116, 117, 118, 119, 600,
	398, 120, 121, 122, 601, 602, 603, 399, 604, 605,
	606, 123, 124, 125, 126, 127, 128, 351, 352, 129,
	607, 130, 608, 131, 132, 133, 134, 135, 609, 136,
	137, 138, 610, 611, 139, 140, 141, 142, 143, 612,
	144, 145, 146, 613, 147, 148, 149, 614, 150, 151,
	152, 153, 353, 154, 155, 156, 354, 615, 157, 616,
	158, 159, 355, 160, 617, 161, 618, 162, 400, 619,
	401, 163, 164, 165, 620, 166, 356, 621, 357, 167,
	622, 168, 169, 170, 171, 172, 402, 173, 174, 175,
	176, 623, 177, 178, 179, 180, 181, 182, 624, 183,
	403, 358, 184, 185, 186, 187, 359, 360, 625, 361,
	626, 188, 404, 405, 189, 406, 190, 191, 192, 193,
	194, 627, 628, 195, 362, 407, 196, 408, 629, 197,
	198, 199, 630, 631, 200, 201, 202, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 363,
	409, 364, 215, 216, 365, 632, 217, 218, 410, 219,
	633, 366, 220, 367, 221, 222, 223, 634, 224, 635,
	636, 526, 225, 226, 637, 638, 227, 368, 411, 228,
	412, 369, 229, 230, 231, 232, 233, 234, 235, 639,
	236, 237, 370, 238, 371, 241, 239, 240, 640, 242,
	243, 244, 245, 246, 247, 248, 249, 372, 250, 251,
	252, 253, 641, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 642, 265, 266, 413, 267, 268,
	269, 373, 270, 271, 272, 273, 274, 275, 276, 277,
	643, 278, 279, 280, 281, 282, 644, 283, 284, 374,
	285, 286, 414, 287, 288, 375, 289, 645, 290, 291,
	292, 293, 294, 295, 296, 297, 298, 299, 300, 376,
	646, 301, 302, 647, 303, 415, 304, 305, 306, 307,
	308, 648, 377, 378, 649, 650, 309, 310, 379, 311,
	380, 651, 312, 313, 314, 315, 316, 317, 318, 652,
	653, 319, 320, 321, 322, 323, 654, 655, 324, 325,
	326, 327, 328, 381, 382, 656, 329, 416, 330, 331,
	332, 333, 657, 658, 334, 659, 660, 335, 336, 337,
	338, 339, 340, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 341, 342, 343, 71, 0, 75, 0, 0,
	62, 74, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 79, 80, 81, 82, 83, 84, 0, 85,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 88,
	89, 0, 90, 91, 394, 92, 93, 94, 344, 345,
	395, 346, 347, 0, 95, 96, 97, 98, 99, 69,
	0, 100, 101, 348, 349, 102, 0, 103, 104, 105,
	106, 350, 0, 396, 0, 107, 108, 109, 110, 397,
	111, 112, 113, 0, 114, 115, 116, 117, 118, 119,
	0, 398, 120, 121, 122, 0, 0, 0, 399, 0,
	0, 0, 123, 124, 125, 126, 127, 128, 351, 352,
	129, 0, 130, 0, 131, 132, 133, 134, 135, 0,
	136, 137, 138, 0, 0, 139, 140, 141, 142, 143,
	0, 144, 145, 146, 0, 147, 148, 149, 0, 150,
	151, 152, 153, 353, 154, 155, 156, 354, 68, 157,
	0, 158, 159, 355, 160, 0, 161, 0, 162, 400,
	0, 401, 163, 164, 165, 0, 166, 356, 0, 357,
	167, 0, 168, 169, 170, 171, 172, 402, 173, 174,
	175, 176, 0, 177, 178, 179, 180, 181, 182, 0,
	183, 403, 358, 184, 185, 186, 187, 359, 360, 0,
	361, 0, 188, 404, 405, 189, 406, 190, 191, 192,
	193, 194, 0, 0, 195, 362, 407, 196, 408, 0,
	197, 198, 199, 0, 0, 200, 201, 202, 203, 204,
	205, 206, 207, 208, 209, 210, 211, 212, 213, 214,
	363, 409, 364, 215, 216, 365, 54, 217, 218, 410,
	219, 0, 366, 220, 367, 221, 222, 223, 0, 224,
	0, 0, 63, 225, 226, 0, 0, 227, 368, 411,
	228, 412, 369, 229, 230, 231, 232, 233, 234, 235,
	0, 236, 237, 370, 238, 371, 241, 239, 240, 0,
	242, 243, 244, 245, 246, 247, 248, 249, 372, 250,
	251, 252, 253, 0, 254, 255, 256, 257, 258, 259,
	260, 261, 262, 263, 264, 0, 265, 266, 413, 267,
	268, 269, 373, 270, 271, 272, 273, 274, 275, 276,
	277, 0, 278, 279, 280, 281, 282, 0, 283, 284,
	374, 285, 286, 414, 287, 288, 375, 289, 0, 290,
	291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
	376, 0, 301, 302, 0, 303, 415, 304, 305, 306,
	307, 308, 0, 377, 378, 0, 0, 309, 310, 379,
	311, 380, 67, 312, 313, 314, 315, 316, 317, 318,
	0, 0, 319, 320, 321, 322, 323, 0, 0, 324,
	325, 326, 327, 328, 381, 382, 0, 329, 416, 330,
	331, 332, 333, 0, 0, 334, 0, 0, 335, 336,
	337, 338, 339, 340, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 341, 342, 343, 55, 0, 0, 0,
	0, 0, 0, 51, 52, 675, 0, 0, 0, 71,
	0, 75, 58, 673, 62, 74, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 79, 80, 81, 82,
	83, 84, 0, 85, 86, 87, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 0, 90, 91, 394, 92,
	93, 94, 344, 345, 395, 346, 347, 0, 95, 96,
	97, 98, 99, 69, 0, 100, 101, 348, 349, 102,
	0, 103, 104, 105, 106, 350, 0, 396, 0, 107,
	108, 109, 110, 397, 111, 112, 113, 0, 114, 115,
	116, 117, 118, 119, 0, 398, 120, 121, 122, 0,
	0, 0, 399, 0, 0, 0, 123, 124, 125, 126,
	127, 128, 351, 352, 129, 423, 130, 0, 131, 132,
	133, 134, 135, 0, 136, 137, 138, 0, 0, 139,
	140, 141, 142, 143, 0, 144, 145, 146, 0, 147,
	148, 149, 0, 150, 151, 152, 153, 353, 154, 155,
	156, 354, 68, 157, 0, 158, 159, 355, 160, 0,
	161, 0, 162, 400, 0, 401, 163, 164, 165, 0,
	166, 356, 0, 357, 167, 0, 168, 169, 170, 171,
	172, 402, 173, 174, 175, 176, 0, 177, 178, 179,
	180, 181, 182, 0, 183, 403, 358, 184, 185, 186,
	187, 359, 360, 0, 361, 0, 188, 404, 405, 189,
	406, 190, 191, 192, 193, 194, 0, 0, 195, 362,
	407, 196, 408, 0, 197, 198, 199, 0, 0, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 363, 409, 364, 215, 216, 365,
	54, 217, 218, 410, 219, 0, 366, 220, 367, 221,
	222, 223, 0, 224, 0, 0, 63, 225, 226, 0,
	0, 227, 368, 411, 228, 412, 369, 229, 230, 231,
	232, 233, 234, 235, 0, 236, 237, 370, 238, 371,
	241, 239, 240, 0, 242, 243, 244, 245, 246, 247,
	248, 249, 372, 250, 251, 252, 253, 0, 254, 255,
	256, 257, 258, 259, 260, 261, 262, 263, 264, 0,
	265, 266, 413, 267, 268, 269, 373, 270, 271, 272,
	273, 274, 275, 276, 277, 0, 278, 279, 280, 281,
	282, 0, 283, 284, 374, 285, 286, 414, 287, 288,
	375, 289, 0, 290, 291, 292, 293, 294, 295, 296,
	297, 298, 299, 300, 376, 0, 301, 302, 0, 303,
	415, 304, 305, 306, 307, 308, 0, 377, 378, 0,
	0, 309, 310, 379, 311, 380, 67, 312, 313, 314,
	315, 316, 317, 318, 0, 0, 319, 320, 321, 322,
	323, 0, 0, 324, 325, 326, 327, 328, 381, 382,
	0, 329, 416, 330, 331, 332, 333, 0, 0, 334,
	0, 0, 335, 336, 337, 338, 339, 340, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 341, 342, 343,
	55, 0, 0, 0, 71, 0, 75, 51, 52, 62,
	74, 0, 0, 0, 0, 0, 58, 0, 0, 77,
	78, 79, 80, 81, 82, 83, 84, 0, 85, 86,
	87, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	0, 90, 91, 394, 92, 93, 94, 344, 345, 395,
	346, 347, 0, 95, 96, 97, 98, 99, 69, 0,
	100, 101, 348, 349, 102, 0, 103, 104, 105, 106,
	350, 0, 396, 0, 107, 108, 109, 110, 397, 111,
	112, 113, 0, 114, 115, 116, 117, 118, 119, 0,
	398, 120, 121, 122, 0, 0, 0, 399, 0, 0,
	0, 123, 124, 125, 126, 127, 128, 351, 352, 129,
	0, 130, 0, 131, 132, 133, 134, 135, 0, 136,
	137, 138, 0, 0, 139, 140, 141, 142, 143, 0,
	144, 145, 146, 0, 147, 148, 149, 0, 150, 151,
	152, 153, 353, 154, 155, 156, 354, 68, 157, 0,
	158, 159, 355, 160, 0, 161, 0, 162, 400, 0,
	401, 163, 164, 165, 0, 166, 356, 0, 357, 167,
	0, 168, 169, 170, 171, 172, 402, 173, 174, 175,
	176, 0, 177, 178, 179, 180, 181, 182, 0, 183,
	403, 358, 184, 185, 186, 187, 359, 360, 0, 361,
	0, 188, 404, 405, 189, 406, 190, 191, 192, 193,
	194, 0, 0, 195, 362, 407, 196, 408, 0, 197,
	198, 199, 0, 0, 200, 201, 202, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 213, 214, 363,
	409, 364, 215, 216, 365, 54, 217, 218, 410, 219,
	0, 366, 220, 367, 221, 222, 223, 0, 224, 0,
	0, 63, 225, 226, 0, 0, 227, 368, 411, 228,
	412, 369, 229, 230, 231, 232, 233, 234, 235, 0,
	236, 237, 370, 238, 371, 241, 239, 240, 0, 242,
	243, 244, 245, 246, 247, 248, 249, 372, 250, 251,
	252, 253, 0, 254, 255, 256, 257, 258, 259, 260,
	261, 262, 263, 264, 0, 265, 266, 413, 267, 268,
	269, 373, 270, 271, 272, 273, 274, 275, 276, 277,
	0, 278, 279, 280, 281, 282, 0, 283, 284, 374,
	285, 286, 414, 287, 288, 375, 289, 0, 290, 291,
	292, 293, 294, 295, 296, 297, 298, 299, 300, 376,
	0, 301, 302, 0, 303, 415, 304, 305, 306, 307,
	308, 0, 377, 378, 0, 0, 309, 310, 379, 311,
	380, 67, 312, 313, 314, 315, 316, 317, 318, 0,
	0, 319, 320, 321, 322, 323, 0, 0, 324, 325,
	326, 327, 328, 381, 382, 0, 329, 416, 330, 331,
	332, 333, 0, 0, 334, 0, 0, 335, 336, 337,
	338, 339, 340, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 341, 342, 343, 55, 0, 0, 0, 0,
	0, 0, 51, 52, 49, 0, 0, 71, 0, 75,
	0, 58, 62, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 79, 80, 81, 82, 83, 84,
	0, 85, 86, 87, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 91, 394, 92, 93, 94,
	344, 345, 395, 346, 347, 0, 95, 96, 97, 98,
	99, 69, 0, 100, 101, 348, 349, 102, 0, 103,
	104, 105, 106, 350, 0, 396, 0, 107, 108, 109,
	110, 397, 111, 112, 113, 0, 114, 115, 116, 117,
	118, 119, 0, 398, 120, 121, 122, 0, 0, 0,
	399, 0, 0, 0, 123, 124, 125, 126, 127, 128,
	351, 352, 129, 0, 130, 0, 131, 132, 133, 134,
	135, 0, 136, 137, 138, 0, 0, 139, 140, 141,
	142, 143, 0, 144, 145, 146, 0, 147, 148, 149,
	0, 150, 151, 152, 153, 353, 154, 155, 156, 354,
	68, 157, 0, 158, 159, 355, 160, 0, 161, 0,
	162, 400, 0, 401, 163, 164, 165, 0, 166, 356,
	0, 357, 167, 0, 168, 169, 170, 171, 172, 402,
	173, 174, 175, 176, 0, 177, 178, 179, 180, 181,
	182, 0, 183, 403, 358, 184, 185, 186, 187, 359,
	360, 0, 361, 0, 188, 404, 405, 189, 406, 190,
	191, 192, 193, 194, 0, 0, 195, 362, 407, 196,
	408, 0, 197, 198, 199, 0, 0, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 363, 409, 364, 215, 216, 365, 54, 217,
	218, 410, 219, 0, 366, 220, 367, 221, 222, 223,
	0, 224, 0, 0, 63, 225, 226, 0, 0, 227,
	368, 411, 228, 412, 369, 229, 230, 231, 232, 233,
	234, 235, 0, 236, 237, 370, 238, 371, 241, 239,
	240, 0, 242, 243, 244, 245, 246, 247, 248, 249,
	372, 250, 251, 252, 253, 0, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 0, 265, 266,
	413, 267, 268, 269, 373, 270, 271, 272, 273, 274,
	275, 276, 277, 8, 278, 279, 280, 281, 282, 0,
	283, 284, 374, 285, 286, 414, 287, 288, 375, 289,
	0, 290, 291, 292, 293, 294, 295, 296, 297, 298,
	299, 300, 376, 0, 301, 302, 0, 303, 415, 304,
	305, 306, 307, 308, 0, 377, 378, 0, 0, 309,
	310, 379, 311, 380, 67, 312, 313, 314, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	0, 324, 325, 326, 327, 328, 494, 382, 0, 329,
	416, 330, 331, 332, 333, 0, 0, 334, 0, 0,
	335, 336, 337, 338, 339, 340, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 341, 342, 343, 55, 0,
	0, 0, 71, 0, 75, 51, 52, 62, 74, 0,
	0, 0, 0, 0, 58, 0, 0, 77, 78, 79,
	80, 81, 82, 83, 84, 439, 85, 86, 87, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 0, 90,
	91, 394, 92, 93, 94, 344, 345, 395, 346, 347,
	0, 95, 96, 97, 98, 99, 69, 0, 100, 101,
	348, 349, 102, 0, 103, 104, 105, 106, 350, 0,
	396, 0, 107, 108, 109, 110, 397, 111, 112, 113,
	0, 114, 115, 116, 117, 118, 119, 0, 398, 120,
	121, 122, 0, 0, 0, 399, 0, 0, 0, 123,
	124, 125, 126, 127, 128, 351, 352, 129, 0, 130,
	0, 131, 132, 133, 134, 135, 0, 136, 137, 138,
	0, 0, 139, 140, 141, 142, 143, 0, 144, 145,
	146, 0, 147, 148, 149, 0, 150, 151, 152, 153,
	353, 154, 155, 156, 354, 68, 157, 0, 158, 159,
	355, 160, 0, 161, 0, 162, 400, 0, 401, 163,
	164, 165, 0, 166, 356, 0, 357, 167, 0, 168,
	169, 170, 171, 172, 402, 173, 174, 175, 176, 0,
	177, 178, 179, 180, 181, 182, 0, 183, 403, 358,
	184, 185, 186, 187, 359, 360, 0, 361, 0, 188,
	404, 405, 189, 406, 190, 191, 192, 193, 194, 0,
	0, 195, 362, 407, 196, 408, 0, 197, 198, 199,
	0, 0, 200, 201, 202, 203, 204, 205, 206, 207,
	208, 209, 210, 211, 212, 213, 214, 363, 409, 364,
	215, 216, 365, 54, 217, 218, 410, 219, 0, 366,
	220, 367, 221, 222, 223, 0, 224, 0, 0, 63,
	225, 226, 0, 0, 227, 368, 411, 228, 412, 369,
	229, 230, 231, 232, 233, 234, 235, 0, 236, 237,
	370, 238, 371, 241, 239, 240, 0, 242, 243, 244,
	245, 246, 247, 248, 249, 372, 250, 251, 252, 253,
	0, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 0, 265, 266, 413, 267, 268, 269, 373,
	270, 271, 272, 273, 274, 275, 276, 277, 0, 278,
	279, 280, 281, 282, 0, 283, 284, 374, 285, 286,
	414, 287, 288, 375, 289, 0, 290, 291, 292, 293,
	294, 295, 296, 297, 298, 299, 300, 376, 0, 301,
	302, 0, 303, 415, 304, 305, 306, 307, 308, 0,
	377, 378, 0, 0, 309, 310, 379, 311, 380, 67,
	312, 313, 314, 315, 316, 317, 318, 0, 0, 319,
	320, 321, 322, 323, 0, 0, 324, 325, 326, 327,
	328, 381, 382, 0, 329, 416, 330, 331, 332, 333,
	0, 0, 334, 0, 0, 335, 336, 337, 338, 339,
	340, 383, 384, 385, 386, 387, 388, 389, 390, 391,
	341, 342, 343, 55, 0, 0, 0, 71, 0, 75,
	51, 52, 62, 74, 0, 0, 0, 0, 0, 58,
	0, 0, 77, 78, 79, 80, 81, 82, 83, 84,
	0, 85, 86, 87, 0, 0, 0, 0, 0, 0,
	0, 88, 89, 0, 90, 91, 394, 92, 93, 94,
	344, 345, 395, 346, 347, 0, 95, 96, 97, 98,
	99, 69, 0, 100, 101, 348, 349, 102, 0, 103,
	104, 105, 106, 350, 0, 396, 0, 107, 108, 109,
	110, 397, 111, 112, 113, 0, 114, 115, 116, 117,
	118, 119, 0, 398, 120, 121, 122, 0, 0, 0,
	399, 0, 0, 0, 123, 124, 125, 126, 127, 128,
	351, 352, 129, 0, 130, 0, 131, 132, 133, 134,
	135, 0, 136, 137, 138, 0, 0, 139, 140, 141,
	142, 143, 0, 144, 145, 146, 0, 147, 148, 149,
	0, 150, 151, 152, 153, 353, 154, 155, 156, 354,
	68, 157, 0, 158, 159, 355, 160, 0, 161, 0,
	162, 400, 0, 401, 163, 164, 165, 0, 166, 356,
	0, 357, 167, 0, 168, 169, 170, 171, 172, 402,
	173, 174, 175, 176, 0, 177, 178, 179, 180, 181,
	182, 0, 183, 403, 358, 184, 185, 186, 187, 359,
	360, 0, 361, 0, 188, 404, 405, 189, 406, 190,
	191, 192, 193, 194, 0, 0, 195, 362, 407, 196,
	408, 0, 197, 198, 199, 0, 0, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 210, 211, 212,
	213, 214, 363, 409, 364, 215, 216, 365, 54, 217,
	218, 410, 219, 0, 366, 220, 367, 221, 222, 223,
	0, 224, 0, 0, 63, 225, 226, 0, 0, 227,
	368, 411, 228, 412, 369, 229, 230, 231, 232, 233,
	234, 235, 0, 236, 237, 370, 238, 371, 241, 239,
	240, 0, 242, 243, 244, 245, 246, 247, 248, 249,
	372, 250, 251, 252, 253, 0, 254, 255, 256, 257,
	258, 259, 260, 261, 262, 263, 264, 0, 265, 266,
	413, 267, 268, 269, 373, 270, 271, 272, 273, 274,
	275, 276, 277, 0, 278, 279, 280, 281, 282, 0,
	283, 284, 374, 285, 286, 414, 287, 288, 375, 289,
	0, 290, 291, 292, 293, 294, 295, 296, 297, 298,
	299, 300, 376, 0, 301, 302, 0, 303, 415, 304,
	305, 306, 307, 308, 0, 377, 378, 0, 0, 309,
	310, 379, 311, 380, 67, 312, 313, 314, 315, 316,
	317, 318, 0, 0, 319, 320, 321, 322, 323, 0,
	0, 324, 325, 326, 327, 328, 381, 382, 0, 329,
	416, 330, 331, 332, 333, 0, 0, 334, 0, 0,
	335, 336, 337, 338, 339, 340, 383, 384, 385, 386,
	387, 388, 389, 390, 391, 341, 342, 343, 55, 0,
	524, 0, 0, 0, 0, 51, 52, 0, 0, 0,
	0, 0, 0, 0, 58, 77, 78, 79, 80, 81,
	82, 83, 84, 0, 85, 86, 87, 0, 0, 0,
	0, 0, 0, 0, 88, 89, 0, 90, 91, 0,
	92, 93, 94, 344, 345, 0, 346, 347, 0, 95,
	96, 97, 98, 99, 0, 0, 100, 101, 348, 349,
	102, 0, 103, 104, 105, 106, 350, 0, 0, 0,
	107, 108, 109, 110, 0, 111, 112, 113, 0, 114,
	115, 116, 117, 118, 119, 0, 0, 120, 121, 122,
	0, 0, 0, 0, 0, 0, 0, 123, 124, 125,
	126, 127, 128, 351, 352, 129, 0, 130, 0, 131,
	132, 133, 134, 135, 0, 136, 137, 138, 0, 0,
	139, 140, 141, 142, 143, 0, 144, 145, 146, 0,
	147, 148, 149, 0, 150, 151, 152, 153, 353, 154,
	155, 156, 354, 0, 157, 0, 158, 159, 355, 160,
	0, 161, 0, 162, 0, 0, 0, 163, 164, 165,
	0, 166, 356, 0, 357, 167, 0, 168, 169, 170,
	171, 172, 0, 173, 174, 175, 176, 0, 177, 178,
	179, 180, 181, 182, 0, 183, 0, 358, 184, 185,
	186, 187, 359, 360, 0, 361, 0, 188, 0, 0,
	189, 0, 190, 191, 192, 193, 194, 0, 0, 195,
	362, 0, 196, 0, 0, 197, 198, 199, 0, 0,
	200, 201, 202, 203, 204, 205, 206, 207, 208, 209,
	210, 211, 212, 213, 214, 363, 0, 364, 215, 216,
	365, 0, 217, 218, 0, 219, 0, 366, 220, 367,
	221, 222, 223, 0, 224, 0, 0, 526, 225, 226,
	0, 0, 227, 368, 0, 228, 0, 369, 229, 230,
	231, 232, 233, 234, 235, 0, 236, 237, 370, 238,
	371, 241, 239, 240, 0, 242, 243, 244, 245, 246,
	247, 248, 249, 372, 250, 251, 252, 253, 0, 254,
	255, 256, 257, 258, 259, 260, 261, 262, 263, 264,
	0, 265, 266, 0, 267, 268, 269, 373, 270, 271,
	272, 273, 274, 275, 276, 277, 0, 278, 279, 280,
	281, 282, 0, 283, 284, 374, 285, 286, 0, 287,
	288, 375, 289, 0, 290, 291, 292, 293, 294, 295,
	296, 297, 298, 299, 300, 376, 0, 301, 302, 0,
	303, 0, 304, 305, 306, 307, 308, 0, 377, 378,
	0, 0, 309, 310, 379, 311, 380, 0, 312, 313,
	314, 315, 316, 317, 318, 0, 0, 319, 320, 321,
	322, 323, 0, 0, 324, 325, 326, 327, 328, 381,
	382, 0, 329, 0, 330, 331, 332, 333, 0, 0,
	334, 0, 0, 335, 336, 337, 338, 339, 340, 383,
	384, 385, 386, 387, 388, 389, 390, 391, 341, 342,
	343, 546, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 79, 80,
	81, 82, 83, 84, 0, 85, 86, 87, 0, 0,
	0, 0, 0, 0, 0, 88, 89, 0, 90, 91,
	394, 92, 93, 94, 0, 543, 395, 0, 545, 0,
	95, 96, 97, 98, 99, 0, 0, 100, 101, 0,
	0, 102, 0, 103, 104, 105, 106, 0, 0, 396,
	0, 107, 108, 109, 110, 397, 111, 112, 113, 0,
	114, 115, 116, 117, 118, 119, 0, 398, 120, 121,
	122, 0, 0, 0, 399, 0, 0, 0, 123, 124,
	125, 126, 127, 128, 0, 0, 129, 0, 130, 0,
	131, 132, 133, 134, 135, 0, 136, 137, 138, 0,
	0, 139, 140, 141, 142, 143, 0, 144, 145, 146,
	0, 147, 148, 149, 0, 150, 151, 152, 153, 0,
	154, 155, 156, 0, 0, 157, 0, 158, 159, 0,
	160, 0, 161, 0, 162, 400, 0, 401, 163, 164,
	165, 0, 166, 0, 0, 0, 167, 0, 168, 169,
	170, 171, 172, 402, 173, 174, 175, 176, 0, 177,
	178, 179, 180, 181, 182, 0, 183, 403, 0, 184,
	185, 186, 187, 540, 541, 0, 0, 0, 188, 404,
	405, 189, 406, 190, 191, 192, 193, 194, 0, 0,
	195, 0, 407, 196, 408, 0, 197, 198, 199, 0,
	0, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 0, 409, 0, 215,
	216, 0, 0, 217, 218, 410, 219, 0, 0, 220,
	0, 221, 222, 223, 0, 224, 0, 0, 526, 225,
	226, 0, 0, 227, 0, 411, 228, 412, 0, 229,
	230, 231, 232, 233, 234, 235, 0, 236, 237, 0,
	238, 0, 241, 239, 240, 0, 242, 243, 244, 245,
	246, 247, 248, 249, 544, 250, 251, 252, 253, 0,
	254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
	264, 0, 265, 266, 413, 267, 268, 269, 0, 270,
	271, 272, 273, 274, 275, 276, 277, 0, 278, 279,
	280, 281, 282, 0, 283, 284, 0, 285, 286, 414,
	287, 288, 542, 289, 0, 290, 291, 292, 293, 294,
	295, 296, 297, 298, 299, 300, 0, 0, 301, 302,
	0, 303, 415, 304, 305, 306, 307, 308, 0, 0,
	0, 0, 0, 309, 310, 0, 311, 0, 0, 312,
	313, 314, 315, 316, 317, 318, 0, 0, 319, 320,
	321, 322, 323, 0, 0, 324, 325, 326, 327, 328,
	0, 0, 0, 329, 416, 330, 331, 332, 333, 0,
	0, 334, 0, 0, 335, 336, 337, 338, 339, 340,
	0, 0, 0, 0, 0, 62, 0, 0, 459, 341,
	342, 343, 471, 472, 473, 0, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 0, 459, 0, 0, 475,
	471, 472, 473, 0, 0, 0, 485, 461, 0, 0,
	0, 62, 0, 0, 459, 0, 0, 475, 471, 472,
	473, 530, 0, 0, 62, 461, 0, 459, 0, 0,
	62, 0, 0, 459, 0, 475, 0, 460, 484, 0,
	0, 0, 0, 461, 0, 62, 0, 0, 459, 0,
	0, 0, 471, 472, 473, 460, 461, 0, 0, 0,
	0, 0, 461, 0, 0, 0, 0, 62, 0, 475,
	459, 0, 0, 460, 471, 472, 473, 461, 0, 0,
	0, 0, 62, 0, 0, 459, 460, 0, 0, 0,
	0, 475, 460, 0, 0, 0, 0, 0, 0, 461,
	0, 62, 531, 0, 459, 0, 0, 460, 471, 472,
	473, 0, 0, 0, 461, 0, 0, 0, 0, 62,
	0, 0, 459, 0, 0, 475, 471, 472, 473, 460,
	0, 0, 0, 461, 0, 0, 0, 0, 0, 0,
	62, 0, 479, 459, 460, 0, 0, 471, 472, 473,
	771, 461, 0, 0, 0, 0, 770, 0, 0, 0,
	479, 0, 62, 460, 0, 459, 0, 0, 481, 482,
	0, 0, 461, 0, 0, 0, 0, 0, 479, 0,
	0, 460, 0, 477, 0, 0, 481, 482, 0, 0,
	0, 0, 0, 0, 461, 0, 0, 0, 0, 0,
	0, 477, 460, 0, 481, 482, 0, 0, 724, 0,
	0, 0, 479, 0, 483, 0, 0, 0, 0, 477,
	0, 0, 0, 0, 460, 0, 0, 486, 0, 0,
	476, 0, 483, 0, 479, 0, 0, 0, 481, 482,
	0, 0, 0, 0, 0, 486, 0, 0, 476, 0,
	483, 0, 0, 477, 0, 0, 0, 0, 0, 0,
	481, 482, 0, 486, 0, 0, 476, 0, 479, 0,
	0, 0, 0, 0, 0, 477, 486, 0, 0, 0,
	0, 0, 486, 0, 483, 0, 479, 0, 720, 0,
	0, 0, 0, 0, 481, 482, 0, 486, 0, 0,
	476, 0, 0, 0, 0, 0, 483, 479, 480, 477,
	0, 0, 481, 482, 0, 0, 0, 0, 0, 486,
	0, 0, 476, 0, 0, 0, 480, 477, 0, 0,
	0, 0, 0, 0, 486, 0, 0, 0, 0, 0,
	483, 0, 0, 0, 480, 0, 0, 0, 477, 0,
	0, 0, 0, 486, 0, 0, 0, 0, 483, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 486, 0, 0, 0, 0, 0, 0, 480, 0,
	0, 528, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 486, 0, 0, 0, 0, 0, 0, 0,
	480, 478, 0, 0, 468, 469, 470, 780, 462, 463,
	464, 465, 466, 467, 486, 0, 0, 0, 661, 478,
	0, 0, 468, 469, 470, 0, 462, 463, 464, 465,
	466, 467, 0, 0, 480, 0, 0, 478, 0, 0,
	468, 469, 470, 0, 462, 463, 464, 465, 466, 467,
	0, 0, 480, 0, 0, 0, 0, 462, 463, 464,
	465, 466, 467, 462, 463, 464, 465, 466, 467, 0,
	0, 478, 0, 480, 468, 469, 470, 0, 462, 463,
	464, 465, 466, 467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 478, 0, 0, 468, 469, 470, 0,
	462, 463, 464, 465, 466, 467, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 462, 463, 464, 465, 466,
	467, 0, 0, 0, 0, 0, 0, 478, 0, 0,
	468, 469, 470, 0, 462, 463, 464, 465, 466, 467,
	0, 0, 0, 0, 0, 478, 0, 0, 468, 469,
	470, 0, 462, 463, 464, 465, 466, 467, 0, 0,
	0, 0, 0, 0, 0, 0, 478, 0, 0, 468,
	469, 470, 0, 462, 463, 464, 465, 466, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 462, 463, 464, 465, 466,
	467,
}
var sqlPact = [...]int{

	-275, -1000, -1000, -1000, -1000, -1000, -37, -275, 118, -409,
	-380, -1000, -44, 116, 116, 116, 98, -389, -391, 2618,
	2618, -1000, -151, -380, -1000, 2183, -20, -13, -15, -121,
	-150, -34, -1000, 3496, -40, 3931, -146, -275, -1000, -1000,
	-275, -275, 3931, -1000, -1000, -1000, -410, -1000, 5250, -1000,
	-1000, 3931, 3931, 3931, 3931, 3931, -1000, -1000, 3061, -1000,
	-1000, -1000, -1000, -379, -407, -1000, -1000, -1000, -1000, 3931,
	-338, -1000, -1000, -1000, -1000, -1000, -377, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -410, -378, -1000,
	-412, -1000, 5306, -1000, -1000, -1000, -1000, -1000, -1000, -117,
	-158, -1000, -92, -1000, -246, -1000, -1000, -1000, 5306, -1000,
	52, -1000, -1000, -1000, -223, 5306, -1000, -152, 4364, -77,
	-1000, -1000, -1000, -77, -411, -1000, 5232, -19, 2618, 4795,
	4364, -279, 3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931,
	3931, 3931, 3931, 3931, 3931, 3931, 3931, 3931, -80, 3931,
	-283, -35, -1000, -1000, 1308, -1000, -379, 148, 148, 200,
	5358, 5358, 5214, -391, -380, 230, -407, -1000, 877, -328,
	5306, -8, -29, 1739, -19, 3931, 2183, -1000, -1000, -307,
	-1000, -223, -1000, 3931, -1000, -1000, -1000, -1000, -1000, -1000,
	-113, -421, -1000, -1000, -1000, -1000, -1000, 3931, 107, -359,
	-1000, -1000, -331, 3931, -1000, -1000, -1000, -1000, -1000, -382,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -405,
	-356, 206, 206, 63, 63, 63, 140, 94, 94, 94,
	94, 94, 94, 200, 5358, 5340, 5401, 3931, 3931, -284,
	5321, 3931, -1000, -30, -1000, -1000, -1000, -26, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -392, -1000, -1000, -1000, -1000, -46, -1000, 3931,
	-1000, -384, -385, -1000, -238, -393, -1000, 5306, 143, -1000,
	-331, -415, 5306, -1000, -1000, -159, 155, -1000, 4364, -1000,
	-359, -1000, -386, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -24, -31,
	3931, -61, -1000, 173, -1000, -1000, 3931, -406, 1308, 3931,
	3931, 5269, 5263, 3931, 3931, 388, -1000, -1000, -1000, -1000,
	-27, 3931, -407, -1000, -3, -1000, 3931, 5284, -332, -170,
	-394, 3931, -1000, -1000, 3931, 3931, -31, 3931, -1000, -1000,
	-1000, -1000, -1000, 222, -1000, -1000, -39, 97, 5306, 3931,
	-85, -87, 3931, 201, -1000, -416, 1308, -1000, 136, 220,
	3931, 3931, 227, 220, 3931, 3931, 5379, -1000, -1000, 5306,
	3931, 3931, -396, -1000, -1000, 5306, 5306, -39, 5306, -403,
	-1000, 3931, 3931, -1000, 3931, 3931, -173, -1000, -1000, -1000,
	220, 220, 3931, 220, 5379, 5306, 137, -1000, -1000, -1000,
	-1000, 5306, -424, -1000, 5306, -1000, -1000, -387, 3931, 220,
	-1000, -1000, 3931, 165, 5306, -1000, -426, -1000, 162, -1000,
	-1000,
}
var sqlPgo = [...]int{

	0, 320, 319, 244, 195, 219, 164, 318, 317, 161,
	316, 14, 314, 4, 25, 0, 149, 27, 312, 311,
	12, 18, 15, 13, 310, 309, 8, 82, 2, 309,
	308, 307, 22, 306, 305, 304, 223, 303, 165, 158,
	302, 301, 299, 298, 297, 201, 296, 170, 295, 294,
	292, 291, 290, 289, 289, 6, 10, 9, 33, 289,
	288, 287, 72, 286, 285, 5, 284, 1, 3, 251,
	78, 283, 282, 281, 278, 277, 275, 274, 17, 23,
	271, 224, 269, 268, 7, 265, 262, 259, 258, 24,
	37, 16, 19, 11, 256, 255, 253, 252, 247, 232,
	232,
}
var sqlR1 = [...]int{

	0, 1, 25, 25, 25, 26, 26, 26, 60, 13,
	13, 13, 87, 87, 88, 88, 98, 30, 99, 99,
	96, 31, 31, 97, 97, 97, 97, 97, 97, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 16, 16, 16,
	16, 16, 16, 82, 82, 82, 85, 18, 18, 19,
	19, 19, 19, 19, 17, 17, 17, 49, 49, 49,
	11, 11, 83, 83, 84, 84, 84, 2, 2, 4,
	4, 3, 3, 3, 3, 5, 5, 6, 6, 6,
	6, 6, 6, 27, 69, 69, 69, 10, 10, 12,
	12, 22, 22, 23, 24, 24, 21, 21, 65, 65,
	66, 66, 67, 68, 68, 45, 45, 44, 44, 46,
	46, 47, 48, 48, 48, 48, 50, 50, 28, 29,
	36, 36, 36, 36, 37, 37, 38, 38, 39, 39,
	40, 40, 41, 42, 42, 42, 43, 32, 32, 33,
	33, 7, 7, 20, 20, 34, 34, 35, 35, 64,
	64, 61, 61, 61, 61, 61, 61, 61, 61, 61,
	61, 61, 61, 62, 62, 63, 63, 74, 77, 77,
	78, 76, 76, 75, 75, 86, 86, 55, 55, 52,
	52, 53, 53, 79, 79, 80, 80, 81, 8, 8,
	9, 9, 14, 14, 14, 14, 51, 51, 57, 54,
	54, 59, 56, 95, 95, 73, 73, 73, 73, 70,
	72, 71, 58, 58, 58, 92, 92, 92, 100, 100,
	100, 100, 89, 89, 89, 89, 89, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
	90, 90, 90, 90, 90, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
	91, 91, 91, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 93, 93, 93, 93,
	93, 93, 93, 93, 93, 93, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94, 94, 94, 94, 94, 94, 94, 94,
	94, 94, 94,
}
var sqlR2 = [...]int{

	0, 1, 1, 1, 0, 2, 2, 0, 1, 1,
	3, 2, 1, 2, 2, 3, 2, 0, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 5, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 2, 4, 2, 3,
	4, 3, 4, 3, 4, 5, 6, 1, 1, 4,
	1, 1, 1, 3, 5, 4, 3, 1, 3, 3,
	4, 4, 7, 5, 2, 2, 0, 1, 2, 0,
	1, 3, 1, 3, 1, 3, 3, 1, 1, 3,
	3, 1, 2, 4, 4, 1, 1, 9, 9, 1,
	4, 4, 4, 0, 1, 1, 0, 1, 5, 1,
	0, 1, 0, 3, 1, 3, 4, 3, 3, 0,
	1, 3, 1, 2, 0, 1, 3, 1, 0, 1,
	2, 3, 2, 4, 2, 3, 2, 0, 0, 0,
	2, 2, 1, 1, 1, 0, 2, 5, 2, 3,
	1, 1, 1, 1, 3, 0, 1, 1, 1, 1,
	1, 2, 3, 2, 0, 5, 0, 5, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 1, 4, 5, 1, 2,
	4, 2, 0, 1, 0, 1, 2, 2, 2, 1,
	2, 0, 2, 1, 1, 1, 3, 3, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 1,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -6, -5, 453, 332, -7,
	405, -23, -22, 391, 200, 139, 267, -3, -4, -12,
	-10, 29, 124, 456, -81, 453, -45, -36, -46, 156,
	-38, -39, -47, 220, 151, 259, -48, -69, 29, 124,
	-69, -69, 55, 454, 454, -8, -9, -14, -15, 446,
	-16, 444, 445, -62, 247, 437, -86, -73, 453, -74,
	-85, -4, 11, 263, -58, -70, -72, 383, 149, 60,
	-82, 6, -90, -91, 12, 8, -95, 21, 22, 23,
	24, 25, 26, 27, 28, 30, 31, 32, 40, 41,
	43, 44, 46, 47, 48, 55, 56, 57, 58, 59,
	62, 63, 66, 68, 69, 70, 71, 76, 77, 78,
	79, 81, 82, 83, 85, 86, 87, 88, 89, 90,
	93, 94, 95, 103, 104, 105, 106, 107, 108, 111,
	113, 115, 116, 117, 118, 119, 121, 122, 123, 126,
	127, 128, 129, 130, 132, 133, 134, 136, 137, 138,
	140, 141, 142, 143, 145, 146, 147, 150, 152, 153,
	155, 157, 159, 163, 164, 165, 167, 171, 173, 174,
	175, 176, 177, 179, 180, 181, 182, 184, 185, 186,
	187, 188, 189, 191, 194, 195, 196, 197, 203, 206,
	208, 209, 210, 211, 212, 215, 218, 221, 222, 223,
	226, 227, 228, 229, 230, 231, 232, 233, 234, 235,
	236, 237, 238, 239, 240, 244, 245, 248, 249, 251,
	254, 256, 257, 258, 260, 264, 265, 268, 271, 274,
	275, 276, 277, 278, 279, 280, 282, 283, 285, 288,
	289, 287, 291, 292, 293, 294, 295, 296, 297, 298,
	300, 301, 302, 303, 305, 306, 307, 308, 309, 310,
	311, 312, 313, 314, 315, 317, 318, 320, 321, 322,
	324, 325, 326, 327, 328, 329, 330, 331, 333, 334,
	335, 336, 337, 339, 340, 342, 343, 345, 346, 348,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	360, 363, 364, 366, 368, 369, 370, 371, 372, 378,
	379, 381, 384, 385, 386, 387, 388, 389, 390, 393,
	394, 395, 396, 397, 400, 401, 402, 403, 404, 408,
	410, 411, 412, 413, 416, 419, 420, 421, 422, 423,
	424, 434, 435, 436, 49, 50, 52, 53, 64, 65,
	72, 109, 110, 144, 148, 154, 168, 170, 193, 198,
	199, 201, 216, 241, 243, 246, 253, 255, 269, 273,
	284, 286, 299, 323, 341, 347, 361, 374, 375, 380,
	382, 405, 406, 425, 426, 427, 428, 429, 430, 431,
	432, 433, -92, -93, 45, 51, 74, 80, 92, 99,
	160, 162, 178, 192, 204, 205, 207, 217, 219, 242,
	250, 270, 272, 319, 344, 367, 409, -9, 261, -81,
	-80, -79, -15, 112, -37, -36, -44, -45, -47, 156,
	298, 397, 245, 342, 208, -39, -38, -40, -15, 29,
	-33, 153, 244, -41, -43, -15, -16, -50, 257, -5,
	-6, -4, -5, -5, -24, -21, -15, -27, 456, 14,
	73, 43, 444, 445, 446, 447, 448, 449, 440, 441,
	442, 18, 19, 20, -62, 35, 266, 219, 437, 178,
	344, 204, 205, 250, 38, 6, 263, -15, -15, -15,
	-15, -15, -15, -4, 405, 453, -52, -55, 455, -75,
	-15, -34, 419, 453, -27, 453, 456, 454, 262, 208,
	342, -42, -71, 453, -70, -32, 323, 324, -49, 251,
	346, -51, -57, -58, 6, -90, 263, 456, 399, -25,
	39, 120, -17, 161, -14, -98, -99, -96, -97, -92,
	198, 199, 347, 50, 299, 53, 6, -90, -87, -58,
	374, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, 219, 178, 344,
	-15, 376, 252, 247, 383, 149, 393, 124, -89, 6,
	-90, -91, -93, -94, 29, 33, 34, 35, 36, 37,
	38, 39, 42, 54, 60, 61, 67, 73, 75, 84,
	91, 96, 97, 98, 100, 101, 102, 112, 114, 120,
	124, 125, 131, 135, 139, 149, 151, 156, 158, 161,
	166, 169, 172, 183, 190, 200, 202, 213, 214, 220,
	224, 225, 247, 252, 259, 261, 262, 266, 267, 281,
	290, 304, 316, 332, 338, 349, 362, 365, 373, 376,
	377, 383, 391, 392, 398, 399, 407, 414, 415, 417,
	418, 454, 5, -55, -56, 446, -89, -77, -78, 414,
	-35, 152, 169, 454, -83, 446, -84, -15, -60, -92,
	-17, -11, -15, -79, 397, -32, -15, 228, 456, -21,
	-63, -64, 263, 11, -61, 444, 445, 446, 447, 448,
	449, 440, 441, 442, 18, 19, 20, -26, 438, -20,
	415, -13, -19, -15, -30, -31, 453, -88, 455, 436,
	137, -15, -15, 376, 137, -15, 252, 383, 149, 393,
	124, 161, -53, 454, -76, -78, 131, -15, 453, 453,
	-22, 456, -23, 454, 16, 17, -20, 456, 454, 262,
	454, -57, -26, 453, 153, 212, -65, 169, -15, 456,
	92, 242, 207, 38, 6, -11, 455, -56, -15, -15,
	137, 137, -15, -15, 137, 161, -15, -55, 135, -15,
	373, 415, -23, 454, -84, -15, -15, -65, -15, 5,
	-68, 172, 55, -13, 207, 207, -13, 6, 454, -56,
	-15, -15, 137, -15, -15, -15, -15, 454, -68, 454,
	-28, -15, -66, -67, -15, -13, -13, 399, 261, -15,
	454, -28, 456, 453, -15, -67, -18, 6, 456, 454,
	6,
}
var sqlDef = [...]int{

	0, -2, 1, 107, -2, -2, 132, 0, 130, 119,
	0, -2, 0, 126, 126, 126, 0, 0, 116, 229,
	0, 129, 127, 0, 181, 0, 165, 148, 145, 0,
	162, 163, 149, 0, 0, 0, 157, 0, 124, 125,
	0, 0, 0, 109, 110, 123, 228, 230, 234, 235,
	29, 0, 0, 0, 0, 0, 77, 78, 0, 80,
	81, 82, 203, 415, 215, 245, 246, 247, 248, 214,
	186, -2, -2, 254, 249, 250, 0, 267, 268, 269,
	270, 271, 272, 273, 274, 275, 276, 277, 278, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 298, 299,
	300, 301, 302, 303, 304, 305, 306, 307, 308, 309,
	310, 311, 312, 313, 314, 315, 316, 317, 318, 319,
	320, 321, 322, 323, 324, 325, 326, 327, 328, 329,
	330, 331, 332, 333, 334, 335, 336, 337, 338, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
	350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
	360, 361, 362, 363, 364, 365, 366, 367, 368, 369,
	370, 371, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 381, 382, 383, 384, 385, 386, 387, 388, 389,
	390, 391, 392, 393, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
	410, 411, 412, 413, 414, 416, 417, 418, 419, 420,
	421, 422, 423, 424, 425, 426, 427, 428, 429, 430,
	431, 432, 433, 434, 435, 436, 437, 438, 439, 440,
	441, 442, 443, 444, 445, 446, 447, 448, 449, 450,
	451, 452, 453, 454, 455, 456, 457, 458, 459, 460,
	461, 462, 463, 464, 465, 466, 467, 468, 469, 470,
	471, 472, 473, 474, 475, 476, 477, 478, 479, 480,
	481, 482, 483, 484, 485, 486, 487, 488, 489, 490,
	491, 492, 493, 494, 495, 496, 497, 498, 499, 500,
	501, 502, 503, 504, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
	521, 522, 523, 524, 525, 526, 527, 528, 529, 530,
	531, 532, 533, 534, 535, 536, 537, 538, 539, 540,
	541, 542, 543, 544, 545, 546, 547, 548, 549, 550,
	551, 552, 553, 554, 555, 556, 557, 558, 559, 560,
	561, 562, 563, 564, 565, 566, 567, 568, 569, 570,
	571, 572, 573, 574, 575, 576, 577, 578, 579, 580,
	581, 582, 243, 257, 583, 584, 585, 586, 587, 588,
	589, 590, 591, 592, 593, 594, 595, 596, 597, 598,
	599, 600, 601, 602, 603, 604, 605, 123, 0, 182,
	0, 225, 223, 224, 113, 164, 114, 147, 150, 0,
	0, 152, 0, 154, 0, 160, 161, 166, 170, 171,
	175, 179, 180, 168, 0, 172, -2, 99, 0, 120,
	115, 116, 121, 122, 133, 134, 4, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 66, 68, 0, 233, 0, 33, 34, 48,
	51, 52, 0, -2, 572, 0, -2, 219, 0, 0,
	213, 188, 0, 0, 96, 0, 0, 227, 146, 0,
	155, 0, 173, 0, 251, 169, 177, 178, 151, 97,
	0, 156, 236, 238, 252, 253, 415, 0, 0, 7,
	2, 3, 184, 0, 231, 30, 17, 18, 19, 22,
	23, 24, 25, 26, 27, 28, 255, 256, 31, 12,
	0, 35, 36, 37, 38, 39, 40, -2, -2, -2,
	-2, -2, -2, 47, 49, 50, -2, 0, 0, 0,
	-2, 0, 65, 0, 69, 71, 73, 0, 232, 262,
	263, 264, 265, 266, 606, 607, 608, 609, 610, 611,
	612, 613, 614, 615, 616, 617, 618, 619, 620, 621,
	622, 623, 624, 625, 626, 627, 628, 629, 630, 631,
	632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 645, 646, 647, 648, 649, 650, 651,
	652, 653, 654, 655, 656, 657, 658, 659, 660, 661,
	662, 663, 664, 665, 666, 667, 668, 669, 670, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 221, 0, 220, 217, 218, 242, 212, 208, 0,
	86, 0, 0, 83, 132, 0, 102, 104, 0, -2,
	184, 0, 100, 226, 153, 0, 0, 98, 0, 135,
	7, 205, 0, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 137, 0, 139,
	0, 94, 95, 9, 16, 20, 0, 13, 0, 0,
	0, -2, -2, 0, 0, -2, 67, 70, 72, 74,
	0, 0, 79, 204, 0, 209, 0, 0, 0, 0,
	0, 0, 131, 85, 0, 0, 139, 0, 128, 167,
	174, 237, 136, 0, 5, 6, 144, 0, 183, 0,
	0, 0, 0, 0, 11, 0, 0, 14, 32, -2,
	0, 0, -2, -2, 0, 0, -2, 222, 207, 211,
	0, 0, 0, 84, 103, 105, 106, 144, 101, 0,
	158, 0, 0, 89, 0, 0, 0, 10, 21, 15,
	-2, -2, 0, -2, -2, 210, 0, 185, 158, 206,
	117, 143, 138, 140, 142, 90, 91, 0, 0, -2,
	187, 118, 0, 0, 93, 141, 0, 87, 0, 92,
	88,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 448, 3, 3,
	453, 454, 446, 444, 456, 445, 455, 447, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	440, 442, 441, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 451, 3, 452, 449,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = [...]int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 443, 57783, 450, 0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lookahead func() int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.lookahead()
}

func sqlNewParser() sqlParser {
	p := &sqlParserImpl{
		lookahead: func() int { return -1 },
	}
	return p
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqllval sqlSymType
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	sqlS := make([]sqlSymType, sqlMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlchar := -1
	sqltoken := -1 // sqlchar translated into internal numbering
	sqlrcvr.lookahead = func() int { return sqlchar }
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlchar = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlchar < 0 {
		sqlchar, sqltoken = sqllex1(sqllex, &sqllval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlchar = -1
		sqltoken = -1
		sqlVAL = sqllval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlchar < 0 {
			sqlchar, sqltoken = sqllex1(sqllex, &sqllval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlchar = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:313
		{
			sqlVAL.sqlSelect = sqlDollar[1].sqlSelect
			sqllex.(*sqlLex).stmt = sqlDollar[1].sqlSelect
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:319
		{
			sqlVAL.str = "asc"
		}
	case 3:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:320
		{
			sqlVAL.str = "desc"
		}
	case 4:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:321
		{
			sqlVAL.str = ""
		}
	case 5:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:324
		{
			sqlVAL.str = "first"
		}
	case 6:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:325
		{
			sqlVAL.str = "last"
		}
	case 7:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:326
		{
			sqlVAL.str = ""
		}
	case 9:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:335
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 10:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:339
		{
			sqlVAL.expr = AliasedExpr{Expr: sqlDollar[1].expr, Alias: sqlDollar[3].str}
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:343
		{
			sqlVAL.expr = AliasedExpr{Expr: sqlDollar[1].expr, Alias: sqlDollar[2].str}
		}
	case 12:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:349
		{
			sqlVAL.qualifiedName = QualifiedName{sqlDollar[1].str}
		}
	case 13:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:351
		{
			sqlVAL.qualifiedName = QualifiedName{sqlDollar[1].str}
			sqlVAL.qualifiedName = append(sqlVAL.qualifiedName, sqlDollar[2].qualifiedName...)
		}
	case 14:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:358
		{
			sqlVAL.qualifiedName = QualifiedName{sqlDollar[2].str}
		}
	case 15:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:362
		{
			sqlVAL.qualifiedName = append(sqlDollar[1].qualifiedName, sqlDollar[3].str)
		}
	case 16:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:380
		{
			sqlVAL.pgType = sqlDollar[1].pgType
		}
	case 17:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:406
		{
			sqlVAL.placeholder = nil
		}
	case 18:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:409
		{
			sqlVAL.pgType = sqlDollar[1].pgType
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:410
		{
			sqlVAL.pgType = sqlDollar[1].pgType
		}
	case 20:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:457
		{
			sqlVAL.pgType = PgType{Name: sqlDollar[1].str}
		}
	case 21:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:468
		{
			sqlVAL.placeholder = sqlDollar[2].fields
		}
	case 22:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:469
		{
			sqlVAL.placeholder = nil
		}
	case 23:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:476
		{
			sqlVAL.pgType = PgType{Name: "int"}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:480
		{
			sqlVAL.pgType = PgType{Name: "integer"}
		}
	case 25:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:484
		{
			sqlVAL.pgType = PgType{Name: "smallint"}
		}
	case 26:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:488
		{
			sqlVAL.pgType = PgType{Name: "bigint"}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:492
		{
			sqlVAL.pgType = PgType{Name: "real"}
		}
	case 28:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:526
		{
			sqlVAL.pgType = PgType{Name: "bool"}
		}
	case 30:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:582
		{
			sqlVAL.expr = TypecastExpr{Expr: sqlDollar[1].expr, Typename: sqlDollar[3].pgType}
		}
	case 31:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:586
		{
			sqlVAL.expr = CollateExpr{Expr: sqlDollar[1].expr, Collation: sqlDollar[3].qualifiedName}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:590
		{
			sqlVAL.expr = AtTimeZoneExpr{Expr: sqlDollar[1].expr, TimeZone: sqlDollar[5].expr}
		}
	case 33:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:603
		{
			sqlVAL.expr = UnaryExpr{Operator: "+", Expr: sqlDollar[2].expr}
		}
	case 34:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:607
		{
			sqlVAL.expr = UnaryExpr{Operator: "-", Expr: sqlDollar[2].expr}
		}
	case 35:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:611
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: "+", Right: sqlDollar[3].expr}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:615
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: "-", Right: sqlDollar[3].expr}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:619
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: "*", Right: sqlDollar[3].expr}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:623
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: "/", Right: sqlDollar[3].expr}
		}
	case 39:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:627
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: "%", Right: sqlDollar[3].expr}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:631
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: "^", Right: sqlDollar[3].expr}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:635
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: "<", Right: sqlDollar[3].expr}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:639
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: ">", Right: sqlDollar[3].expr}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:643
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: "=", Right: sqlDollar[3].expr}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:647
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: "<=", Right: sqlDollar[3].expr}
		}
	case 45:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:651
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: ">=", Right: sqlDollar[3].expr}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:655
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: "!=", Right: sqlDollar[3].expr}
		}
	case 47:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:659
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: sqlDollar[2].str, Right: sqlDollar[3].expr}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:663
		{
			sqlVAL.expr = UnaryExpr{Operator: sqlDollar[1].str, Expr: sqlDollar[2].expr}
		}
	case 49:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:670
		{
			sqlVAL.expr = BooleanExpr{Left: sqlDollar[1].expr, Operator: "and", Right: sqlDollar[3].expr}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:674
		{
			sqlVAL.expr = BooleanExpr{Left: sqlDollar[1].expr, Operator: "or", Right: sqlDollar[3].expr}
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:678
		{
			sqlVAL.expr = NotExpr{Expr: sqlDollar[2].expr}
		}
	case 52:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:682
		{
			sqlVAL.expr = NotExpr{Expr: sqlDollar[2].expr}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:686
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlDollar[1].expr, Operator: "like", Right: sqlDollar[3].expr}
		}
	case 54:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:690
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlDollar[1].expr, Operator: "like", Right: sqlDollar[3].expr, Escape: sqlDollar[5].expr}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:694
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlDollar[1].expr, Operator: "not like", Right: sqlDollar[4].expr}
		}
	case 56:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:698
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlDollar[1].expr, Operator: "not like", Right: sqlDollar[4].expr, Escape: sqlDollar[6].expr}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:702
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlDollar[1].expr, Operator: "ilike", Right: sqlDollar[3].expr}
		}
	case 58:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:706
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlDollar[1].expr, Operator: "ilike", Right: sqlDollar[3].expr, Escape: sqlDollar[5].expr}
		}
	case 59:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:710
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlDollar[1].expr, Operator: "not ilike", Right: sqlDollar[4].expr}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:714
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlDollar[1].expr, Operator: "not ilike", Right: sqlDollar[4].expr, Escape: sqlDollar[6].expr}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:719
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlDollar[1].expr, Operator: "similar to", Right: sqlDollar[4].expr}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:723
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlDollar[1].expr, Operator: "similar to", Right: sqlDollar[4].expr, Escape: sqlDollar[6].expr}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:727
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlDollar[1].expr, Operator: "not similar to", Right: sqlDollar[5].expr}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:731
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlDollar[1].expr, Operator: "not similar to", Right: sqlDollar[5].expr, Escape: sqlDollar[7].expr}
		}
	case 65:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:744
		{
			sqlVAL.expr = IsNullExpr{Expr: sqlDollar[1].expr}
		}
	case 66:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:748
		{
			sqlVAL.expr = IsNullExpr{Expr: sqlDollar[1].expr}
		}
	case 67:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:752
		{
			sqlVAL.expr = IsNullExpr{Expr: sqlDollar[1].expr, Not: true}
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:756
		{
			sqlVAL.expr = IsNullExpr{Expr: sqlDollar[1].expr, Not: true}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:763
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlDollar[1].expr, Op: "true"}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:767
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlDollar[1].expr, Not: true, Op: "true"}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:771
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlDollar[1].expr, Op: "false"}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:775
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlDollar[1].expr, Not: true, Op: "false"}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:779
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlDollar[1].expr, Op: "unknown"}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:783
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlDollar[1].expr, Not: true, Op: "unknown"}
		}
	case 75:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:787
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: "is distinct from", Right: sqlDollar[5].expr}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
		//line sql.y:791
		{
			sqlVAL.expr = BinaryExpr{Left: sqlDollar[1].expr, Operator: "is not distinct from", Right: sqlDollar[6].expr}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:818
		{
			sqlVAL.expr = sqlDollar[1].qualifiedName
		}
	case 78:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:819
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 79:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:826
		{
			sqlVAL.expr = ParenExpr{Expr: sqlDollar[2].expr}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:829
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 81:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:830
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 82:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:832
		{
			sqlVAL.expr = sqlDollar[1].sqlSelect
		}
	case 83:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:849
		{
			sqlVAL.funcApplication = FuncApplication{Name: sqlDollar[1].str}
		}
	case 84:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:853
		{
			sqlVAL.funcApplication = FuncApplication{Name: sqlDollar[1].str, Args: sqlDollar[3].funcArgs, OrderClause: sqlDollar[4].orderClause}
		}
	case 85:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:863
		{
			sqlVAL.funcApplication = FuncApplication{Name: sqlDollar[1].str, Star: true}
		}
	case 86:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:879
		{
			sqlVAL.expr = sqlDollar[1].funcApplication
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:897
		{
			sqlVAL.identifiers = []string{sqlDollar[1].str}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:901
		{
			sqlVAL.identifiers = append(sqlDollar[1].identifiers, sqlDollar[3].str)
		}
	case 89:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:907
		{
			sqlVAL.expr = JoinExpr{Left: sqlDollar[1].expr, Join: ",", Right: sqlDollar[3].expr}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:911
		{
			sqlVAL.expr = JoinExpr{Left: sqlDollar[1].expr, Join: "cross join", Right: sqlDollar[4].expr}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:915
		{
			sqlVAL.expr = JoinExpr{Left: sqlDollar[1].expr, Join: "natural join", Right: sqlDollar[4].expr}
		}
	case 92:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
		//line sql.y:919
		{
			sqlVAL.expr = JoinExpr{Left: sqlDollar[1].expr, Join: "join", Right: sqlDollar[3].expr, Using: sqlDollar[6].identifiers}
		}
	case 93:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:923
		{
			sqlVAL.expr = JoinExpr{Left: sqlDollar[1].expr, Join: "join", Right: sqlDollar[3].expr, On: sqlDollar[5].expr}
		}
	case 94:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:929
		{
			sqlVAL.fromClause = &FromClause{Expr: sqlDollar[2].expr}
		}
	case 95:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:933
		{
			sqlVAL.fromClause = &FromClause{Expr: sqlDollar[2].expr}
		}
	case 96:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:936
		{
			sqlVAL.fromClause = nil
		}
	case 97:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:940
		{
			sqlVAL.str = "nowait"
		}
	case 98:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:941
		{
			sqlVAL.str = "skip locked"
		}
	case 99:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:942
		{
			sqlVAL.str = ""
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:947
		{
			sqlVAL.fields = []Expr{sqlDollar[1].expr}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:951
		{
			sqlVAL.fields = append(sqlDollar[1].fields, sqlDollar[3].expr)
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:958
		{
			sqlVAL.funcArgs = []FuncArg{sqlDollar[1].funcArg}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:962
		{
			sqlVAL.funcArgs = append(sqlDollar[1].funcArgs, sqlDollar[3].funcArg)
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:968
		{
			sqlVAL.funcArg = FuncArg{Expr: sqlDollar[1].expr}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:972
		{
			sqlVAL.funcArg = FuncArg{Name: sqlDollar[1].str, NameOp: ":=", Expr: sqlDollar[3].expr}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:976
		{
			sqlVAL.funcArg = FuncArg{Name: sqlDollar[1].str, NameOp: "=>", Expr: sqlDollar[3].expr}
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1033
		{
			sqlDollar[2].sqlSelect.ParenWrapped = true
			sqlVAL.sqlSelect = sqlDollar[2].sqlSelect
		}
	case 110:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1037
		{
			sqlVAL.sqlSelect = sqlDollar[2].sqlSelect
		}
	case 111:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1041
		{
			ss := &SelectStmt{}
			ss.SimpleSelect = *sqlDollar[1].simpleSelect
			sqlVAL.sqlSelect = ss
		}
	case 112:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1047
		{
			sqlDollar[1].sqlSelect.OrderClause = sqlDollar[2].orderClause
			sqlVAL.sqlSelect = sqlDollar[1].sqlSelect
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1052
		{
			sqlDollar[1].sqlSelect.OrderClause = sqlDollar[2].orderClause
			sqlDollar[1].sqlSelect.LockingClause = sqlDollar[3].lockingClause
			sqlDollar[1].sqlSelect.LimitClause = sqlDollar[4].limitClause
			sqlVAL.sqlSelect = sqlDollar[1].sqlSelect
		}
	case 114:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1059
		{
			sqlDollar[1].sqlSelect.OrderClause = sqlDollar[2].orderClause
			sqlDollar[1].sqlSelect.LimitClause = sqlDollar[3].limitClause
			sqlDollar[1].sqlSelect.LockingClause = sqlDollar[4].lockingClause
			sqlVAL.sqlSelect = sqlDollar[1].sqlSelect
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1068
		{
			ss := &SelectStmt{}
			ss.SimpleSelect = *sqlDollar[1].simpleSelect
			sqlVAL.sqlSelect = ss
		}
	case 117:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1102
		{
			ss := &SimpleSelect{}
			ss.TargetList = sqlDollar[3].fields
			ss.FromClause = sqlDollar[5].fromClause
			ss.WhereClause = sqlDollar[6].whereClause
			ss.GroupByClause = sqlDollar[7].groupByClause
			ss.HavingClause = sqlDollar[8].expr
			sqlVAL.simpleSelect = ss
		}
	case 118:
		sqlDollar = sqlS[sqlpt-9 : sqlpt+1]
		//line sql.y:1114
		{
			ss := &SimpleSelect{}
			ss.DistinctList = sqlDollar[2].fields
			ss.TargetList = sqlDollar[3].fields
			ss.FromClause = sqlDollar[5].fromClause
			ss.WhereClause = sqlDollar[6].whereClause
			ss.GroupByClause = sqlDollar[7].groupByClause
			ss.HavingClause = sqlDollar[8].expr
			sqlVAL.simpleSelect = ss
		}
	case 119:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1125
		{
			ss := &SimpleSelect{}
			ss.ValuesClause = sqlDollar[1].valuesClause
			sqlVAL.simpleSelect = ss
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1137
		{
			ss := &SimpleSelect{}
			ss.LeftSelect = sqlDollar[1].sqlSelect
			ss.SetOp = "union"
			ss.SetAll = sqlDollar[3].boolean
			ss.RightSelect = sqlDollar[4].sqlSelect
			sqlVAL.simpleSelect = ss
		}
	case 121:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1146
		{
			ss := &SimpleSelect{}
			ss.LeftSelect = sqlDollar[1].sqlSelect
			ss.SetOp = "intersect"
			ss.SetAll = sqlDollar[3].boolean
			ss.RightSelect = sqlDollar[4].sqlSelect
			sqlVAL.simpleSelect = ss
		}
	case 122:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1155
		{
			ss := &SimpleSelect{}
			ss.LeftSelect = sqlDollar[1].sqlSelect
			ss.SetOp = "except"
			ss.SetAll = sqlDollar[3].boolean
			ss.RightSelect = sqlDollar[4].sqlSelect
			sqlVAL.simpleSelect = ss
		}
	case 123:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1179
		{
			sqlVAL.placeholder = nil
		}
	case 124:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1184
		{
			sqlVAL.boolean = true
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1185
		{
			sqlVAL.boolean = false
		}
	case 126:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1186
		{
			sqlVAL.boolean = false
		}
	case 127:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1191
		{
			sqlVAL.fields = make([]Expr, 0)
		}
	case 128:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1192
		{
			sqlVAL.fields = sqlDollar[4].fields
		}
	case 129:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1195
		{
			sqlVAL.placeholder = nil
		}
	case 130:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1196
		{
			sqlVAL.placeholder = nil
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1199
		{
			sqlVAL.orderClause = sqlDollar[1].orderClause
		}
	case 132:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1200
		{
			sqlVAL.orderClause = nil
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1203
		{
			sqlVAL.orderClause = sqlDollar[3].orderClause
		}
	case 134:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1207
		{
			sqlVAL.orderClause = &OrderClause{Exprs: []OrderExpr{sqlDollar[1].orderExpr}}
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1211
		{
			sqlDollar[1].orderClause.Exprs = append(sqlDollar[1].orderClause.Exprs, sqlDollar[3].orderExpr)
			sqlVAL.orderClause = sqlDollar[1].orderClause
		}
	case 136:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1219
		{
			sqlVAL.orderExpr = OrderExpr{Expr: sqlDollar[1].expr, Using: sqlDollar[3].str, Nulls: sqlDollar[4].str}
		}
	case 137:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1223
		{
			sqlVAL.orderExpr = OrderExpr{Expr: sqlDollar[1].expr, Order: sqlDollar[2].str, Nulls: sqlDollar[3].str}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1248
		{
			sqlVAL.groupByClause = &GroupByClause{Exprs: sqlDollar[3].fields}
		}
	case 139:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1249
		{
			sqlVAL.groupByClause = nil
		}
	case 140:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1253
		{
			sqlVAL.fields = []Expr{sqlDollar[1].expr}
		}
	case 141:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1257
		{
			sqlVAL.fields = append(sqlDollar[1].fields, sqlDollar[3].expr)
		}
	case 143:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1270
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 144:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1271
		{
			sqlVAL.expr = nil
		}
	case 145:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1274
		{
			sqlVAL.lockingClause = sqlDollar[1].lockingClause
		}
	case 146:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1275
		{
			sqlVAL.lockingClause = nil
		}
	case 147:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1278
		{
			sqlVAL.lockingClause = sqlDollar[1].lockingClause
		}
	case 148:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1279
		{
			sqlVAL.lockingClause = nil
		}
	case 149:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1283
		{
			sqlVAL.lockingClause = &LockingClause{Locks: []LockingItem{sqlDollar[1].lockingItem}}
		}
	case 150:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1287
		{
			sqlDollar[1].lockingClause.Locks = append(sqlDollar[1].lockingClause.Locks, sqlDollar[2].lockingItem)
			sqlVAL.lockingClause = sqlDollar[1].lockingClause
		}
	case 151:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1294
		{
			sqlVAL.lockingItem = LockingItem{Strength: sqlDollar[1].str, LockedRels: sqlDollar[2].identifiers, WaitPolicy: sqlDollar[3].str}
		}
	case 152:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1299
		{
			sqlVAL.str = "update"
		}
	case 153:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1300
		{
			sqlVAL.str = "no key update"
		}
	case 154:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1301
		{
			sqlVAL.str = "share"
		}
	case 155:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1302
		{
			sqlVAL.str = "key share"
		}
	case 156:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1305
		{
			sqlVAL.identifiers = sqlDollar[2].identifiers
		}
	case 157:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1306
		{
			sqlVAL.identifiers = nil
		}
	case 158:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1314
		{
			sqlVAL.placeholder = nil
		}
	case 159:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1318
		{
			panic("TODO")
		}
	case 160:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1324
		{
			sqlVAL.limitClause = &LimitClause{Limit: sqlDollar[1].expr, Offset: sqlDollar[2].expr}
		}
	case 161:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1328
		{
			sqlVAL.limitClause = &LimitClause{Limit: sqlDollar[2].expr, Offset: sqlDollar[1].expr}
		}
	case 162:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1332
		{
			sqlVAL.limitClause = &LimitClause{Limit: sqlDollar[1].expr}
		}
	case 163:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1336
		{
			sqlVAL.limitClause = &LimitClause{Offset: sqlDollar[1].expr}
		}
	case 165:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1343
		{
			sqlVAL.limitClause = nil
		}
	case 166:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1347
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 167:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1352
		{
			sqlVAL.expr = sqlDollar[3].expr
		}
	case 168:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1358
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 169:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1363
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 170:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1368
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 171:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1370
		{
			sqlVAL.expr = nil
		}
	case 172:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1375
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 173:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1384
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 174:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1385
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 175:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1386
		{
			sqlVAL.expr = IntegerLiteral("1")
		}
	case 176:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1393
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 177:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1397
		{
			sqlVAL.placeholder = 0
		}
	case 178:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1398
		{
			sqlVAL.placeholder = 0
		}
	case 179:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1401
		{
			sqlVAL.placeholder = 0
		}
	case 180:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1402
		{
			sqlVAL.placeholder = 0
		}
	case 181:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1406
		{
			sqlVAL.valuesClause = ValuesClause{sqlDollar[2].valuesRow}
		}
	case 182:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1410
		{
			sqlVAL.valuesClause = append(sqlDollar[1].valuesClause, sqlDollar[3].valuesRow)
		}
	case 183:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1427
		{
			sqlVAL.whereClause = &WhereClause{Expr: sqlDollar[2].expr}
		}
	case 184:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1428
		{
			sqlVAL.whereClause = nil
		}
	case 185:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1437
		{
			panic("TODO")
		}
	case 186:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1438
		{
			sqlVAL.placeholder = nil
		}
	case 187:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1442
		{
			panic("TODO")
		}
	case 188:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1443
		{
			sqlVAL.placeholder = nil
		}
	case 189:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1449
		{
			sqlVAL.str = string(sqlDollar[1].str)
		}
	case 190:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1450
		{
			sqlVAL.str = string(sqlDollar[1].str)
		}
	case 191:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1453
		{
			sqlVAL.str = "+"
		}
	case 192:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1454
		{
			sqlVAL.str = "-"
		}
	case 193:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1455
		{
			sqlVAL.str = "*"
		}
	case 194:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1456
		{
			sqlVAL.str = "/"
		}
	case 195:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1457
		{
			sqlVAL.str = "%"
		}
	case 196:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1458
		{
			sqlVAL.str = "^"
		}
	case 197:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1459
		{
			sqlVAL.str = "<"
		}
	case 198:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1460
		{
			sqlVAL.str = ">"
		}
	case 199:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1461
		{
			sqlVAL.str = "="
		}
	case 200:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1462
		{
			sqlVAL.str = "<="
		}
	case 201:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1463
		{
			sqlVAL.str = ">="
		}
	case 202:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1464
		{
			sqlVAL.str = "<>"
		}
	case 203:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1467
		{
			sqlVAL.str = string(sqlDollar[1].str)
		}
	case 204:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1468
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 205:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1471
		{
			sqlVAL.str = string(sqlDollar[1].str)
		}
	case 206:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1472
		{
			sqlVAL.str = sqlDollar[3].str
		}
	case 207:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
		//line sql.y:1484
		{
			sqlVAL.expr = CaseExpr{CaseArg: sqlDollar[2].expr, WhenClauses: sqlDollar[3].whenClauses, Default: sqlDollar[4].expr}
		}
	case 208:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1491
		{
			sqlVAL.whenClauses = []WhenClause{sqlDollar[1].whenClause}
		}
	case 209:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1495
		{
			sqlVAL.whenClauses = append(sqlDollar[1].whenClauses, sqlDollar[2].whenClause)
		}
	case 210:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
		//line sql.y:1501
		{
			sqlVAL.whenClause = WhenClause{When: sqlDollar[2].expr, Then: sqlDollar[4].expr}
		}
	case 211:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1506
		{
			sqlVAL.expr = sqlDollar[2].expr
		}
	case 212:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1507
		{
			sqlVAL.expr = nil
		}
	case 213:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1510
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 214:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1511
		{
			sqlVAL.expr = nil
		}
	case 215:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1515
		{
			sqlVAL.qualifiedName = QualifiedName{sqlDollar[1].str}
		}
	case 216:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1519
		{
			sqlVAL.qualifiedName = QualifiedName{sqlDollar[1].str}
			sqlVAL.qualifiedName = append(sqlVAL.qualifiedName, sqlDollar[2].identifiers...)
		}
	case 217:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1528
		{
			sqlVAL.str = sqlDollar[2].str
		}
	case 218:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1532
		{
			sqlVAL.str = "*"
		}
	case 219:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1551
		{
			sqlVAL.identifiers = []string{sqlDollar[1].str}
		}
	case 220:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1552
		{
			sqlVAL.identifiers = append(sqlDollar[1].identifiers, sqlDollar[2].str)
		}
	case 221:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1555
		{
			sqlVAL.identifiers = nil
		}
	case 222:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1557
		{
			if sqlDollar[1].identifiers != nil {
				sqlVAL.identifiers = append(sqlDollar[1].identifiers, sqlDollar[2].str)
			} else {
				sqlVAL.identifiers = []string{sqlDollar[2].str}
			}
		}
	case 223:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1573
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 224:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1574
		{
			sqlVAL.expr = DefaultExpr(true)
		}
	case 225:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1578
		{
			sqlVAL.valuesRow = ValuesRow{sqlDollar[1].expr}
		}
	case 226:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1582
		{
			sqlVAL.valuesRow = append(sqlDollar[1].valuesRow, sqlDollar[3].expr)
		}
	case 227:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1593
		{
			sqlVAL.valuesRow = sqlDollar[2].valuesRow
		}
	case 228:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1604
		{
			sqlVAL.fields = sqlDollar[1].fields
		}
	case 229:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
		//line sql.y:1605
		{
			sqlVAL.fields = nil
		}
	case 230:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1608
		{
			sqlVAL.fields = []Expr{sqlDollar[1].expr}
		}
	case 231:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1610
		{
			sqlVAL.fields = append(sqlDollar[1].fields, sqlDollar[3].expr)
		}
	case 232:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1616
		{
			sqlVAL.expr = AliasedExpr{Expr: sqlDollar[1].expr, Alias: sqlDollar[3].str}
		}
	case 233:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1620
		{
			sqlVAL.expr = AliasedExpr{Expr: sqlDollar[1].expr, Alias: sqlDollar[2].str}
		}
	case 235:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1625
		{
			sqlVAL.expr = QualifiedName{"*"}
		}
	case 236:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1639
		{
			sqlVAL.identifiers = []string{sqlDollar[1].str}
		}
	case 237:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1643
		{
			sqlVAL.identifiers = append(sqlDollar[1].identifiers, sqlDollar[3].str)
		}
	case 238:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1656
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 239:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1688
		{
			sqlVAL.identifiers = []string{sqlDollar[1].str}
		}
	case 240:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
		//line sql.y:1690
		{
			sqlVAL.identifiers = append(sqlDollar[1].identifiers, sqlDollar[3].str)
		}
	case 241:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1695
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 242:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1698
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 243:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1711
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 244:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
		//line sql.y:1715
		{
			panic("TODO")
		}
	case 245:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1725
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 246:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1732
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 247:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1745
		{
			sqlVAL.expr = BoolLiteral(true)
		}
	case 248:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1749
		{
			sqlVAL.expr = BoolLiteral(false)
		}
	case 249:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1756
		{
			sqlVAL.expr = IntegerLiteral(sqlDollar[1].str)
		}
	case 250:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1757
		{
			sqlVAL.expr = StringLiteral(sqlDollar[1].str)
		}
	case 251:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1760
		{
			sqlVAL.expr = sqlDollar[1].expr
		}
	case 262:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1803
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 263:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1804
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 264:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1805
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 265:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1806
		{
			sqlVAL.str = sqlDollar[1].str
		}
	case 266:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
		//line sql.y:1807
		{
			sqlVAL.str = sqlDollar[1].str
		}
	}
	goto sqlstack /* stack new state and value */
}

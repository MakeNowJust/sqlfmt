//line sql.y:2
package main

import __yyfmt__ "fmt"

//line sql.y:3
//line sql.y:7
type sqlSymType struct {
	yys           int
	sqlSelect     *SelectStmt
	fields        []Expr
	expr          Expr
	str           string
	identifiers   []string
	fromClause    *FromClause
	whereClause   *WhereClause
	orderExpr     OrderExpr
	orderClause   *OrderClause
	groupByClause *GroupByClause
	limitClause   *LimitClause
	lockingClause *LockingClause
	lockingItem   LockingItem
	boolean       bool
	placeholder   interface{}
	qualifiedName QualifiedName
	whenClauses   []WhenClause
	whenClause    WhenClause
	pgType        PgType
	valuesRow     ValuesRow
	valuesClause  ValuesClause
}

const OP = 57346
const any_operator = 57347
const IDENT = 57348
const FCONST = 57349
const SCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ABORT_P = 57363
const ABSOLUTE_P = 57364
const ACCESS = 57365
const ACTION = 57366
const ADD_P = 57367
const ADMIN = 57368
const AFTER = 57369
const AGGREGATE = 57370
const ALL = 57371
const ALSO = 57372
const ALTER = 57373
const ALWAYS = 57374
const ANALYSE = 57375
const ANALYZE = 57376
const AND = 57377
const ANY = 57378
const ARRAY = 57379
const AS = 57380
const ASC = 57381
const ASSERTION = 57382
const ASSIGNMENT = 57383
const ASYMMETRIC = 57384
const AT = 57385
const ATTRIBUTE = 57386
const AUTHORIZATION = 57387
const BACKWARD = 57388
const BEFORE = 57389
const BEGIN_P = 57390
const BETWEEN = 57391
const BIGINT = 57392
const BINARY = 57393
const BIT = 57394
const BOOLEAN_P = 57395
const BOTH = 57396
const BY = 57397
const CACHE = 57398
const CALLED = 57399
const CASCADE = 57400
const CASCADED = 57401
const CASE = 57402
const CAST = 57403
const CATALOG_P = 57404
const CHAIN = 57405
const CHAR_P = 57406
const CHARACTER = 57407
const CHARACTERISTICS = 57408
const CHECK = 57409
const CHECKPOINT = 57410
const CLASS = 57411
const CLOSE = 57412
const CLUSTER = 57413
const COALESCE = 57414
const COLLATE = 57415
const COLLATION = 57416
const COLUMN = 57417
const COMMENT = 57418
const COMMENTS = 57419
const COMMIT = 57420
const COMMITTED = 57421
const CONCURRENTLY = 57422
const CONFIGURATION = 57423
const CONFLICT = 57424
const CONNECTION = 57425
const CONSTRAINT = 57426
const CONSTRAINTS = 57427
const CONTENT_P = 57428
const CONTINUE_P = 57429
const CONVERSION_P = 57430
const COPY = 57431
const COST = 57432
const CREATE = 57433
const CROSS = 57434
const CSV = 57435
const CUBE = 57436
const CURRENT_P = 57437
const CURRENT_CATALOG = 57438
const CURRENT_DATE = 57439
const CURRENT_ROLE = 57440
const CURRENT_SCHEMA = 57441
const CURRENT_TIME = 57442
const CURRENT_TIMESTAMP = 57443
const CURRENT_USER = 57444
const CURSOR = 57445
const CYCLE = 57446
const DATA_P = 57447
const DATABASE = 57448
const DAY_P = 57449
const DEALLOCATE = 57450
const DEC = 57451
const DECIMAL_P = 57452
const DECLARE = 57453
const DEFAULT = 57454
const DEFAULTS = 57455
const DEFERRABLE = 57456
const DEFERRED = 57457
const DEFINER = 57458
const DELETE_P = 57459
const DELIMITER = 57460
const DELIMITERS = 57461
const DESC = 57462
const DICTIONARY = 57463
const DISABLE_P = 57464
const DISCARD = 57465
const DISTINCT = 57466
const DO = 57467
const DOCUMENT_P = 57468
const DOMAIN_P = 57469
const DOUBLE_P = 57470
const DROP = 57471
const EACH = 57472
const ELSE = 57473
const ENABLE_P = 57474
const ENCODING = 57475
const ENCRYPTED = 57476
const END_P = 57477
const ENUM_P = 57478
const ESCAPE = 57479
const EVENT = 57480
const EXCEPT = 57481
const EXCLUDE = 57482
const EXCLUDING = 57483
const EXCLUSIVE = 57484
const EXECUTE = 57485
const EXISTS = 57486
const EXPLAIN = 57487
const EXTENSION = 57488
const EXTERNAL = 57489
const EXTRACT = 57490
const FALSE_P = 57491
const FAMILY = 57492
const FETCH = 57493
const FILTER = 57494
const FIRST_P = 57495
const FLOAT_P = 57496
const FOLLOWING = 57497
const FOR = 57498
const FORCE = 57499
const FOREIGN = 57500
const FORWARD = 57501
const FREEZE = 57502
const FROM = 57503
const FULL = 57504
const FUNCTION = 57505
const FUNCTIONS = 57506
const GLOBAL = 57507
const GRANT = 57508
const GRANTED = 57509
const GREATEST = 57510
const GROUP_P = 57511
const GROUPING = 57512
const HANDLER = 57513
const HAVING = 57514
const HEADER_P = 57515
const HOLD = 57516
const HOUR_P = 57517
const IDENTITY_P = 57518
const IF_P = 57519
const ILIKE = 57520
const IMMEDIATE = 57521
const IMMUTABLE = 57522
const IMPLICIT_P = 57523
const IMPORT_P = 57524
const IN_P = 57525
const INCLUDING = 57526
const INCREMENT = 57527
const INDEX = 57528
const INDEXES = 57529
const INHERIT = 57530
const INHERITS = 57531
const INITIALLY = 57532
const INLINE_P = 57533
const INNER_P = 57534
const INOUT = 57535
const INPUT_P = 57536
const INSENSITIVE = 57537
const INSERT = 57538
const INSTEAD = 57539
const INT_P = 57540
const INTEGER = 57541
const INTERSECT = 57542
const INTERVAL = 57543
const INTO = 57544
const INVOKER = 57545
const IS = 57546
const ISNULL = 57547
const ISOLATION = 57548
const JOIN = 57549
const KEY = 57550
const LABEL = 57551
const LANGUAGE = 57552
const LARGE_P = 57553
const LAST_P = 57554
const LATERAL_P = 57555
const LEADING = 57556
const LEAKPROOF = 57557
const LEAST = 57558
const LEFT = 57559
const LEVEL = 57560
const LIKE = 57561
const LIMIT = 57562
const LISTEN = 57563
const LOAD = 57564
const LOCAL = 57565
const LOCALTIME = 57566
const LOCALTIMESTAMP = 57567
const LOCATION = 57568
const LOCK_P = 57569
const LOCKED = 57570
const LOGGED = 57571
const MAPPING = 57572
const MATCH = 57573
const MATERIALIZED = 57574
const MAXVALUE = 57575
const MINUTE_P = 57576
const MINVALUE = 57577
const MODE = 57578
const MONTH_P = 57579
const MOVE = 57580
const NAME_P = 57581
const NAMES = 57582
const NATIONAL = 57583
const NATURAL = 57584
const NCHAR = 57585
const NEXT = 57586
const NO = 57587
const NONE = 57588
const NOT = 57589
const NOTHING = 57590
const NOTIFY = 57591
const NOTNULL = 57592
const NOWAIT = 57593
const NULL_P = 57594
const NULLIF = 57595
const NULLS_P = 57596
const NUMERIC = 57597
const OBJECT_P = 57598
const OF = 57599
const OFF = 57600
const OFFSET = 57601
const OIDS = 57602
const ON = 57603
const ONLY = 57604
const OPERATOR = 57605
const OPTION = 57606
const OPTIONS = 57607
const OR = 57608
const ORDER = 57609
const ORDINALITY = 57610
const OUT_P = 57611
const OUTER_P = 57612
const OVER = 57613
const OVERLAPS = 57614
const OVERLAY = 57615
const OWNED = 57616
const OWNER = 57617
const PARSER = 57618
const PARTIAL = 57619
const PARTITION = 57620
const PASSING = 57621
const PASSWORD = 57622
const PLACING = 57623
const PLANS = 57624
const POLICY = 57625
const POSITION = 57626
const PRECEDING = 57627
const PRECISION = 57628
const PRESERVE = 57629
const PREPARE = 57630
const PREPARED = 57631
const PRIMARY = 57632
const PRIOR = 57633
const PRIVILEGES = 57634
const PROCEDURAL = 57635
const PROCEDURE = 57636
const PROGRAM = 57637
const QUOTE = 57638
const RANGE = 57639
const READ = 57640
const REAL = 57641
const REASSIGN = 57642
const RECHECK = 57643
const RECURSIVE = 57644
const REF = 57645
const REFERENCES = 57646
const REFRESH = 57647
const REINDEX = 57648
const RELATIVE_P = 57649
const RELEASE = 57650
const RENAME = 57651
const REPEATABLE = 57652
const REPLACE = 57653
const REPLICA = 57654
const RESET = 57655
const RESTART = 57656
const RESTRICT = 57657
const RETURNING = 57658
const RETURNS = 57659
const REVOKE = 57660
const RIGHT = 57661
const ROLE = 57662
const ROLLBACK = 57663
const ROLLUP = 57664
const ROW = 57665
const ROWS = 57666
const RULE = 57667
const SAVEPOINT = 57668
const SCHEMA = 57669
const SCROLL = 57670
const SEARCH = 57671
const SECOND_P = 57672
const SECURITY = 57673
const SELECT = 57674
const SEQUENCE = 57675
const SEQUENCES = 57676
const SERIALIZABLE = 57677
const SERVER = 57678
const SESSION = 57679
const SESSION_USER = 57680
const SET = 57681
const SETS = 57682
const SETOF = 57683
const SHARE = 57684
const SHOW = 57685
const SIMILAR = 57686
const SIMPLE = 57687
const SKIP = 57688
const SMALLINT = 57689
const SNAPSHOT = 57690
const SOME = 57691
const SQL_P = 57692
const STABLE = 57693
const STANDALONE_P = 57694
const START = 57695
const STATEMENT = 57696
const STATISTICS = 57697
const STDIN = 57698
const STDOUT = 57699
const STORAGE = 57700
const STRICT_P = 57701
const STRIP_P = 57702
const SUBSTRING = 57703
const SYMMETRIC = 57704
const SYSID = 57705
const SYSTEM_P = 57706
const TABLE = 57707
const TABLES = 57708
const TABLESAMPLE = 57709
const TABLESPACE = 57710
const TEMP = 57711
const TEMPLATE = 57712
const TEMPORARY = 57713
const TEXT_P = 57714
const THEN = 57715
const TIME = 57716
const TIMESTAMP = 57717
const TO = 57718
const TRAILING = 57719
const TRANSACTION = 57720
const TRANSFORM = 57721
const TREAT = 57722
const TRIGGER = 57723
const TRIM = 57724
const TRUE_P = 57725
const TRUNCATE = 57726
const TRUSTED = 57727
const TYPE_P = 57728
const TYPES_P = 57729
const UNBOUNDED = 57730
const UNCOMMITTED = 57731
const UNENCRYPTED = 57732
const UNION = 57733
const UNIQUE = 57734
const UNKNOWN = 57735
const UNLISTEN = 57736
const UNLOGGED = 57737
const UNTIL = 57738
const UPDATE = 57739
const USER = 57740
const USING = 57741
const VACUUM = 57742
const VALID = 57743
const VALIDATE = 57744
const VALIDATOR = 57745
const VALUE_P = 57746
const VALUES = 57747
const VARCHAR = 57748
const VARIADIC = 57749
const VARYING = 57750
const VERBOSE = 57751
const VERSION_P = 57752
const VIEW = 57753
const VIEWS = 57754
const VOLATILE = 57755
const WHEN = 57756
const WHERE = 57757
const WHITESPACE_P = 57758
const WINDOW = 57759
const WITH = 57760
const WITHIN = 57761
const WITHOUT = 57762
const WORK = 57763
const WRAPPER = 57764
const WRITE = 57765
const XML_P = 57766
const XMLATTRIBUTES = 57767
const XMLCONCAT = 57768
const XMLELEMENT = 57769
const XMLEXISTS = 57770
const XMLFOREST = 57771
const XMLPARSE = 57772
const XMLPI = 57773
const XMLROOT = 57774
const XMLSERIALIZE = 57775
const YEAR_P = 57776
const YES_P = 57777
const ZONE = 57778
const NOT_LA = 57779
const NULLS_LA = 57780
const WITH_LA = 57781
const POSTFIXOP = 57782
const UMINUS = 57783

var sqlToknames = []string{
	"OP",
	"any_operator",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ABORT_P",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALL",
	"ALSO",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASSERTION",
	"ASSIGNMENT",
	"ASYMMETRIC",
	"AT",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"BETWEEN",
	"BIGINT",
	"BINARY",
	"BIT",
	"BOOLEAN_P",
	"BOTH",
	"BY",
	"CACHE",
	"CALLED",
	"CASCADE",
	"CASCADED",
	"CASE",
	"CAST",
	"CATALOG_P",
	"CHAIN",
	"CHAR_P",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFLICT",
	"CONNECTION",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COPY",
	"COST",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT_P",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CURSOR",
	"CYCLE",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DEC",
	"DECIMAL_P",
	"DECLARE",
	"DEFAULT",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DELETE_P",
	"DELIMITER",
	"DELIMITERS",
	"DESC",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOCUMENT_P",
	"DOMAIN_P",
	"DOUBLE_P",
	"DROP",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCODING",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"ESCAPE",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FALSE_P",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST_P",
	"FLOAT_P",
	"FOLLOWING",
	"FOR",
	"FORCE",
	"FOREIGN",
	"FORWARD",
	"FREEZE",
	"FROM",
	"FULL",
	"FUNCTION",
	"FUNCTIONS",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUP_P",
	"GROUPING",
	"HANDLER",
	"HAVING",
	"HEADER_P",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IF_P",
	"ILIKE",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"IN_P",
	"INCLUDING",
	"INCREMENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INNER_P",
	"INOUT",
	"INPUT_P",
	"INSENSITIVE",
	"INSERT",
	"INSTEAD",
	"INT_P",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVOKER",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LAST_P",
	"LATERAL_P",
	"LEADING",
	"LEAKPROOF",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LISTEN",
	"LOAD",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MATERIALIZED",
	"MAXVALUE",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NATIONAL",
	"NATURAL",
	"NCHAR",
	"NEXT",
	"NO",
	"NONE",
	"NOT",
	"NOTHING",
	"NOTIFY",
	"NOTNULL",
	"NOWAIT",
	"NULL_P",
	"NULLIF",
	"NULLS_P",
	"NUMERIC",
	"OBJECT_P",
	"OF",
	"OFF",
	"OFFSET",
	"OIDS",
	"ON",
	"ONLY",
	"OPERATOR",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT_P",
	"OUTER_P",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OWNER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSING",
	"PASSWORD",
	"PLACING",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRESERVE",
	"PREPARE",
	"PREPARED",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROGRAM",
	"QUOTE",
	"RANGE",
	"READ",
	"REAL",
	"REASSIGN",
	"RECHECK",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RESTRICT",
	"RETURNING",
	"RETURNS",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCROLL",
	"SEARCH",
	"SECOND_P",
	"SECURITY",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STORAGE",
	"STRICT_P",
	"STRIP_P",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSID",
	"SYSTEM_P",
	"TABLE",
	"TABLES",
	"TABLESAMPLE",
	"TABLESPACE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE_P",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"UPDATE",
	"USER",
	"USING",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VALUE_P",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"VERBOSE",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHEN",
	"WHERE",
	"WHITESPACE_P",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRAPPER",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"ZONE",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
}
var sqlStatenames = []string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlMaxDepth = 200

//line sql.y:2106

// The parser expects the lexer to return 0 on EOF.  Give it a name
// for clarity.
const eof = 0

//line yacctab:1
var sqlExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 4,
	1, 95,
	-2, 103,
	-1, 5,
	1, 98,
	454, 98,
	-2, 102,
	-1, 11,
	1, 99,
	454, 99,
	-2, 115,
	-1, 410,
	323, 160,
	324, 160,
	-2, 28,
	-1, 452,
	151, 103,
	156, 103,
	220, 103,
	259, 103,
	267, 103,
	-2, 78,
	-1, 535,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 40,
	-1, 536,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 41,
	-1, 537,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 42,
	-1, 538,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 43,
	-1, 539,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 44,
	-1, 540,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 45,
	-1, 544,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 52,
	-1, 548,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 56,
	-1, 688,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 54,
	-1, 689,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 58,
	-1, 692,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 60,
	-1, 726,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 53,
	-1, 729,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 62,
	-1, 730,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 57,
	-1, 749,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 55,
	-1, 750,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 59,
	-1, 752,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 61,
	-1, 765,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 63,
}

const sqlNprod = 661
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 5263

var sqlAct = []int{

	556, 774, 747, 773, 704, 705, 463, 704, 462, 767,
	655, 481, 417, 20, 457, 66, 67, 68, 69, 70,
	71, 72, 73, 561, 74, 75, 76, 562, 563, 564,
	565, 566, 567, 568, 77, 78, 569, 79, 80, 503,
	81, 82, 83, 333, 334, 504, 335, 336, 570, 84,
	85, 86, 87, 88, 571, 572, 89, 90, 337, 338,
	91, 573, 92, 93, 94, 95, 339, 574, 505, 575,
	96, 97, 98, 99, 506, 100, 101, 102, 576, 103,
	104, 105, 106, 107, 108, 577, 507, 109, 110, 111,
	578, 579, 580, 508, 581, 582, 583, 112, 113, 114,
	115, 116, 117, 340, 341, 118, 584, 119, 585, 120,
	121, 122, 123, 124, 586, 125, 126, 127, 587, 588,
	128, 129, 130, 131, 132, 589, 133, 134, 135, 590,
	136, 137, 138, 591, 139, 140, 141, 142, 342, 143,
	144, 145, 343, 592, 146, 593, 147, 148, 344, 149,
	594, 150, 595, 151, 509, 596, 510, 152, 153, 154,
	597, 155, 345, 598, 346, 156, 599, 157, 158, 159,
	160, 161, 511, 162, 163, 164, 165, 600, 166, 167,
	168, 169, 170, 171, 601, 172, 512, 347, 173, 174,
	175, 176, 348, 349, 602, 350, 603, 177, 513, 514,
	178, 515, 179, 180, 181, 182, 183, 604, 605, 184,
	351, 516, 185, 517, 606, 186, 187, 188, 607, 608,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 352, 518, 353, 204, 205,
	354, 609, 206, 207, 519, 208, 610, 355, 209, 356,
	210, 211, 212, 611, 213, 612, 613, 480, 214, 215,
	614, 615, 216, 357, 520, 217, 521, 358, 218, 219,
	220, 221, 222, 223, 224, 616, 225, 226, 359, 227,
	360, 230, 228, 229, 617, 231, 232, 233, 234, 235,
	236, 237, 238, 361, 239, 240, 241, 242, 618, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	619, 254, 255, 522, 256, 257, 258, 362, 259, 260,
	261, 262, 263, 264, 265, 266, 620, 267, 268, 269,
	270, 271, 621, 272, 273, 363, 274, 275, 523, 276,
	277, 364, 278, 622, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 365, 623, 290, 291, 624,
	292, 524, 293, 294, 295, 296, 297, 625, 366, 367,
	626, 627, 298, 299, 368, 300, 369, 628, 301, 302,
	303, 304, 305, 306, 307, 629, 630, 308, 309, 310,
	311, 312, 631, 632, 313, 314, 315, 316, 317, 370,
	371, 633, 318, 525, 319, 320, 321, 322, 634, 635,
	323, 636, 637, 324, 325, 326, 327, 328, 329, 372,
	373, 374, 375, 376, 377, 378, 379, 380, 330, 331,
	332, 556, 759, 756, 678, 739, 641, 713, 63, 648,
	642, 674, 456, 676, 62, 478, 66, 67, 68, 69,
	70, 71, 72, 73, 561, 74, 75, 76, 562, 563,
	564, 565, 566, 567, 568, 77, 78, 569, 79, 80,
	503, 81, 82, 83, 333, 334, 504, 335, 336, 570,
	84, 85, 86, 87, 88, 571, 572, 89, 90, 337,
	338, 91, 573, 92, 93, 94, 95, 339, 574, 505,
	575, 96, 97, 98, 99, 506, 100, 101, 102, 576,
	103, 104, 105, 106, 107, 108, 577, 507, 109, 110,
	111, 578, 579, 580, 508, 581, 582, 583, 112, 113,
	114, 115, 116, 117, 340, 341, 118, 584, 119, 585,
	120, 121, 122, 123, 124, 586, 125, 126, 127, 587,
	588, 128, 129, 130, 131, 132, 589, 133, 134, 135,
	590, 136, 137, 138, 591, 139, 140, 141, 142, 342,
	143, 144, 145, 343, 592, 146, 593, 147, 148, 344,
	149, 594, 150, 595, 151, 509, 596, 510, 152, 153,
	154, 597, 155, 345, 598, 346, 156, 599, 157, 158,
	159, 160, 161, 511, 162, 163, 164, 165, 600, 166,
	167, 168, 169, 170, 171, 601, 172, 512, 347, 173,
	174, 175, 176, 348, 349, 602, 350, 603, 177, 513,
	514, 178, 515, 179, 180, 181, 182, 183, 604, 605,
	184, 351, 516, 185, 517, 606, 186, 187, 188, 607,
	608, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 352, 518, 353, 204,
	205, 354, 609, 206, 207, 519, 208, 610, 355, 209,
	356, 210, 211, 212, 611, 213, 612, 613, 480, 214,
	215, 614, 615, 216, 357, 520, 217, 521, 358, 218,
	219, 220, 221, 222, 223, 224, 616, 225, 226, 359,
	227, 360, 230, 228, 229, 617, 231, 232, 233, 234,
	235, 236, 237, 238, 361, 239, 240, 241, 242, 618,
	243, 244, 245, 246, 247, 248, 249, 250, 251, 252,
	253, 619, 254, 255, 522, 256, 257, 258, 362, 259,
	260, 261, 262, 263, 264, 265, 266, 620, 267, 268,
	269, 270, 271, 621, 272, 273, 363, 274, 275, 523,
	276, 277, 364, 278, 622, 279, 280, 281, 282, 283,
	284, 285, 286, 287, 288, 289, 365, 623, 290, 291,
	624, 292, 524, 293, 294, 295, 296, 297, 625, 366,
	367, 626, 627, 298, 299, 368, 300, 369, 628, 301,
	302, 303, 304, 305, 306, 307, 629, 630, 308, 309,
	310, 311, 312, 631, 632, 313, 314, 315, 316, 317,
	370, 371, 633, 318, 525, 319, 320, 321, 322, 634,
	635, 323, 636, 637, 324, 325, 326, 327, 328, 329,
	372, 373, 374, 375, 376, 377, 378, 379, 380, 330,
	331, 332, 680, 501, 414, 645, 385, 471, 717, 486,
	723, 685, 8, 755, 698, 36, 418, 64, 35, 40,
	40, 768, 558, 710, 683, 386, 22, 55, 557, 454,
	461, 418, 643, 402, 675, 409, 558, 415, 640, 686,
	677, 559, 557, 701, 646, 420, 446, 447, 448, 449,
	450, 764, 56, 451, 651, 39, 528, 690, 45, 53,
	420, 398, 418, 459, 416, 549, 430, 431, 432, 398,
	475, 466, 553, 13, 546, 419, 472, 473, 53, 706,
	464, 418, 382, 434, 32, 10, 412, 695, 654, 465,
	419, 420, 405, 660, 31, 31, 744, 743, 396, 433,
	671, 672, 673, 711, 740, 714, 396, 487, 31, 53,
	420, 393, 418, 26, 26, 545, 733, 741, 34, 18,
	27, 419, 418, 719, 28, 418, 24, 52, 4, 53,
	418, 775, 418, 7, 42, 15, 430, 431, 432, 21,
	419, 420, 29, 738, 23, 772, 746, 639, 53, 400,
	389, 418, 399, 434, 420, 430, 431, 432, 718, 394,
	383, 420, 712, 30, 30, 476, 490, 410, 392, 391,
	551, 419, 434, 489, 38, 550, 484, 30, 452, 418,
	420, 419, 492, 406, 419, 14, 3, 491, 560, 763,
	693, 419, 381, 493, 684, 397, 526, 48, 384, 644,
	699, 458, 32, 397, 53, 51, 49, 418, 420, 57,
	419, 430, 431, 432, 19, 468, 32, 758, 658, 657,
	661, 697, 455, 477, 411, 474, 438, 53, 434, 33,
	418, 703, 25, 390, 408, 751, 420, 467, 419, 709,
	547, 708, 407, 401, 388, 438, 404, 682, 681, 483,
	395, 413, 440, 441, 11, 12, 679, 485, 395, 420,
	771, 16, 724, 722, 558, 53, 419, 436, 418, 17,
	557, 37, 9, 5, 6, 2, 1, 0, 0, 0,
	732, 736, 0, 0, 0, 0, 436, 0, 0, 419,
	0, 742, 0, 0, 745, 0, 438, 420, 442, 0,
	748, 0, 558, 0, 0, 0, 552, 0, 557, 0,
	0, 445, 754, 0, 435, 438, 554, 0, 761, 762,
	0, 694, 440, 441, 0, 0, 646, 419, 766, 0,
	445, 696, 0, 0, 0, 0, 0, 436, 0, 0,
	770, 440, 441, 0, 0, 659, 0, 0, 0, 0,
	0, 0, 0, 731, 0, 0, 436, 0, 0, 0,
	0, 445, 0, 0, 0, 0, 0, 0, 442, 0,
	0, 438, 716, 0, 0, 0, 0, 0, 0, 0,
	0, 445, 0, 0, 435, 0, 0, 442, 0, 0,
	0, 728, 439, 0, 0, 0, 0, 440, 441, 0,
	445, 0, 0, 435, 0, 0, 0, 0, 0, 0,
	0, 439, 436, 0, 0, 0, 0, 0, 0, 0,
	40, 0, 0, 0, 529, 530, 531, 532, 533, 534,
	535, 536, 537, 538, 539, 540, 541, 542, 543, 544,
	479, 548, 0, 442, 0, 433, 460, 527, 423, 424,
	425, 426, 0, 0, 0, 0, 445, 470, 469, 435,
	502, 433, 439, 0, 649, 386, 426, 0, 433, 650,
	647, 0, 653, 488, 433, 652, 555, 0, 0, 445,
	0, 439, 0, 0, 415, 437, 656, 0, 427, 428,
	429, 0, 421, 422, 423, 424, 425, 426, 0, 0,
	0, 0, 707, 0, 437, 433, 433, 433, 433, 433,
	433, 421, 422, 423, 424, 425, 426, 445, 433, 0,
	0, 0, 668, 669, 670, 0, 662, 663, 664, 665,
	666, 667, 0, 0, 0, 0, 482, 439, 0, 0,
	0, 0, 421, 422, 423, 424, 425, 426, 688, 689,
	0, 0, 692, 0, 0, 437, 0, 0, 427, 428,
	429, 0, 421, 422, 423, 424, 425, 426, 0, 0,
	0, 0, 638, 0, 437, 0, 0, 427, 428, 429,
	0, 421, 422, 423, 424, 425, 426, 0, 433, 433,
	433, 433, 433, 433, 433, 433, 433, 433, 433, 433,
	433, 433, 433, 433, 0, 0, 0, 433, 0, 421,
	422, 423, 424, 425, 426, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	437, 0, 0, 427, 428, 429, 0, 421, 422, 423,
	424, 425, 426, 0, 0, 0, 0, 0, 0, 702,
	700, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	421, 422, 423, 424, 425, 426, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	715, 0, 0, 479, 0, 0, 649, 0, 0, 725,
	726, 0, 0, 729, 730, 0, 0, 0, 421, 422,
	423, 424, 425, 426, 734, 0, 0, 737, 433, 0,
	0, 0, 433, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	749, 750, 0, 0, 752, 0, 0, 0, 753, 433,
	0, 0, 0, 757, 760, 0, 0, 433, 433, 0,
	0, 433, 0, 0, 765, 0, 0, 0, 0, 0,
	0, 433, 0, 0, 0, 0, 0, 769, 0, 0,
	760, 0, 0, 0, 433, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 433, 433, 0, 0, 433, 433,
	0, 0, 0, 433, 0, 0, 433, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 433, 433,
	0, 433, 433, 0, 0, 61, 433, 65, 0, 433,
	53, 64, 0, 0, 433, 0, 0, 0, 433, 0,
	66, 67, 68, 69, 70, 71, 72, 73, 0, 74,
	75, 76, 0, 0, 0, 0, 0, 0, 0, 77,
	78, 0, 79, 80, 0, 81, 82, 83, 333, 334,
	0, 335, 336, 0, 84, 85, 86, 87, 88, 60,
	0, 89, 90, 337, 338, 91, 0, 92, 93, 94,
	95, 339, 0, 0, 0, 96, 97, 98, 99, 0,
	100, 101, 102, 0, 103, 104, 105, 106, 107, 108,
	0, 0, 109, 110, 111, 0, 0, 0, 0, 0,
	0, 0, 112, 113, 114, 115, 116, 117, 340, 341,
	118, 387, 119, 0, 120, 121, 122, 123, 124, 0,
	125, 126, 127, 0, 0, 128, 129, 130, 131, 132,
	0, 133, 134, 135, 0, 136, 137, 138, 0, 139,
	140, 141, 142, 342, 143, 144, 145, 343, 59, 146,
	0, 147, 148, 344, 149, 0, 150, 0, 151, 0,
	0, 0, 152, 153, 154, 0, 155, 345, 0, 346,
	156, 0, 157, 158, 159, 160, 161, 0, 162, 163,
	164, 165, 0, 166, 167, 168, 169, 170, 171, 0,
	172, 0, 347, 173, 174, 175, 176, 348, 349, 0,
	350, 0, 177, 0, 0, 178, 0, 179, 180, 181,
	182, 183, 0, 0, 184, 351, 0, 185, 0, 0,
	186, 187, 188, 0, 0, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 200, 201, 202, 203,
	352, 0, 353, 204, 205, 354, 46, 206, 207, 0,
	208, 0, 355, 209, 356, 210, 211, 212, 0, 213,
	0, 0, 54, 214, 215, 0, 0, 216, 357, 0,
	217, 0, 358, 218, 219, 220, 221, 222, 223, 224,
	0, 225, 226, 359, 227, 360, 230, 228, 229, 0,
	231, 232, 233, 234, 235, 236, 237, 238, 361, 239,
	240, 241, 242, 0, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 0, 254, 255, 0, 256,
	257, 258, 362, 259, 260, 261, 262, 263, 264, 265,
	266, 0, 267, 268, 269, 270, 271, 0, 272, 273,
	363, 274, 275, 0, 276, 277, 364, 278, 0, 279,
	280, 281, 282, 283, 284, 285, 286, 287, 288, 289,
	365, 0, 290, 291, 0, 292, 0, 293, 294, 295,
	296, 297, 0, 366, 367, 0, 0, 298, 299, 368,
	300, 369, 58, 301, 302, 303, 304, 305, 306, 307,
	0, 0, 308, 309, 310, 311, 312, 0, 0, 313,
	314, 315, 316, 317, 370, 371, 0, 318, 0, 319,
	320, 321, 322, 0, 0, 323, 0, 0, 324, 325,
	326, 327, 328, 329, 372, 373, 374, 375, 376, 377,
	378, 379, 380, 330, 331, 332, 47, 0, 0, 0,
	61, 0, 65, 43, 44, 53, 64, 0, 0, 0,
	0, 0, 50, 0, 0, 66, 67, 68, 69, 70,
	71, 72, 73, 0, 74, 75, 76, 0, 0, 0,
	0, 0, 0, 0, 77, 78, 0, 79, 80, 0,
	81, 82, 83, 333, 334, 0, 335, 336, 0, 84,
	85, 86, 87, 88, 60, 0, 89, 90, 337, 338,
	91, 0, 92, 93, 94, 95, 339, 0, 0, 0,
	96, 97, 98, 99, 0, 100, 101, 102, 0, 103,
	104, 105, 106, 107, 108, 0, 0, 109, 110, 111,
	0, 0, 0, 0, 0, 0, 0, 112, 113, 114,
	115, 116, 117, 340, 341, 118, 0, 119, 0, 120,
	121, 122, 123, 124, 0, 125, 126, 127, 0, 0,
	128, 129, 130, 131, 132, 0, 133, 134, 135, 0,
	136, 137, 138, 0, 139, 140, 141, 142, 342, 143,
	144, 145, 343, 59, 146, 0, 147, 148, 344, 149,
	0, 150, 0, 151, 0, 0, 0, 152, 153, 154,
	0, 155, 345, 0, 346, 156, 0, 157, 158, 159,
	160, 161, 0, 162, 163, 164, 165, 0, 166, 167,
	168, 169, 170, 171, 0, 172, 0, 347, 173, 174,
	175, 176, 348, 349, 0, 350, 0, 177, 0, 0,
	178, 0, 179, 180, 181, 182, 183, 0, 0, 184,
	351, 0, 185, 0, 0, 186, 187, 188, 0, 0,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 352, 0, 353, 204, 205,
	354, 46, 206, 207, 0, 208, 0, 355, 209, 356,
	210, 211, 212, 0, 213, 0, 0, 54, 214, 215,
	0, 0, 216, 357, 0, 217, 0, 358, 218, 219,
	220, 221, 222, 223, 224, 0, 225, 226, 359, 227,
	360, 230, 228, 229, 0, 231, 232, 233, 234, 235,
	236, 237, 238, 361, 239, 240, 241, 242, 0, 243,
	244, 245, 246, 247, 248, 249, 250, 251, 252, 253,
	0, 254, 255, 0, 256, 257, 258, 362, 259, 260,
	261, 262, 263, 264, 265, 266, 0, 267, 268, 269,
	270, 271, 0, 272, 273, 363, 274, 275, 0, 276,
	277, 364, 278, 0, 279, 280, 281, 282, 283, 284,
	285, 286, 287, 288, 289, 365, 0, 290, 291, 0,
	292, 0, 293, 294, 295, 296, 297, 0, 366, 367,
	0, 0, 298, 299, 368, 300, 369, 58, 301, 302,
	303, 304, 305, 306, 307, 0, 0, 308, 309, 310,
	311, 312, 0, 0, 313, 314, 315, 316, 317, 370,
	371, 0, 318, 0, 319, 320, 321, 322, 0, 0,
	323, 0, 0, 324, 325, 326, 327, 328, 329, 372,
	373, 374, 375, 376, 377, 378, 379, 380, 330, 331,
	332, 47, 0, 0, 0, 0, 0, 0, 43, 44,
	41, 0, 0, 61, 0, 65, 0, 50, 53, 64,
	0, 0, 0, 0, 0, 0, 0, 0, 66, 67,
	68, 69, 70, 71, 72, 73, 0, 74, 75, 76,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 80, 0, 81, 82, 83, 333, 334, 0, 335,
	336, 0, 84, 85, 86, 87, 88, 60, 0, 89,
	90, 337, 338, 91, 0, 92, 93, 94, 95, 339,
	0, 0, 0, 96, 97, 98, 99, 0, 100, 101,
	102, 0, 103, 104, 105, 106, 107, 108, 0, 0,
	109, 110, 111, 0, 0, 0, 0, 0, 0, 0,
	112, 113, 114, 115, 116, 117, 340, 341, 118, 0,
	119, 0, 120, 121, 122, 123, 124, 0, 125, 126,
	127, 0, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 135, 0, 136, 137, 138, 0, 139, 140, 141,
	142, 342, 143, 144, 145, 343, 59, 146, 0, 147,
	148, 344, 149, 0, 150, 0, 151, 0, 0, 0,
	152, 153, 154, 0, 155, 345, 0, 346, 156, 0,
	157, 158, 159, 160, 161, 0, 162, 163, 164, 165,
	0, 166, 167, 168, 169, 170, 171, 0, 172, 0,
	347, 173, 174, 175, 176, 348, 349, 0, 350, 0,
	177, 0, 0, 178, 0, 179, 180, 181, 182, 183,
	0, 0, 184, 351, 0, 185, 0, 0, 186, 187,
	188, 0, 0, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 352, 0,
	353, 204, 205, 354, 46, 206, 207, 0, 208, 0,
	355, 209, 356, 210, 211, 212, 0, 213, 0, 0,
	54, 214, 215, 0, 0, 216, 357, 0, 217, 0,
	358, 218, 219, 220, 221, 222, 223, 224, 0, 225,
	226, 359, 227, 360, 230, 228, 229, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 361, 239, 240, 241,
	242, 0, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 254, 255, 0, 256, 257, 258,
	362, 259, 260, 261, 262, 263, 264, 265, 266, 8,
	267, 268, 269, 270, 271, 0, 272, 273, 363, 274,
	275, 0, 276, 277, 364, 278, 0, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 365, 0,
	290, 291, 0, 292, 0, 293, 294, 295, 296, 297,
	0, 366, 367, 0, 0, 298, 299, 368, 300, 369,
	58, 301, 302, 303, 304, 305, 306, 307, 0, 0,
	308, 309, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 453, 371, 0, 318, 0, 319, 320, 321,
	322, 0, 0, 323, 0, 0, 324, 325, 326, 327,
	328, 329, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 330, 331, 332, 47, 0, 0, 0, 61, 0,
	65, 43, 44, 53, 64, 0, 0, 0, 0, 0,
	50, 0, 0, 66, 67, 68, 69, 70, 71, 72,
	73, 403, 74, 75, 76, 0, 0, 0, 0, 0,
	0, 0, 77, 78, 0, 79, 80, 0, 81, 82,
	83, 333, 334, 0, 335, 336, 0, 84, 85, 86,
	87, 88, 60, 0, 89, 90, 337, 338, 91, 0,
	92, 93, 94, 95, 339, 0, 0, 0, 96, 97,
	98, 99, 0, 100, 101, 102, 0, 103, 104, 105,
	106, 107, 108, 0, 0, 109, 110, 111, 0, 0,
	0, 0, 0, 0, 0, 112, 113, 114, 115, 116,
	117, 340, 341, 118, 0, 119, 0, 120, 121, 122,
	123, 124, 0, 125, 126, 127, 0, 0, 128, 129,
	130, 131, 132, 0, 133, 134, 135, 0, 136, 137,
	138, 0, 139, 140, 141, 142, 342, 143, 144, 145,
	343, 59, 146, 0, 147, 148, 344, 149, 0, 150,
	0, 151, 0, 0, 0, 152, 153, 154, 0, 155,
	345, 0, 346, 156, 0, 157, 158, 159, 160, 161,
	0, 162, 163, 164, 165, 0, 166, 167, 168, 169,
	170, 171, 0, 172, 0, 347, 173, 174, 175, 176,
	348, 349, 0, 350, 0, 177, 0, 0, 178, 0,
	179, 180, 181, 182, 183, 0, 0, 184, 351, 0,
	185, 0, 0, 186, 187, 188, 0, 0, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 352, 0, 353, 204, 205, 354, 46,
	206, 207, 0, 208, 0, 355, 209, 356, 210, 211,
	212, 0, 213, 0, 0, 54, 214, 215, 0, 0,
	216, 357, 0, 217, 0, 358, 218, 219, 220, 221,
	222, 223, 224, 0, 225, 226, 359, 227, 360, 230,
	228, 229, 0, 231, 232, 233, 234, 235, 236, 237,
	238, 361, 239, 240, 241, 242, 0, 243, 244, 245,
	246, 247, 248, 249, 250, 251, 252, 253, 0, 254,
	255, 0, 256, 257, 258, 362, 259, 260, 261, 262,
	263, 264, 265, 266, 0, 267, 268, 269, 270, 271,
	0, 272, 273, 363, 274, 275, 0, 276, 277, 364,
	278, 0, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 288, 289, 365, 0, 290, 291, 0, 292, 0,
	293, 294, 295, 296, 297, 0, 366, 367, 0, 0,
	298, 299, 368, 300, 369, 58, 301, 302, 303, 304,
	305, 306, 307, 0, 0, 308, 309, 310, 311, 312,
	0, 0, 313, 314, 315, 316, 317, 370, 371, 0,
	318, 0, 319, 320, 321, 322, 0, 0, 323, 0,
	0, 324, 325, 326, 327, 328, 329, 372, 373, 374,
	375, 376, 377, 378, 379, 380, 330, 331, 332, 47,
	0, 0, 0, 61, 0, 65, 43, 44, 53, 64,
	0, 0, 0, 0, 0, 50, 0, 0, 66, 67,
	68, 69, 70, 71, 72, 73, 0, 74, 75, 76,
	0, 0, 0, 0, 0, 0, 0, 77, 78, 0,
	79, 80, 0, 81, 82, 83, 333, 334, 0, 335,
	336, 0, 84, 85, 86, 87, 88, 60, 0, 89,
	90, 337, 338, 91, 0, 92, 93, 94, 95, 339,
	0, 0, 0, 96, 97, 98, 99, 0, 100, 101,
	102, 0, 103, 104, 105, 106, 107, 108, 0, 0,
	109, 110, 111, 0, 0, 0, 0, 0, 0, 0,
	112, 113, 114, 115, 116, 117, 340, 341, 118, 0,
	119, 0, 120, 121, 122, 123, 124, 0, 125, 126,
	127, 0, 0, 128, 129, 130, 131, 132, 0, 133,
	134, 135, 0, 136, 137, 138, 0, 139, 140, 141,
	142, 342, 143, 144, 145, 343, 59, 146, 0, 147,
	148, 344, 149, 0, 150, 0, 151, 0, 0, 0,
	152, 153, 154, 0, 155, 345, 0, 346, 156, 0,
	157, 158, 159, 160, 161, 0, 162, 163, 164, 165,
	0, 166, 167, 168, 169, 170, 171, 0, 172, 0,
	347, 173, 174, 175, 176, 348, 349, 0, 350, 0,
	177, 0, 0, 178, 0, 179, 180, 181, 182, 183,
	0, 0, 184, 351, 0, 185, 0, 0, 186, 187,
	188, 0, 0, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 352, 0,
	353, 204, 205, 354, 46, 206, 207, 0, 208, 0,
	355, 209, 356, 210, 211, 212, 0, 213, 0, 0,
	54, 214, 215, 0, 0, 216, 357, 0, 217, 0,
	358, 218, 219, 220, 221, 222, 223, 224, 0, 225,
	226, 359, 227, 360, 230, 228, 229, 0, 231, 232,
	233, 234, 235, 236, 237, 238, 361, 239, 240, 241,
	242, 0, 243, 244, 245, 246, 247, 248, 249, 250,
	251, 252, 253, 0, 254, 255, 0, 256, 257, 258,
	362, 259, 260, 261, 262, 263, 264, 265, 266, 0,
	267, 268, 269, 270, 271, 0, 272, 273, 363, 274,
	275, 0, 276, 277, 364, 278, 0, 279, 280, 281,
	282, 283, 284, 285, 286, 287, 288, 289, 365, 0,
	290, 291, 0, 292, 0, 293, 294, 295, 296, 297,
	0, 366, 367, 0, 0, 298, 299, 368, 300, 369,
	58, 301, 302, 303, 304, 305, 306, 307, 0, 0,
	308, 309, 310, 311, 312, 0, 0, 313, 314, 315,
	316, 317, 370, 371, 0, 318, 0, 319, 320, 321,
	322, 0, 0, 323, 0, 0, 324, 325, 326, 327,
	328, 329, 372, 373, 374, 375, 376, 377, 378, 379,
	380, 330, 331, 332, 47, 0, 61, 0, 0, 0,
	0, 43, 44, 0, 0, 0, 0, 0, 0, 0,
	50, 66, 67, 68, 69, 70, 71, 72, 73, 0,
	74, 75, 76, 0, 0, 0, 0, 0, 0, 0,
	77, 78, 0, 79, 80, 0, 81, 82, 83, 333,
	334, 0, 335, 336, 0, 84, 85, 86, 87, 88,
	0, 0, 89, 90, 337, 338, 91, 0, 92, 93,
	94, 95, 339, 0, 0, 0, 96, 97, 98, 99,
	0, 100, 101, 102, 0, 103, 104, 105, 106, 107,
	108, 0, 0, 109, 110, 111, 0, 0, 0, 0,
	0, 0, 0, 112, 113, 114, 115, 116, 117, 340,
	341, 118, 0, 119, 0, 120, 121, 122, 123, 124,
	0, 125, 126, 127, 0, 0, 128, 129, 130, 131,
	132, 0, 133, 134, 135, 0, 136, 137, 138, 0,
	139, 140, 141, 142, 342, 143, 144, 145, 343, 0,
	146, 0, 147, 148, 344, 149, 0, 150, 0, 151,
	0, 0, 0, 152, 153, 154, 0, 155, 345, 0,
	346, 156, 0, 157, 158, 159, 160, 161, 0, 162,
	163, 164, 165, 0, 166, 167, 168, 169, 170, 171,
	0, 172, 0, 347, 173, 174, 175, 176, 348, 349,
	0, 350, 0, 177, 0, 0, 178, 0, 179, 180,
	181, 182, 183, 0, 0, 184, 351, 0, 185, 0,
	0, 186, 187, 188, 0, 0, 189, 190, 191, 192,
	193, 194, 195, 196, 197, 198, 199, 200, 201, 202,
	203, 352, 0, 353, 204, 205, 354, 0, 206, 207,
	0, 208, 0, 355, 209, 356, 210, 211, 212, 0,
	213, 0, 0, 480, 214, 215, 0, 0, 216, 357,
	0, 217, 0, 358, 218, 219, 220, 221, 222, 223,
	224, 0, 225, 226, 359, 227, 360, 230, 228, 229,
	0, 231, 232, 233, 234, 235, 236, 237, 238, 361,
	239, 240, 241, 242, 0, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 0, 254, 255, 0,
	256, 257, 258, 362, 259, 260, 261, 262, 263, 264,
	265, 266, 0, 267, 268, 269, 270, 271, 0, 272,
	273, 363, 274, 275, 0, 276, 277, 364, 278, 0,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 365, 0, 290, 291, 0, 292, 0, 293, 294,
	295, 296, 297, 0, 366, 367, 0, 0, 298, 299,
	368, 300, 369, 0, 301, 302, 303, 304, 305, 306,
	307, 0, 0, 308, 309, 310, 311, 312, 0, 0,
	313, 314, 315, 316, 317, 370, 371, 0, 318, 0,
	319, 320, 321, 322, 0, 0, 323, 0, 0, 324,
	325, 326, 327, 328, 329, 372, 373, 374, 375, 376,
	377, 378, 379, 380, 330, 331, 332, 500, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 66, 67, 68, 69, 70, 71, 72, 73,
	0, 74, 75, 76, 0, 0, 0, 0, 0, 0,
	0, 77, 78, 0, 79, 80, 503, 81, 82, 83,
	0, 497, 504, 0, 499, 0, 84, 85, 86, 87,
	88, 0, 0, 89, 90, 0, 0, 91, 0, 92,
	93, 94, 95, 0, 0, 505, 0, 96, 97, 98,
	99, 506, 100, 101, 102, 0, 103, 104, 105, 106,
	107, 108, 0, 507, 109, 110, 111, 0, 0, 0,
	508, 0, 0, 0, 112, 113, 114, 115, 116, 117,
	0, 0, 118, 0, 119, 0, 120, 121, 122, 123,
	124, 0, 125, 126, 127, 0, 0, 128, 129, 130,
	131, 132, 0, 133, 134, 135, 0, 136, 137, 138,
	0, 139, 140, 141, 142, 0, 143, 144, 145, 0,
	0, 146, 0, 147, 148, 0, 149, 0, 150, 0,
	151, 509, 0, 510, 152, 153, 154, 0, 155, 0,
	0, 0, 156, 0, 157, 158, 159, 160, 161, 511,
	162, 163, 164, 165, 0, 166, 167, 168, 169, 170,
	171, 0, 172, 512, 0, 173, 174, 175, 176, 494,
	495, 0, 0, 0, 177, 513, 514, 178, 515, 179,
	180, 181, 182, 183, 0, 0, 184, 0, 516, 185,
	517, 0, 186, 187, 188, 0, 0, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 0, 518, 0, 204, 205, 0, 0, 206,
	207, 519, 208, 0, 0, 209, 0, 210, 211, 212,
	0, 213, 0, 0, 480, 214, 215, 0, 0, 216,
	0, 520, 217, 521, 0, 218, 219, 220, 221, 222,
	223, 224, 0, 225, 226, 0, 227, 0, 230, 228,
	229, 0, 231, 232, 233, 234, 235, 236, 237, 238,
	498, 239, 240, 241, 242, 0, 243, 244, 245, 246,
	247, 248, 249, 250, 251, 252, 253, 0, 254, 255,
	522, 256, 257, 258, 0, 259, 260, 261, 262, 263,
	264, 265, 266, 0, 267, 268, 269, 270, 271, 0,
	272, 273, 0, 274, 275, 523, 276, 277, 496, 278,
	0, 279, 280, 281, 282, 283, 284, 285, 286, 287,
	288, 289, 0, 0, 290, 291, 0, 292, 524, 293,
	294, 295, 296, 297, 0, 0, 0, 0, 0, 298,
	299, 0, 300, 0, 0, 301, 302, 303, 304, 305,
	306, 307, 0, 0, 308, 309, 310, 311, 312, 0,
	0, 313, 314, 315, 316, 317, 0, 0, 0, 318,
	525, 319, 320, 321, 322, 0, 0, 323, 0, 0,
	324, 325, 326, 327, 328, 329, 721, 0, 0, 0,
	0, 53, 0, 0, 418, 330, 331, 332, 430, 431,
	432, 0, 0, 0, 0, 0, 0, 0, 444, 0,
	0, 0, 0, 53, 0, 434, 418, 0, 720, 0,
	430, 431, 432, 420, 53, 0, 0, 418, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 434, 0, 0,
	443, 53, 0, 0, 418, 420, 0, 0, 430, 431,
	432, 0, 0, 419, 0, 0, 420, 0, 0, 0,
	0, 53, 0, 0, 418, 434, 0, 0, 430, 431,
	432, 0, 0, 420, 0, 419, 0, 0, 0, 0,
	53, 0, 0, 418, 0, 434, 419, 430, 431, 432,
	0, 0, 53, 420, 0, 418, 0, 0, 53, 0,
	0, 418, 0, 419, 53, 0, 0, 418, 0, 0,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 419, 420, 0, 0, 0, 0, 0,
	420, 0, 0, 0, 0, 0, 420, 0, 0, 0,
	0, 0, 419, 0, 0, 0, 0, 0, 0, 0,
	727, 0, 0, 0, 419, 0, 0, 0, 438, 0,
	419, 0, 0, 0, 0, 0, 419, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	438, 0, 0, 0, 440, 441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 436,
	0, 0, 0, 0, 0, 0, 440, 441, 438, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 691, 0,
	0, 436, 0, 0, 687, 0, 0, 0, 438, 0,
	442, 0, 0, 0, 440, 441, 0, 0, 0, 0,
	0, 0, 0, 445, 0, 0, 435, 438, 0, 436,
	0, 0, 442, 0, 440, 441, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 445, 0, 0, 435, 436,
	0, 0, 0, 440, 441, 0, 445, 0, 0, 0,
	442, 0, 0, 0, 0, 0, 0, 0, 436, 0,
	0, 0, 0, 445, 0, 0, 435, 0, 0, 0,
	442, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 445, 0, 0, 0, 0, 0, 442,
	0, 0, 0, 0, 439, 0, 0, 0, 0, 0,
	0, 0, 445, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 445, 0, 439, 0, 0, 0,
	445, 0, 0, 0, 0, 0, 445, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 439, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 439, 0, 0, 0, 0, 0,
	0, 0, 0, 735, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 439, 0, 0, 0, 437, 0, 0,
	427, 428, 429, 0, 421, 422, 423, 424, 425, 426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 437,
	0, 0, 427, 428, 429, 0, 421, 422, 423, 424,
	425, 426, 0, 0, 0, 0, 0, 421, 422, 423,
	424, 425, 426, 0, 0, 0, 0, 437, 0, 0,
	427, 428, 429, 0, 421, 422, 423, 424, 425, 426,
	0, 0, 0, 0, 0, 0, 0, 437, 0, 0,
	427, 428, 429, 0, 421, 422, 423, 424, 425, 426,
	0, 0, 0, 0, 0, 0, 437, 0, 0, 427,
	428, 429, 0, 421, 422, 423, 424, 425, 426, 0,
	0, 0, 0, 0, 0, 421, 422, 423, 424, 425,
	426, 421, 422, 423, 424, 425, 426, 421, 422, 423,
	424, 425, 426,
}
var sqlPact = []int{

	540, -1000, -1000, -1000, -1000, -1000, 666, 540, 950, -443,
	433, -1000, 817, 923, 424, 421, 2104, 2104, -1000, 681,
	433, -1000, 1669, 803, 818, 815, 721, 685, 804, -1000,
	2982, 799, 3417, 689, 3417, -1000, -1000, -1000, -444, -1000,
	4722, -1000, -1000, 3417, 3417, 3417, 3417, 3417, -1000, -1000,
	2547, -1000, -1000, -1000, 436, -441, -1000, -1000, -1000, -1000,
	3417, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -444, 437, -1000, -448, -1000, 1053, -1000, -1000, -1000,
	-1000, -1000, -1000, 713, 678, -1000, 741, -1000, 589, -1000,
	-1000, -1000, 1053, -1000, 865, -1000, -1000, -1000, 613, 1053,
	-1000, 679, 3850, -445, -1000, 997, 806, 2104, 4281, 3850,
	542, 3417, 3417, 3417, 3417, 3417, 3417, 3417, 3417, 3417,
	3417, 3417, 3417, 3417, 3417, 3417, 3417, 756, 3417, 549,
	783, -1000, -1000, 425, -1000, 436, 976, 976, 1025, 4789,
	4789, 978, 421, 433, 1002, -441, -1000, -6, 490, 1053,
	806, 3417, 1669, -1000, -1000, 517, -1000, 613, -1000, 3417,
	-1000, -1000, -1000, -1000, -1000, -1000, 720, -446, -1000, -1000,
	-1000, 3417, 942, 456, -1000, -1000, 485, 3417, -1000, -1000,
	-1000, -1000, -1000, 431, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 416, 463, 862,
	862, 877, 877, 877, 971, 927, 927, 927, 927, 927,
	927, 1025, 4789, 4770, 4807, 3417, 3417, 541, 4801, 3417,
	-1000, 798, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 420,
	-1000, -1000, -1000, -1000, 772, -1000, 3417, 485, -449, 1053,
	-1000, -1000, 677, 908, -1000, 3850, -1000, 456, -1000, 430,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 810, 796, 3417, 776, -1000,
	4700, -1000, -1000, 3417, 415, 425, 3417, 3417, 4733, 1114,
	3417, 3417, 1076, -1000, -1000, -1000, -1000, -441, -1000, 841,
	-1000, 3417, 4750, 796, 3417, -1000, -1000, -1000, -1000, -1000,
	998, -1000, -1000, 792, 922, 1053, 3417, 750, 749, 3417,
	1000, -1000, -452, 425, -1000, 968, 4813, 3417, 3417, 958,
	4813, 3417, -1000, -1000, 1053, 3417, 792, 1053, 419, -1000,
	3417, 3417, -1000, 3417, 3417, 650, -1000, -1000, -1000, 4813,
	4813, 3417, 4813, 1053, -1000, -1000, -1000, 1053, -447, -1000,
	1053, -1000, -1000, 428, 3417, 4813, -1000, 3417, 999, 1053,
	-1000, -453, -1000, 985, -1000, -1000,
}
var sqlPgo = []int{

	0, 1136, 1135, 1045, 987, 1134, 1133, 1132, 1131, 1034,
	1129, 439, 1121, 434, 915, 862, 994, 869, 1120, 1116,
	443, 864, 1115, 1114, 1111, 1109, 441, 924, 433, 1109,
	1108, 1107, 867, 1106, 986, 1104, 980, 984, 1103, 1102,
	1097, 1094, 1093, 1004, 1092, 1002, 1089, 1085, 1084, 1083,
	1082, 1081, 1081, 442, 436, 445, 887, 1081, 1080, 918,
	1079, 1078, 437, 1077, 432, 435, 1077, 912, 1075, 1069,
	1066, 1065, 1061, 1060, 1059, 865, 866, 1058, 999, 1057,
	1056, 1054, 892, 444, 438, 1053, 901, 1048, 1047, 1042,
	1033, 1026, 1026,
}
var sqlR1 = []int{

	0, 1, 25, 25, 25, 26, 26, 26, 13, 13,
	13, 80, 80, 81, 81, 90, 30, 91, 91, 88,
	31, 31, 89, 89, 89, 89, 89, 89, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 16, 16, 16, 16, 16, 18,
	18, 19, 19, 19, 19, 19, 17, 17, 17, 47,
	47, 47, 11, 11, 2, 2, 4, 4, 3, 3,
	3, 3, 5, 5, 6, 6, 6, 27, 66, 66,
	66, 10, 10, 12, 12, 22, 22, 23, 24, 24,
	21, 21, 62, 62, 63, 63, 64, 65, 65, 43,
	43, 42, 42, 44, 44, 45, 46, 46, 46, 46,
	48, 48, 28, 29, 34, 34, 34, 34, 35, 35,
	36, 36, 37, 37, 38, 38, 39, 40, 40, 40,
	41, 32, 32, 33, 33, 7, 7, 20, 20, 61,
	61, 58, 58, 58, 58, 58, 58, 58, 58, 58,
	58, 58, 58, 59, 59, 60, 60, 71, 74, 74,
	75, 73, 73, 72, 72, 79, 79, 53, 53, 50,
	50, 51, 51, 76, 76, 77, 77, 78, 8, 8,
	9, 9, 14, 14, 14, 14, 49, 49, 55, 52,
	52, 57, 54, 70, 70, 70, 70, 67, 69, 68,
	56, 56, 56, 85, 85, 85, 92, 92, 92, 92,
	82, 82, 82, 82, 82, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 83,
	83, 83, 83, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 84, 84, 84, 84, 84, 84, 84, 84, 84,
	84, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87, 87, 87, 87, 87, 87, 87, 87, 87, 87,
	87,
}
var sqlR2 = []int{

	0, 1, 1, 1, 0, 2, 2, 0, 1, 3,
	2, 1, 2, 2, 3, 2, 0, 1, 1, 2,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 3,
	3, 5, 2, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 3, 3,
	2, 2, 3, 5, 4, 6, 3, 5, 4, 6,
	4, 6, 5, 7, 3, 2, 4, 2, 3, 4,
	3, 4, 3, 4, 1, 1, 4, 1, 1, 1,
	3, 3, 4, 4, 7, 5, 2, 2, 0, 1,
	2, 0, 1, 3, 1, 1, 3, 3, 1, 2,
	4, 4, 1, 1, 9, 9, 1, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 3, 1, 3,
	4, 3, 3, 0, 1, 3, 1, 2, 0, 1,
	3, 1, 0, 1, 2, 3, 2, 4, 2, 3,
	2, 0, 0, 0, 2, 2, 1, 1, 1, 0,
	2, 5, 2, 3, 1, 1, 1, 1, 3, 0,
	1, 1, 1, 1, 1, 2, 3, 2, 0, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 4, 1, 4, 5, 1, 2,
	4, 2, 0, 1, 0, 1, 2, 2, 2, 1,
	2, 0, 2, 1, 1, 1, 3, 3, 1, 0,
	1, 3, 3, 2, 1, 1, 1, 3, 1, 1,
	3, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var sqlChk = []int{

	-1000, -1, -2, -3, -4, -6, -5, 453, 332, -7,
	405, -23, -22, 267, -3, -4, -12, -10, 29, 124,
	456, -78, 453, -43, -34, -44, 156, -36, -37, -45,
	220, 151, 259, -46, 55, 454, 454, -8, -9, -14,
	-15, 446, -16, 444, 445, -59, 247, 437, -79, -70,
	453, -71, -4, 11, 263, -56, -67, -69, 383, 149,
	60, 6, -83, -84, 12, 8, 21, 22, 23, 24,
	25, 26, 27, 28, 30, 31, 32, 40, 41, 43,
	44, 46, 47, 48, 55, 56, 57, 58, 59, 62,
	63, 66, 68, 69, 70, 71, 76, 77, 78, 79,
	81, 82, 83, 85, 86, 87, 88, 89, 90, 93,
	94, 95, 103, 104, 105, 106, 107, 108, 111, 113,
	115, 116, 117, 118, 119, 121, 122, 123, 126, 127,
	128, 129, 130, 132, 133, 134, 136, 137, 138, 140,
	141, 142, 143, 145, 146, 147, 150, 152, 153, 155,
	157, 159, 163, 164, 165, 167, 171, 173, 174, 175,
	176, 177, 179, 180, 181, 182, 184, 185, 186, 187,
	188, 189, 191, 194, 195, 196, 197, 203, 206, 208,
	209, 210, 211, 212, 215, 218, 221, 222, 223, 226,
	227, 228, 229, 230, 231, 232, 233, 234, 235, 236,
	237, 238, 239, 240, 244, 245, 248, 249, 251, 254,
	256, 257, 258, 260, 264, 265, 268, 271, 274, 275,
	276, 277, 278, 279, 280, 282, 283, 285, 288, 289,
	287, 291, 292, 293, 294, 295, 296, 297, 298, 300,
	301, 302, 303, 305, 306, 307, 308, 309, 310, 311,
	312, 313, 314, 315, 317, 318, 320, 321, 322, 324,
	325, 326, 327, 328, 329, 330, 331, 333, 334, 335,
	336, 337, 339, 340, 342, 343, 345, 346, 348, 350,
	351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
	363, 364, 366, 368, 369, 370, 371, 372, 378, 379,
	381, 384, 385, 386, 387, 388, 389, 390, 393, 394,
	395, 396, 397, 400, 401, 402, 403, 404, 408, 410,
	411, 412, 413, 416, 419, 420, 421, 422, 423, 424,
	434, 435, 436, 49, 50, 52, 53, 64, 65, 72,
	109, 110, 144, 148, 154, 168, 170, 193, 198, 199,
	201, 216, 241, 243, 246, 253, 255, 269, 273, 284,
	286, 299, 323, 341, 347, 361, 374, 375, 380, 382,
	405, 406, 425, 426, 427, 428, 429, 430, 431, 432,
	433, -9, 261, -78, -77, -76, -15, 112, -35, -34,
	-42, -43, -45, 156, 298, 397, 245, 342, 208, -37,
	-36, -38, -15, 29, -33, 153, 244, -39, -41, -15,
	-16, -48, 257, -24, -21, -15, -27, 456, 14, 73,
	43, 444, 445, 446, 447, 448, 449, 440, 441, 442,
	18, 19, 20, -59, 35, 266, 219, 437, 178, 344,
	204, 205, 250, 38, 6, 263, -15, -15, -15, -15,
	-15, -15, -4, 405, 453, -50, -53, 455, -72, -15,
	-27, 453, 456, 454, 262, 208, 342, -40, -68, 453,
	-67, -32, 323, 324, -47, 251, 346, -49, -55, -56,
	263, 456, 399, -25, 39, 120, -17, 161, -14, -90,
	-91, -88, -89, -85, 198, 199, 347, 50, 299, 53,
	6, -83, -86, 45, 51, 74, 80, 92, 99, 160,
	162, 178, 192, 204, 205, 207, 217, 219, 242, 250,
	270, 272, 319, 344, 367, 409, -80, -56, 374, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, 219, 178, 344, -15, 376,
	252, 247, 383, 149, 393, -82, 6, -83, -84, -86,
	-87, 29, 33, 34, 35, 36, 37, 38, 39, 42,
	54, 60, 61, 67, 73, 75, 84, 91, 96, 97,
	98, 100, 101, 102, 112, 114, 120, 124, 125, 131,
	135, 139, 149, 151, 156, 158, 161, 166, 169, 172,
	183, 190, 200, 202, 213, 214, 220, 224, 225, 247,
	252, 259, 261, 262, 266, 267, 281, 290, 304, 316,
	332, 338, 349, 362, 365, 373, 376, 377, 383, 391,
	392, 398, 399, 407, 414, 415, 417, 418, 454, 5,
	-53, -54, 446, -82, -74, -75, 414, -17, -11, -15,
	-76, 397, -32, -15, 228, 456, -21, -60, -61, 263,
	11, -58, 444, 445, 446, 447, 448, 449, 440, 441,
	442, 18, 19, 20, -26, 438, -20, 415, -13, -19,
	-15, -30, -31, 453, -81, 455, 436, 137, -15, -15,
	376, 137, -15, 252, 383, 149, 393, -51, 454, -73,
	-75, 131, -15, -20, 456, 454, 262, 454, -55, -26,
	453, 153, 212, -62, 169, -15, 456, 92, 242, 207,
	38, 6, -11, 455, -54, -15, -15, 137, 137, -15,
	-15, 137, -53, 135, -15, 373, -62, -15, 5, -65,
	172, 55, -13, 207, 207, -13, 6, 454, -54, -15,
	-15, 137, -15, -15, -65, 454, -28, -15, -63, -64,
	-15, -13, -13, 399, 261, -15, -28, 456, 453, -15,
	-64, -18, 6, 456, 454, 6,
}
var sqlDef = []int{

	0, -2, 1, 94, -2, -2, 116, 0, 114, 106,
	0, -2, 0, 0, 0, 103, 209, 0, 113, 111,
	0, 165, 0, 149, 132, 129, 0, 146, 147, 133,
	0, 0, 0, 141, 0, 96, 97, 107, 208, 210,
	214, 215, 28, 0, 0, 0, 0, 0, 74, 75,
	0, 77, 78, 183, 393, 195, 223, 224, 225, 226,
	194, 230, 231, 232, 227, 228, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274, 275, 276, 277, 278,
	279, 280, 281, 282, 283, 284, 285, 286, 287, 288,
	289, 290, 291, 292, 293, 294, 295, 296, 297, 298,
	299, 300, 301, 302, 303, 304, 305, 306, 307, 308,
	309, 310, 311, 312, 313, 314, 315, 316, 317, 318,
	319, 320, 321, 322, 323, 324, 325, 326, 327, 328,
	329, 330, 331, 332, 333, 334, 335, 336, 337, 338,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 348,
	349, 350, 351, 352, 353, 354, 355, 356, 357, 358,
	359, 360, 361, 362, 363, 364, 365, 366, 367, 368,
	369, 370, 371, 372, 373, 374, 375, 376, 377, 378,
	379, 380, 381, 382, 383, 384, 385, 386, 387, 388,
	389, 390, 391, 392, 394, 395, 396, 397, 398, 399,
	400, 401, 402, 403, 404, 405, 406, 407, 408, 409,
	410, 411, 412, 413, 414, 415, 416, 417, 418, 419,
	420, 421, 422, 423, 424, 425, 426, 427, 428, 429,
	430, 431, 432, 433, 434, 435, 436, 437, 438, 439,
	440, 441, 442, 443, 444, 445, 446, 447, 448, 449,
	450, 451, 452, 453, 454, 455, 456, 457, 458, 459,
	460, 461, 462, 463, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 476, 477, 478, 479,
	480, 481, 482, 483, 484, 485, 486, 487, 488, 489,
	490, 491, 492, 493, 494, 495, 496, 497, 498, 499,
	500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
	510, 511, 512, 513, 514, 515, 516, 517, 518, 519,
	520, 521, 522, 523, 524, 525, 526, 527, 528, 529,
	530, 531, 532, 533, 534, 535, 536, 537, 538, 539,
	540, 541, 542, 543, 544, 545, 546, 547, 548, 549,
	550, 551, 552, 553, 554, 555, 556, 557, 558, 559,
	560, 107, 0, 166, 0, 205, 203, 204, 100, 148,
	101, 131, 134, 0, 0, 136, 0, 138, 0, 144,
	145, 150, 154, 155, 159, 163, 164, 152, 0, 156,
	-2, 91, 0, 117, 118, 4, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 67, 0, 213, 0, 32, 33, 47, 50,
	51, 0, -2, 550, 0, 196, 199, 0, 0, 193,
	88, 0, 0, 207, 130, 0, 139, 0, 157, 0,
	229, 153, 161, 162, 135, 89, 0, 140, 216, 218,
	393, 0, 0, 7, 2, 3, 168, 0, 211, 29,
	16, 17, 18, 21, 22, 23, 24, 25, 26, 27,
	233, 234, 235, 561, 562, 563, 564, 565, 566, 567,
	568, 569, 570, 571, 572, 573, 574, 575, 576, 577,
	578, 579, 580, 581, 582, 583, 30, 11, 0, 34,
	35, 36, 37, 38, 39, -2, -2, -2, -2, -2,
	-2, 46, 48, 49, -2, 0, 0, 0, -2, 0,
	64, 0, 68, 70, 72, 212, 240, 241, 242, 243,
	244, 584, 585, 586, 587, 588, 589, 590, 591, 592,
	593, 594, 595, 596, 597, 598, 599, 600, 601, 602,
	603, 604, 605, 606, 607, 608, 609, 610, 611, 612,
	613, 614, 615, 616, 617, 618, 619, 620, 621, 622,
	623, 624, 625, 626, 627, 628, 629, 630, 631, 632,
	633, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 644, 645, 646, 647, 648, 649, 650, 651, 652,
	653, 654, 655, 656, 657, 658, 659, 660, 201, 0,
	200, 197, 198, 222, 192, 188, 0, 168, 0, 92,
	206, 137, 0, 0, 90, 0, 119, 7, 185, 0,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 121, 0, 123, 0, 86, 87,
	8, 15, 19, 0, 12, 0, 0, 0, -2, -2,
	0, 0, -2, 66, 69, 71, 73, 76, 184, 0,
	189, 0, 0, 123, 0, 112, 151, 158, 217, 120,
	0, 5, 6, 128, 0, 167, 0, 0, 0, 0,
	0, 10, 0, 0, 13, 31, -2, 0, 0, -2,
	-2, 0, 202, 187, 191, 0, 128, 93, 0, 142,
	0, 0, 81, 0, 0, 0, 9, 20, 14, -2,
	-2, 0, -2, 190, 142, 186, 104, 127, 122, 124,
	126, 82, 83, 0, 0, -2, 105, 0, 0, 85,
	125, 0, 79, 0, 84, 80,
}
var sqlTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 448, 3, 3,
	453, 454, 446, 444, 456, 445, 455, 447, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	440, 442, 441, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 451, 3, 452, 449,
}
var sqlTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = []int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 443, 57783, 450, 0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var sqlDebug = 0

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(sqlToknames) {
		if sqlToknames[c-4] != "" {
			return sqlToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqllex1(lex sqlLexer, lval *sqlSymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		c = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			c = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		c = sqlTok3[i+0]
		if c == char {
			c = sqlTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(c), uint(char))
	}
	return c
}

func sqlParse(sqllex sqlLexer) int {
	var sqln int
	var sqllval sqlSymType
	var sqlVAL sqlSymType
	sqlS := make([]sqlSymType, sqlMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlchar := -1
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqlchar), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlchar < 0 {
		sqlchar = sqllex1(sqllex, &sqllval)
	}
	sqln += sqlchar
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqlchar { /* valid shift */
		sqlchar = -1
		sqlVAL = sqllval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlchar < 0 {
			sqlchar = sqllex1(sqllex, &sqllval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqlchar {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error("syntax error")
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqlchar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqlchar))
			}
			if sqlchar == sqlEofCode {
				goto ret1
			}
			sqlchar = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		//line sql.y:300
		{
			sqlVAL.sqlSelect = sqlS[sqlpt-0].sqlSelect
			sqllex.(*sqlLex).stmt = sqlS[sqlpt-0].sqlSelect
		}
	case 2:
		//line sql.y:306
		{
			sqlVAL.str = "asc"
		}
	case 3:
		//line sql.y:307
		{
			sqlVAL.str = "desc"
		}
	case 4:
		//line sql.y:308
		{
			sqlVAL.str = ""
		}
	case 5:
		//line sql.y:311
		{
			sqlVAL.str = "first"
		}
	case 6:
		//line sql.y:312
		{
			sqlVAL.str = "last"
		}
	case 7:
		//line sql.y:313
		{
			sqlVAL.str = ""
		}
	case 8:
		//line sql.y:317
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 9:
		//line sql.y:321
		{
			sqlVAL.expr = AliasedExpr{Expr: sqlS[sqlpt-2].expr, Alias: sqlS[sqlpt-0].str}
		}
	case 10:
		//line sql.y:325
		{
			sqlVAL.expr = AliasedExpr{Expr: sqlS[sqlpt-1].expr, Alias: sqlS[sqlpt-0].str}
		}
	case 11:
		//line sql.y:331
		{
			sqlVAL.qualifiedName = QualifiedName{sqlS[sqlpt-0].str}
		}
	case 12:
		//line sql.y:333
		{
			sqlVAL.qualifiedName = QualifiedName{sqlS[sqlpt-1].str}
			sqlVAL.qualifiedName = append(sqlVAL.qualifiedName, sqlS[sqlpt-0].qualifiedName...)
		}
	case 13:
		//line sql.y:340
		{
			sqlVAL.qualifiedName = QualifiedName{sqlS[sqlpt-0].str}
		}
	case 14:
		//line sql.y:344
		{
			sqlVAL.qualifiedName = append(sqlS[sqlpt-2].qualifiedName, sqlS[sqlpt-0].str)
		}
	case 15:
		//line sql.y:362
		{
			sqlVAL.pgType = sqlS[sqlpt-1].pgType
		}
	case 16:
		//line sql.y:388
		{
			sqlVAL.placeholder = nil
		}
	case 17:
		//line sql.y:391
		{
			sqlVAL.pgType = sqlS[sqlpt-0].pgType
		}
	case 18:
		//line sql.y:392
		{
			sqlVAL.pgType = sqlS[sqlpt-0].pgType
		}
	case 19:
		//line sql.y:439
		{
			sqlVAL.pgType = PgType{Name: sqlS[sqlpt-1].str}
		}
	case 20:
		//line sql.y:450
		{
			sqlVAL.placeholder = sqlS[sqlpt-1].fields
		}
	case 21:
		//line sql.y:451
		{
			sqlVAL.placeholder = nil
		}
	case 22:
		//line sql.y:458
		{
			sqlVAL.pgType = PgType{Name: "int"}
		}
	case 23:
		//line sql.y:462
		{
			sqlVAL.pgType = PgType{Name: "integer"}
		}
	case 24:
		//line sql.y:466
		{
			sqlVAL.pgType = PgType{Name: "smallint"}
		}
	case 25:
		//line sql.y:470
		{
			sqlVAL.pgType = PgType{Name: "bigint"}
		}
	case 26:
		//line sql.y:474
		{
			sqlVAL.pgType = PgType{Name: "real"}
		}
	case 27:
		//line sql.y:508
		{
			sqlVAL.pgType = PgType{Name: "bool"}
		}
	case 28:
		sqlVAL.expr = sqlS[sqlpt-0].expr
	case 29:
		//line sql.y:564
		{
			sqlVAL.expr = TypecastExpr{Expr: sqlS[sqlpt-2].expr, Typename: sqlS[sqlpt-0].pgType}
		}
	case 30:
		//line sql.y:568
		{
			sqlVAL.expr = CollateExpr{Expr: sqlS[sqlpt-2].expr, Collation: sqlS[sqlpt-0].qualifiedName}
		}
	case 31:
		//line sql.y:572
		{
			sqlVAL.expr = AtTimeZoneExpr{Expr: sqlS[sqlpt-4].expr, TimeZone: sqlS[sqlpt-0].expr}
		}
	case 32:
		//line sql.y:585
		{
			sqlVAL.expr = UnaryExpr{Operator: "+", Expr: sqlS[sqlpt-0].expr}
		}
	case 33:
		//line sql.y:589
		{
			sqlVAL.expr = UnaryExpr{Operator: "-", Expr: sqlS[sqlpt-0].expr}
		}
	case 34:
		//line sql.y:593
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "+", Right: sqlS[sqlpt-0].expr}
		}
	case 35:
		//line sql.y:597
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "-", Right: sqlS[sqlpt-0].expr}
		}
	case 36:
		//line sql.y:601
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "*", Right: sqlS[sqlpt-0].expr}
		}
	case 37:
		//line sql.y:605
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "/", Right: sqlS[sqlpt-0].expr}
		}
	case 38:
		//line sql.y:609
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "%", Right: sqlS[sqlpt-0].expr}
		}
	case 39:
		//line sql.y:613
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "^", Right: sqlS[sqlpt-0].expr}
		}
	case 40:
		//line sql.y:617
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "<", Right: sqlS[sqlpt-0].expr}
		}
	case 41:
		//line sql.y:621
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: ">", Right: sqlS[sqlpt-0].expr}
		}
	case 42:
		//line sql.y:625
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "=", Right: sqlS[sqlpt-0].expr}
		}
	case 43:
		//line sql.y:629
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "<=", Right: sqlS[sqlpt-0].expr}
		}
	case 44:
		//line sql.y:633
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: ">=", Right: sqlS[sqlpt-0].expr}
		}
	case 45:
		//line sql.y:637
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "!=", Right: sqlS[sqlpt-0].expr}
		}
	case 46:
		//line sql.y:641
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: sqlS[sqlpt-1].str, Right: sqlS[sqlpt-0].expr}
		}
	case 47:
		//line sql.y:645
		{
			sqlVAL.expr = UnaryExpr{Operator: sqlS[sqlpt-1].str, Expr: sqlS[sqlpt-0].expr}
		}
	case 48:
		//line sql.y:652
		{
			sqlVAL.expr = BooleanExpr{Left: sqlS[sqlpt-2].expr, Operator: "and", Right: sqlS[sqlpt-0].expr}
		}
	case 49:
		//line sql.y:656
		{
			sqlVAL.expr = BooleanExpr{Left: sqlS[sqlpt-2].expr, Operator: "or", Right: sqlS[sqlpt-0].expr}
		}
	case 50:
		//line sql.y:660
		{
			sqlVAL.expr = NotExpr{Expr: sqlS[sqlpt-0].expr}
		}
	case 51:
		//line sql.y:664
		{
			sqlVAL.expr = NotExpr{Expr: sqlS[sqlpt-0].expr}
		}
	case 52:
		//line sql.y:668
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-2].expr, Operator: "like", Right: sqlS[sqlpt-0].expr}
		}
	case 53:
		//line sql.y:672
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-4].expr, Operator: "like", Right: sqlS[sqlpt-2].expr, Escape: sqlS[sqlpt-0].expr}
		}
	case 54:
		//line sql.y:676
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-3].expr, Operator: "not like", Right: sqlS[sqlpt-0].expr}
		}
	case 55:
		//line sql.y:680
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-5].expr, Operator: "not like", Right: sqlS[sqlpt-2].expr, Escape: sqlS[sqlpt-0].expr}
		}
	case 56:
		//line sql.y:684
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-2].expr, Operator: "ilike", Right: sqlS[sqlpt-0].expr}
		}
	case 57:
		//line sql.y:688
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-4].expr, Operator: "ilike", Right: sqlS[sqlpt-2].expr, Escape: sqlS[sqlpt-0].expr}
		}
	case 58:
		//line sql.y:692
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-3].expr, Operator: "not ilike", Right: sqlS[sqlpt-0].expr}
		}
	case 59:
		//line sql.y:696
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-5].expr, Operator: "not ilike", Right: sqlS[sqlpt-2].expr, Escape: sqlS[sqlpt-0].expr}
		}
	case 60:
		//line sql.y:701
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-3].expr, Operator: "similar to", Right: sqlS[sqlpt-0].expr}
		}
	case 61:
		//line sql.y:705
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-5].expr, Operator: "similar to", Right: sqlS[sqlpt-2].expr, Escape: sqlS[sqlpt-0].expr}
		}
	case 62:
		//line sql.y:709
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-4].expr, Operator: "not similar to", Right: sqlS[sqlpt-0].expr}
		}
	case 63:
		//line sql.y:713
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-6].expr, Operator: "not similar to", Right: sqlS[sqlpt-2].expr, Escape: sqlS[sqlpt-0].expr}
		}
	case 64:
		//line sql.y:726
		{
			sqlVAL.expr = IsNullExpr{Expr: sqlS[sqlpt-2].expr}
		}
	case 65:
		//line sql.y:730
		{
			sqlVAL.expr = IsNullExpr{Expr: sqlS[sqlpt-1].expr}
		}
	case 66:
		//line sql.y:734
		{
			sqlVAL.expr = IsNullExpr{Expr: sqlS[sqlpt-3].expr, Not: true}
		}
	case 67:
		//line sql.y:738
		{
			sqlVAL.expr = IsNullExpr{Expr: sqlS[sqlpt-1].expr, Not: true}
		}
	case 68:
		//line sql.y:745
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlS[sqlpt-2].expr, Op: "true"}
		}
	case 69:
		//line sql.y:749
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlS[sqlpt-3].expr, Not: true, Op: "true"}
		}
	case 70:
		//line sql.y:753
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlS[sqlpt-2].expr, Op: "false"}
		}
	case 71:
		//line sql.y:757
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlS[sqlpt-3].expr, Not: true, Op: "false"}
		}
	case 72:
		//line sql.y:761
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlS[sqlpt-2].expr, Op: "unknown"}
		}
	case 73:
		//line sql.y:765
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlS[sqlpt-3].expr, Not: true, Op: "unknown"}
		}
	case 74:
		//line sql.y:794
		{
			sqlVAL.expr = sqlS[sqlpt-0].qualifiedName
		}
	case 75:
		//line sql.y:795
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 76:
		//line sql.y:802
		{
			sqlVAL.expr = ParenExpr{Expr: sqlS[sqlpt-2].expr}
		}
	case 77:
		//line sql.y:805
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 78:
		//line sql.y:811
		{
			sqlVAL.expr = sqlS[sqlpt-0].sqlSelect
		}
	case 79:
		//line sql.y:826
		{
			sqlVAL.identifiers = []string{sqlS[sqlpt-0].str}
		}
	case 80:
		//line sql.y:830
		{
			sqlVAL.identifiers = append(sqlS[sqlpt-2].identifiers, sqlS[sqlpt-0].str)
		}
	case 81:
		//line sql.y:836
		{
			sqlVAL.expr = JoinExpr{Left: sqlS[sqlpt-2].expr, Join: ",", Right: sqlS[sqlpt-0].expr}
		}
	case 82:
		//line sql.y:840
		{
			sqlVAL.expr = JoinExpr{Left: sqlS[sqlpt-3].expr, Join: "cross join", Right: sqlS[sqlpt-0].expr}
		}
	case 83:
		//line sql.y:844
		{
			sqlVAL.expr = JoinExpr{Left: sqlS[sqlpt-3].expr, Join: "natural join", Right: sqlS[sqlpt-0].expr}
		}
	case 84:
		//line sql.y:848
		{
			sqlVAL.expr = JoinExpr{Left: sqlS[sqlpt-6].expr, Join: "join", Right: sqlS[sqlpt-4].expr, Using: sqlS[sqlpt-1].identifiers}
		}
	case 85:
		//line sql.y:852
		{
			sqlVAL.expr = JoinExpr{Left: sqlS[sqlpt-4].expr, Join: "join", Right: sqlS[sqlpt-2].expr, On: sqlS[sqlpt-0].expr}
		}
	case 86:
		//line sql.y:858
		{
			sqlVAL.fromClause = &FromClause{Expr: sqlS[sqlpt-0].expr}
		}
	case 87:
		//line sql.y:862
		{
			sqlVAL.fromClause = &FromClause{Expr: sqlS[sqlpt-0].expr}
		}
	case 88:
		//line sql.y:865
		{
			sqlVAL.fromClause = nil
		}
	case 89:
		//line sql.y:869
		{
			sqlVAL.str = "nowait"
		}
	case 90:
		//line sql.y:870
		{
			sqlVAL.str = "skip locked"
		}
	case 91:
		//line sql.y:871
		{
			sqlVAL.str = ""
		}
	case 92:
		//line sql.y:876
		{
			sqlVAL.fields = []Expr{sqlS[sqlpt-0].expr}
		}
	case 93:
		//line sql.y:880
		{
			sqlVAL.fields = append(sqlS[sqlpt-2].fields, sqlS[sqlpt-0].expr)
		}
	case 94:
		sqlVAL.sqlSelect = sqlS[sqlpt-0].sqlSelect
	case 95:
		sqlVAL.sqlSelect = sqlS[sqlpt-0].sqlSelect
	case 96:
		//line sql.y:937
		{
			sqlS[sqlpt-1].sqlSelect.ParenWrapped = true
			sqlVAL.sqlSelect = sqlS[sqlpt-1].sqlSelect
		}
	case 97:
		//line sql.y:941
		{
			sqlVAL.sqlSelect = sqlS[sqlpt-1].sqlSelect
		}
	case 98:
		sqlVAL.sqlSelect = sqlS[sqlpt-0].sqlSelect
	case 99:
		//line sql.y:946
		{
			sqlS[sqlpt-1].sqlSelect.OrderClause = sqlS[sqlpt-0].orderClause
			sqlVAL.sqlSelect = sqlS[sqlpt-1].sqlSelect
		}
	case 100:
		//line sql.y:951
		{
			sqlS[sqlpt-3].sqlSelect.OrderClause = sqlS[sqlpt-2].orderClause
			sqlS[sqlpt-3].sqlSelect.LockingClause = sqlS[sqlpt-1].lockingClause
			sqlS[sqlpt-3].sqlSelect.LimitClause = sqlS[sqlpt-0].limitClause
			sqlVAL.sqlSelect = sqlS[sqlpt-3].sqlSelect
		}
	case 101:
		//line sql.y:958
		{
			sqlS[sqlpt-3].sqlSelect.OrderClause = sqlS[sqlpt-2].orderClause
			sqlS[sqlpt-3].sqlSelect.LimitClause = sqlS[sqlpt-1].limitClause
			sqlS[sqlpt-3].sqlSelect.LockingClause = sqlS[sqlpt-0].lockingClause
			sqlVAL.sqlSelect = sqlS[sqlpt-3].sqlSelect
		}
	case 102:
		sqlVAL.sqlSelect = sqlS[sqlpt-0].sqlSelect
	case 103:
		sqlVAL.sqlSelect = sqlS[sqlpt-0].sqlSelect
	case 104:
		//line sql.y:996
		{
			ss := &SelectStmt{}
			ss.TargetList = sqlS[sqlpt-6].fields
			ss.FromClause = sqlS[sqlpt-4].fromClause
			ss.WhereClause = sqlS[sqlpt-3].whereClause
			ss.GroupByClause = sqlS[sqlpt-2].groupByClause
			ss.HavingClause = sqlS[sqlpt-1].expr
			sqlVAL.sqlSelect = ss
		}
	case 105:
		//line sql.y:1008
		{
			ss := &SelectStmt{}
			ss.DistinctList = sqlS[sqlpt-7].fields
			ss.TargetList = sqlS[sqlpt-6].fields
			ss.FromClause = sqlS[sqlpt-4].fromClause
			ss.WhereClause = sqlS[sqlpt-3].whereClause
			ss.GroupByClause = sqlS[sqlpt-2].groupByClause
			ss.HavingClause = sqlS[sqlpt-1].expr
			sqlVAL.sqlSelect = ss
		}
	case 106:
		sqlVAL.sqlSelect = sqlS[sqlpt-0].sqlSelect
	case 107:
		//line sql.y:1053
		{
			sqlVAL.placeholder = nil
		}
	case 108:
		//line sql.y:1058
		{
			sqlVAL.boolean = true
		}
	case 109:
		//line sql.y:1059
		{
			sqlVAL.boolean = false
		}
	case 110:
		//line sql.y:1060
		{
			sqlVAL.boolean = false
		}
	case 111:
		//line sql.y:1065
		{
			sqlVAL.fields = make([]Expr, 0)
		}
	case 112:
		//line sql.y:1066
		{
			sqlVAL.fields = sqlS[sqlpt-1].fields
		}
	case 113:
		//line sql.y:1069
		{
			sqlVAL.placeholder = nil
		}
	case 114:
		//line sql.y:1070
		{
			sqlVAL.placeholder = nil
		}
	case 115:
		//line sql.y:1073
		{
			sqlVAL.orderClause = sqlS[sqlpt-0].orderClause
		}
	case 116:
		//line sql.y:1074
		{
			sqlVAL.orderClause = nil
		}
	case 117:
		//line sql.y:1077
		{
			sqlVAL.orderClause = sqlS[sqlpt-0].orderClause
		}
	case 118:
		//line sql.y:1081
		{
			sqlVAL.orderClause = &OrderClause{Exprs: []OrderExpr{sqlS[sqlpt-0].orderExpr}}
		}
	case 119:
		//line sql.y:1085
		{
			sqlS[sqlpt-2].orderClause.Exprs = append(sqlS[sqlpt-2].orderClause.Exprs, sqlS[sqlpt-0].orderExpr)
			sqlVAL.orderClause = sqlS[sqlpt-2].orderClause
		}
	case 120:
		//line sql.y:1093
		{
			sqlVAL.orderExpr = OrderExpr{Expr: sqlS[sqlpt-3].expr, Using: sqlS[sqlpt-1].str, Nulls: sqlS[sqlpt-0].str}
		}
	case 121:
		//line sql.y:1097
		{
			sqlVAL.orderExpr = OrderExpr{Expr: sqlS[sqlpt-2].expr, Order: sqlS[sqlpt-1].str, Nulls: sqlS[sqlpt-0].str}
		}
	case 122:
		//line sql.y:1122
		{
			sqlVAL.groupByClause = &GroupByClause{Exprs: sqlS[sqlpt-0].fields}
		}
	case 123:
		//line sql.y:1123
		{
			sqlVAL.groupByClause = nil
		}
	case 124:
		//line sql.y:1127
		{
			sqlVAL.fields = []Expr{sqlS[sqlpt-0].expr}
		}
	case 125:
		//line sql.y:1131
		{
			sqlVAL.fields = append(sqlS[sqlpt-2].fields, sqlS[sqlpt-0].expr)
		}
	case 126:
		sqlVAL.expr = sqlS[sqlpt-0].expr
	case 127:
		//line sql.y:1144
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 128:
		//line sql.y:1145
		{
			sqlVAL.expr = nil
		}
	case 129:
		//line sql.y:1148
		{
			sqlVAL.lockingClause = sqlS[sqlpt-0].lockingClause
		}
	case 130:
		//line sql.y:1149
		{
			sqlVAL.lockingClause = nil
		}
	case 131:
		//line sql.y:1152
		{
			sqlVAL.lockingClause = sqlS[sqlpt-0].lockingClause
		}
	case 132:
		//line sql.y:1153
		{
			sqlVAL.lockingClause = nil
		}
	case 133:
		//line sql.y:1157
		{
			sqlVAL.lockingClause = &LockingClause{Locks: []LockingItem{sqlS[sqlpt-0].lockingItem}}
		}
	case 134:
		//line sql.y:1161
		{
			sqlS[sqlpt-1].lockingClause.Locks = append(sqlS[sqlpt-1].lockingClause.Locks, sqlS[sqlpt-0].lockingItem)
			sqlVAL.lockingClause = sqlS[sqlpt-1].lockingClause
		}
	case 135:
		//line sql.y:1168
		{
			sqlVAL.lockingItem = LockingItem{Strength: sqlS[sqlpt-2].str, LockedRels: sqlS[sqlpt-1].identifiers, WaitPolicy: sqlS[sqlpt-0].str}
		}
	case 136:
		//line sql.y:1173
		{
			sqlVAL.str = "update"
		}
	case 137:
		//line sql.y:1174
		{
			sqlVAL.str = "no key update"
		}
	case 138:
		//line sql.y:1175
		{
			sqlVAL.str = "share"
		}
	case 139:
		//line sql.y:1176
		{
			sqlVAL.str = "key share"
		}
	case 140:
		//line sql.y:1179
		{
			sqlVAL.identifiers = sqlS[sqlpt-0].identifiers
		}
	case 141:
		//line sql.y:1180
		{
			sqlVAL.identifiers = nil
		}
	case 142:
		//line sql.y:1188
		{
			sqlVAL.placeholder = nil
		}
	case 143:
		//line sql.y:1192
		{
			panic("TODO")
		}
	case 144:
		//line sql.y:1198
		{
			sqlVAL.limitClause = &LimitClause{Limit: sqlS[sqlpt-1].expr, Offset: sqlS[sqlpt-0].expr}
		}
	case 145:
		//line sql.y:1202
		{
			sqlVAL.limitClause = &LimitClause{Limit: sqlS[sqlpt-0].expr, Offset: sqlS[sqlpt-1].expr}
		}
	case 146:
		//line sql.y:1206
		{
			sqlVAL.limitClause = &LimitClause{Limit: sqlS[sqlpt-0].expr}
		}
	case 147:
		//line sql.y:1210
		{
			sqlVAL.limitClause = &LimitClause{Offset: sqlS[sqlpt-0].expr}
		}
	case 148:
		sqlVAL.limitClause = sqlS[sqlpt-0].limitClause
	case 149:
		//line sql.y:1217
		{
			sqlVAL.limitClause = nil
		}
	case 150:
		//line sql.y:1221
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 151:
		//line sql.y:1226
		{
			sqlVAL.expr = sqlS[sqlpt-2].expr
		}
	case 152:
		//line sql.y:1232
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 153:
		//line sql.y:1237
		{
			sqlVAL.expr = sqlS[sqlpt-1].expr
		}
	case 154:
		//line sql.y:1242
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 155:
		//line sql.y:1244
		{
			sqlVAL.expr = nil
		}
	case 156:
		//line sql.y:1249
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 157:
		//line sql.y:1258
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 158:
		//line sql.y:1259
		{
			sqlVAL.expr = sqlS[sqlpt-1].expr
		}
	case 159:
		//line sql.y:1260
		{
			sqlVAL.expr = IntegerLiteral("1")
		}
	case 160:
		//line sql.y:1267
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 161:
		//line sql.y:1271
		{
			sqlVAL.placeholder = 0
		}
	case 162:
		//line sql.y:1272
		{
			sqlVAL.placeholder = 0
		}
	case 163:
		//line sql.y:1275
		{
			sqlVAL.placeholder = 0
		}
	case 164:
		//line sql.y:1276
		{
			sqlVAL.placeholder = 0
		}
	case 165:
		//line sql.y:1280
		{
			sqlVAL.sqlSelect = &SelectStmt{ValuesClause: ValuesClause{sqlS[sqlpt-0].valuesRow}}
		}
	case 166:
		//line sql.y:1284
		{
			sqlS[sqlpt-2].sqlSelect.ValuesClause = append(sqlS[sqlpt-2].sqlSelect.ValuesClause, sqlS[sqlpt-0].valuesRow)
			sqlVAL.sqlSelect = sqlS[sqlpt-2].sqlSelect
		}
	case 167:
		//line sql.y:1302
		{
			sqlVAL.whereClause = &WhereClause{Expr: sqlS[sqlpt-0].expr}
		}
	case 168:
		//line sql.y:1303
		{
			sqlVAL.whereClause = nil
		}
	case 169:
		//line sql.y:1308
		{
			sqlVAL.str = string(sqlS[sqlpt-0].str)
		}
	case 170:
		//line sql.y:1309
		{
			sqlVAL.str = string(sqlS[sqlpt-0].str)
		}
	case 171:
		//line sql.y:1312
		{
			sqlVAL.str = "+"
		}
	case 172:
		//line sql.y:1313
		{
			sqlVAL.str = "-"
		}
	case 173:
		//line sql.y:1314
		{
			sqlVAL.str = "*"
		}
	case 174:
		//line sql.y:1315
		{
			sqlVAL.str = "/"
		}
	case 175:
		//line sql.y:1316
		{
			sqlVAL.str = "%"
		}
	case 176:
		//line sql.y:1317
		{
			sqlVAL.str = "^"
		}
	case 177:
		//line sql.y:1318
		{
			sqlVAL.str = "<"
		}
	case 178:
		//line sql.y:1319
		{
			sqlVAL.str = ">"
		}
	case 179:
		//line sql.y:1320
		{
			sqlVAL.str = "="
		}
	case 180:
		//line sql.y:1321
		{
			sqlVAL.str = "<="
		}
	case 181:
		//line sql.y:1322
		{
			sqlVAL.str = ">="
		}
	case 182:
		//line sql.y:1323
		{
			sqlVAL.str = "<>"
		}
	case 183:
		//line sql.y:1326
		{
			sqlVAL.str = string(sqlS[sqlpt-0].str)
		}
	case 184:
		//line sql.y:1327
		{
			sqlVAL.str = sqlS[sqlpt-1].str
		}
	case 185:
		//line sql.y:1330
		{
			sqlVAL.str = string(sqlS[sqlpt-0].str)
		}
	case 186:
		//line sql.y:1331
		{
			sqlVAL.str = sqlS[sqlpt-1].str
		}
	case 187:
		//line sql.y:1343
		{
			sqlVAL.expr = CaseExpr{CaseArg: sqlS[sqlpt-3].expr, WhenClauses: sqlS[sqlpt-2].whenClauses, Default: sqlS[sqlpt-1].expr}
		}
	case 188:
		//line sql.y:1350
		{
			sqlVAL.whenClauses = []WhenClause{sqlS[sqlpt-0].whenClause}
		}
	case 189:
		//line sql.y:1354
		{
			sqlVAL.whenClauses = append(sqlS[sqlpt-1].whenClauses, sqlS[sqlpt-0].whenClause)
		}
	case 190:
		//line sql.y:1360
		{
			sqlVAL.whenClause = WhenClause{When: sqlS[sqlpt-2].expr, Then: sqlS[sqlpt-0].expr}
		}
	case 191:
		//line sql.y:1365
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 192:
		//line sql.y:1366
		{
			sqlVAL.expr = nil
		}
	case 193:
		//line sql.y:1369
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 194:
		//line sql.y:1370
		{
			sqlVAL.expr = nil
		}
	case 195:
		//line sql.y:1374
		{
			sqlVAL.qualifiedName = QualifiedName{sqlS[sqlpt-0].str}
		}
	case 196:
		//line sql.y:1378
		{
			sqlVAL.qualifiedName = QualifiedName{sqlS[sqlpt-1].str}
			sqlVAL.qualifiedName = append(sqlVAL.qualifiedName, sqlS[sqlpt-0].identifiers...)
		}
	case 197:
		//line sql.y:1387
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 198:
		//line sql.y:1391
		{
			sqlVAL.str = "*"
		}
	case 199:
		//line sql.y:1410
		{
			sqlVAL.identifiers = []string{sqlS[sqlpt-0].str}
		}
	case 200:
		//line sql.y:1411
		{
			sqlVAL.identifiers = append(sqlS[sqlpt-1].identifiers, sqlS[sqlpt-0].str)
		}
	case 201:
		//line sql.y:1414
		{
			sqlVAL.identifiers = nil
		}
	case 202:
		//line sql.y:1416
		{
			if sqlS[sqlpt-1].identifiers != nil {
				sqlVAL.identifiers = append(sqlS[sqlpt-1].identifiers, sqlS[sqlpt-0].str)
			} else {
				sqlVAL.identifiers = []string{sqlS[sqlpt-0].str}
			}
		}
	case 203:
		//line sql.y:1432
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 204:
		//line sql.y:1433
		{
			sqlVAL.expr = DefaultExpr(true)
		}
	case 205:
		//line sql.y:1437
		{
			sqlVAL.valuesRow = ValuesRow{sqlS[sqlpt-0].expr}
		}
	case 206:
		//line sql.y:1441
		{
			sqlVAL.valuesRow = append(sqlS[sqlpt-2].valuesRow, sqlS[sqlpt-0].expr)
		}
	case 207:
		//line sql.y:1452
		{
			sqlVAL.valuesRow = sqlS[sqlpt-1].valuesRow
		}
	case 208:
		//line sql.y:1463
		{
			sqlVAL.fields = sqlS[sqlpt-0].fields
		}
	case 209:
		//line sql.y:1464
		{
			sqlVAL.fields = nil
		}
	case 210:
		//line sql.y:1467
		{
			sqlVAL.fields = []Expr{sqlS[sqlpt-0].expr}
		}
	case 211:
		//line sql.y:1469
		{
			sqlVAL.fields = append(sqlS[sqlpt-2].fields, sqlS[sqlpt-0].expr)
		}
	case 212:
		//line sql.y:1475
		{
			sqlVAL.expr = AliasedExpr{Expr: sqlS[sqlpt-2].expr, Alias: sqlS[sqlpt-0].str}
		}
	case 213:
		//line sql.y:1479
		{
			sqlVAL.expr = AliasedExpr{Expr: sqlS[sqlpt-1].expr, Alias: sqlS[sqlpt-0].str}
		}
	case 214:
		sqlVAL.expr = sqlS[sqlpt-0].expr
	case 215:
		//line sql.y:1484
		{
			sqlVAL.expr = QualifiedName{"*"}
		}
	case 216:
		//line sql.y:1498
		{
			sqlVAL.identifiers = []string{sqlS[sqlpt-0].str}
		}
	case 217:
		//line sql.y:1502
		{
			sqlVAL.identifiers = append(sqlS[sqlpt-2].identifiers, sqlS[sqlpt-0].str)
		}
	case 218:
		//line sql.y:1515
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 219:
		//line sql.y:1547
		{
			sqlVAL.identifiers = []string{sqlS[sqlpt-0].str}
		}
	case 220:
		//line sql.y:1549
		{
			sqlVAL.identifiers = append(sqlS[sqlpt-2].identifiers, sqlS[sqlpt-0].str)
		}
	case 221:
		//line sql.y:1554
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 222:
		//line sql.y:1557
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 223:
		//line sql.y:1564
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 224:
		//line sql.y:1571
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 225:
		//line sql.y:1584
		{
			sqlVAL.expr = BoolLiteral(true)
		}
	case 226:
		//line sql.y:1588
		{
			sqlVAL.expr = BoolLiteral(false)
		}
	case 227:
		//line sql.y:1595
		{
			sqlVAL.expr = IntegerLiteral(sqlS[sqlpt-0].str)
		}
	case 228:
		//line sql.y:1596
		{
			sqlVAL.expr = StringLiteral(sqlS[sqlpt-0].str)
		}
	case 229:
		//line sql.y:1599
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 230:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 231:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 232:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 233:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 234:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 235:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 240:
		//line sql.y:1642
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 241:
		//line sql.y:1643
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 242:
		//line sql.y:1644
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 243:
		//line sql.y:1645
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 244:
		//line sql.y:1646
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 245:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 246:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 247:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 248:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 249:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 250:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 251:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 252:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 253:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 254:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 255:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 256:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 257:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 258:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 259:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 260:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 261:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 262:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 263:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 264:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 265:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 266:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 267:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 268:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 269:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 270:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 271:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 272:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 273:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 274:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 275:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 276:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 277:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 278:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 279:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 280:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 281:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 282:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 283:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 284:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 285:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 286:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 287:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 288:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 289:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 290:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 291:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 292:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 293:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 294:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 295:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 296:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 297:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 298:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 299:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 300:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 301:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 302:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 303:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 304:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 305:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 306:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 307:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 308:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 309:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 310:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 311:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 312:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 313:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 314:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 315:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 316:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 317:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 318:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 319:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 320:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 321:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 322:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 323:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 324:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 325:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 326:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 327:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 328:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 329:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 330:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 331:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 332:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 333:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 334:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 335:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 336:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 337:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 338:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 339:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 340:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 341:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 342:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 343:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 344:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 345:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 346:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 347:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 348:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 349:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 350:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 351:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 352:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 353:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 354:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 355:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 356:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 357:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 358:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 359:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 360:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 361:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 362:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 363:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 364:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 365:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 366:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 367:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 368:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 369:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 370:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 371:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 372:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 373:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 374:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 375:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 376:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 377:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 378:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 379:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 380:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 381:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 382:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 383:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 384:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 385:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 386:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 387:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 388:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 389:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 390:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 391:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 392:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 393:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 394:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 395:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 396:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 397:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 398:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 399:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 400:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 401:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 402:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 403:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 404:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 405:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 406:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 407:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 408:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 409:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 410:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 411:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 412:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 413:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 414:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 415:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 416:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 417:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 418:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 419:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 420:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 421:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 422:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 423:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 424:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 425:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 426:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 427:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 428:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 429:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 430:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 431:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 432:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 433:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 434:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 435:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 436:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 437:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 438:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 439:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 440:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 441:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 442:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 443:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 444:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 445:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 446:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 447:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 448:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 449:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 450:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 451:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 452:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 453:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 454:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 455:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 456:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 457:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 458:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 459:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 460:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 461:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 462:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 463:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 464:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 465:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 466:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 467:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 468:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 469:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 470:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 471:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 472:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 473:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 474:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 475:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 476:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 477:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 478:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 479:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 480:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 481:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 482:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 483:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 484:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 485:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 486:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 487:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 488:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 489:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 490:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 491:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 492:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 493:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 494:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 495:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 496:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 497:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 498:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 499:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 500:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 501:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 502:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 503:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 504:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 505:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 506:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 507:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 508:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 509:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 510:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 511:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 512:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 513:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 514:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 515:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 516:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 517:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 518:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 519:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 520:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 521:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 522:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 523:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 524:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 525:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 526:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 527:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 528:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 529:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 530:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 531:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 532:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 533:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 534:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 535:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 536:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 537:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 538:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 539:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 540:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 541:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 542:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 543:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 544:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 545:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 546:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 547:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 548:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 549:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 550:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 551:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 552:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 553:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 554:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 555:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 556:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 557:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 558:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 559:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 560:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 561:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 562:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 563:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 564:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 565:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 566:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 567:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 568:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 569:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 570:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 571:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 572:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 573:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 574:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 575:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 576:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 577:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 578:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 579:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 580:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 581:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 582:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 583:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 584:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 585:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 586:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 587:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 588:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 589:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 590:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 591:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 592:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 593:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 594:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 595:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 596:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 597:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 598:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 599:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 600:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 601:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 602:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 603:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 604:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 605:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 606:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 607:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 608:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 609:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 610:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 611:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 612:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 613:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 614:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 615:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 616:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 617:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 618:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 619:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 620:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 621:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 622:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 623:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 624:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 625:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 626:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 627:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 628:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 629:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 630:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 631:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 632:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 633:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 634:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 635:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 636:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 637:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 638:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 639:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 640:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 641:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 642:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 643:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 644:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 645:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 646:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 647:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 648:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 649:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 650:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 651:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 652:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 653:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 654:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 655:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 656:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 657:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 658:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 659:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 660:
		sqlVAL.str = sqlS[sqlpt-0].str
	}
	goto sqlstack /* stack new state and value */
}

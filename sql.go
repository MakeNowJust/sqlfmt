//line sql.y:2
package main

import __yyfmt__ "fmt"

//line sql.y:3
//line sql.y:7
type sqlSymType struct {
	yys                 int
	sqlSelect           *SelectStmt
	simpleSelect        *SimpleSelect
	fields              []Expr
	expr                Expr
	str                 string
	identifiers         []string
	fromClause          *FromClause
	whereClause         *WhereClause
	orderExpr           OrderExpr
	orderClause         *OrderClause
	groupByClause       *GroupByClause
	limitClause         *LimitClause
	lockingClause       *LockingClause
	lockingItem         LockingItem
	boolean             bool
	placeholder         interface{}
	qualifiedName       QualifiedName
	whenClauses         []WhenClause
	whenClause          WhenClause
	pgType              PgType
	valuesRow           ValuesRow
	valuesClause        ValuesClause
	funcApplication     FuncApplication
	funcArgs            []FuncArg
	funcArg             FuncArg
	filterClause        *FilterClause
	relationExpr        *RelationExpr
	windowDefinitions   []WindowDefinition
	windowDefinition    WindowDefinition
	windowSpecification WindowSpecification
	overClause          *OverClause
	partitionClause     PartitionClause
	frameClause         *FrameClause
	frameBound          *FrameBound
}

const OP = 57346
const any_operator = 57347
const IDENT = 57348
const FCONST = 57349
const SCONST = 57350
const BCONST = 57351
const XCONST = 57352
const Op = 57353
const ICONST = 57354
const PARAM = 57355
const TYPECAST = 57356
const DOT_DOT = 57357
const COLON_EQUALS = 57358
const EQUALS_GREATER = 57359
const LESS_EQUALS = 57360
const GREATER_EQUALS = 57361
const NOT_EQUALS = 57362
const ABORT_P = 57363
const ABSOLUTE_P = 57364
const ACCESS = 57365
const ACTION = 57366
const ADD_P = 57367
const ADMIN = 57368
const AFTER = 57369
const AGGREGATE = 57370
const ALL = 57371
const ALSO = 57372
const ALTER = 57373
const ALWAYS = 57374
const ANALYSE = 57375
const ANALYZE = 57376
const AND = 57377
const ANY = 57378
const ARRAY = 57379
const AS = 57380
const ASC = 57381
const ASSERTION = 57382
const ASSIGNMENT = 57383
const ASYMMETRIC = 57384
const AT = 57385
const ATTRIBUTE = 57386
const AUTHORIZATION = 57387
const BACKWARD = 57388
const BEFORE = 57389
const BEGIN_P = 57390
const BETWEEN = 57391
const BIGINT = 57392
const BINARY = 57393
const BIT = 57394
const BOOLEAN_P = 57395
const BOTH = 57396
const BY = 57397
const CACHE = 57398
const CALLED = 57399
const CASCADE = 57400
const CASCADED = 57401
const CASE = 57402
const CAST = 57403
const CATALOG_P = 57404
const CHAIN = 57405
const CHAR_P = 57406
const CHARACTER = 57407
const CHARACTERISTICS = 57408
const CHECK = 57409
const CHECKPOINT = 57410
const CLASS = 57411
const CLOSE = 57412
const CLUSTER = 57413
const COALESCE = 57414
const COLLATE = 57415
const COLLATION = 57416
const COLUMN = 57417
const COMMENT = 57418
const COMMENTS = 57419
const COMMIT = 57420
const COMMITTED = 57421
const CONCURRENTLY = 57422
const CONFIGURATION = 57423
const CONFLICT = 57424
const CONNECTION = 57425
const CONSTRAINT = 57426
const CONSTRAINTS = 57427
const CONTENT_P = 57428
const CONTINUE_P = 57429
const CONVERSION_P = 57430
const COPY = 57431
const COST = 57432
const CREATE = 57433
const CROSS = 57434
const CSV = 57435
const CUBE = 57436
const CURRENT_P = 57437
const CURRENT_CATALOG = 57438
const CURRENT_DATE = 57439
const CURRENT_ROLE = 57440
const CURRENT_SCHEMA = 57441
const CURRENT_TIME = 57442
const CURRENT_TIMESTAMP = 57443
const CURRENT_USER = 57444
const CURSOR = 57445
const CYCLE = 57446
const DATA_P = 57447
const DATABASE = 57448
const DAY_P = 57449
const DEALLOCATE = 57450
const DEC = 57451
const DECIMAL_P = 57452
const DECLARE = 57453
const DEFAULT = 57454
const DEFAULTS = 57455
const DEFERRABLE = 57456
const DEFERRED = 57457
const DEFINER = 57458
const DELETE_P = 57459
const DELIMITER = 57460
const DELIMITERS = 57461
const DESC = 57462
const DICTIONARY = 57463
const DISABLE_P = 57464
const DISCARD = 57465
const DISTINCT = 57466
const DO = 57467
const DOCUMENT_P = 57468
const DOMAIN_P = 57469
const DOUBLE_P = 57470
const DROP = 57471
const EACH = 57472
const ELSE = 57473
const ENABLE_P = 57474
const ENCODING = 57475
const ENCRYPTED = 57476
const END_P = 57477
const ENUM_P = 57478
const ESCAPE = 57479
const EVENT = 57480
const EXCEPT = 57481
const EXCLUDE = 57482
const EXCLUDING = 57483
const EXCLUSIVE = 57484
const EXECUTE = 57485
const EXISTS = 57486
const EXPLAIN = 57487
const EXTENSION = 57488
const EXTERNAL = 57489
const EXTRACT = 57490
const FALSE_P = 57491
const FAMILY = 57492
const FETCH = 57493
const FILTER = 57494
const FIRST_P = 57495
const FLOAT_P = 57496
const FOLLOWING = 57497
const FOR = 57498
const FORCE = 57499
const FOREIGN = 57500
const FORWARD = 57501
const FREEZE = 57502
const FROM = 57503
const FULL = 57504
const FUNCTION = 57505
const FUNCTIONS = 57506
const GLOBAL = 57507
const GRANT = 57508
const GRANTED = 57509
const GREATEST = 57510
const GROUP_P = 57511
const GROUPING = 57512
const HANDLER = 57513
const HAVING = 57514
const HEADER_P = 57515
const HOLD = 57516
const HOUR_P = 57517
const IDENTITY_P = 57518
const IF_P = 57519
const ILIKE = 57520
const IMMEDIATE = 57521
const IMMUTABLE = 57522
const IMPLICIT_P = 57523
const IMPORT_P = 57524
const IN_P = 57525
const INCLUDING = 57526
const INCREMENT = 57527
const INDEX = 57528
const INDEXES = 57529
const INHERIT = 57530
const INHERITS = 57531
const INITIALLY = 57532
const INLINE_P = 57533
const INNER_P = 57534
const INOUT = 57535
const INPUT_P = 57536
const INSENSITIVE = 57537
const INSERT = 57538
const INSTEAD = 57539
const INT_P = 57540
const INTEGER = 57541
const INTERSECT = 57542
const INTERVAL = 57543
const INTO = 57544
const INVOKER = 57545
const IS = 57546
const ISNULL = 57547
const ISOLATION = 57548
const JOIN = 57549
const KEY = 57550
const LABEL = 57551
const LANGUAGE = 57552
const LARGE_P = 57553
const LAST_P = 57554
const LATERAL_P = 57555
const LEADING = 57556
const LEAKPROOF = 57557
const LEAST = 57558
const LEFT = 57559
const LEVEL = 57560
const LIKE = 57561
const LIMIT = 57562
const LISTEN = 57563
const LOAD = 57564
const LOCAL = 57565
const LOCALTIME = 57566
const LOCALTIMESTAMP = 57567
const LOCATION = 57568
const LOCK_P = 57569
const LOCKED = 57570
const LOGGED = 57571
const MAPPING = 57572
const MATCH = 57573
const MATERIALIZED = 57574
const MAXVALUE = 57575
const MINUTE_P = 57576
const MINVALUE = 57577
const MODE = 57578
const MONTH_P = 57579
const MOVE = 57580
const NAME_P = 57581
const NAMES = 57582
const NATIONAL = 57583
const NATURAL = 57584
const NCHAR = 57585
const NEXT = 57586
const NO = 57587
const NONE = 57588
const NOT = 57589
const NOTHING = 57590
const NOTIFY = 57591
const NOTNULL = 57592
const NOWAIT = 57593
const NULL_P = 57594
const NULLIF = 57595
const NULLS_P = 57596
const NUMERIC = 57597
const OBJECT_P = 57598
const OF = 57599
const OFF = 57600
const OFFSET = 57601
const OIDS = 57602
const ON = 57603
const ONLY = 57604
const OPERATOR = 57605
const OPTION = 57606
const OPTIONS = 57607
const OR = 57608
const ORDER = 57609
const ORDINALITY = 57610
const OUT_P = 57611
const OUTER_P = 57612
const OVER = 57613
const OVERLAPS = 57614
const OVERLAY = 57615
const OWNED = 57616
const OWNER = 57617
const PARSER = 57618
const PARTIAL = 57619
const PARTITION = 57620
const PASSING = 57621
const PASSWORD = 57622
const PLACING = 57623
const PLANS = 57624
const POLICY = 57625
const POSITION = 57626
const PRECEDING = 57627
const PRECISION = 57628
const PRESERVE = 57629
const PREPARE = 57630
const PREPARED = 57631
const PRIMARY = 57632
const PRIOR = 57633
const PRIVILEGES = 57634
const PROCEDURAL = 57635
const PROCEDURE = 57636
const PROGRAM = 57637
const QUOTE = 57638
const RANGE = 57639
const READ = 57640
const REAL = 57641
const REASSIGN = 57642
const RECHECK = 57643
const RECURSIVE = 57644
const REF = 57645
const REFERENCES = 57646
const REFRESH = 57647
const REINDEX = 57648
const RELATIVE_P = 57649
const RELEASE = 57650
const RENAME = 57651
const REPEATABLE = 57652
const REPLACE = 57653
const REPLICA = 57654
const RESET = 57655
const RESTART = 57656
const RESTRICT = 57657
const RETURNING = 57658
const RETURNS = 57659
const REVOKE = 57660
const RIGHT = 57661
const ROLE = 57662
const ROLLBACK = 57663
const ROLLUP = 57664
const ROW = 57665
const ROWS = 57666
const RULE = 57667
const SAVEPOINT = 57668
const SCHEMA = 57669
const SCROLL = 57670
const SEARCH = 57671
const SECOND_P = 57672
const SECURITY = 57673
const SELECT = 57674
const SEQUENCE = 57675
const SEQUENCES = 57676
const SERIALIZABLE = 57677
const SERVER = 57678
const SESSION = 57679
const SESSION_USER = 57680
const SET = 57681
const SETS = 57682
const SETOF = 57683
const SHARE = 57684
const SHOW = 57685
const SIMILAR = 57686
const SIMPLE = 57687
const SKIP = 57688
const SMALLINT = 57689
const SNAPSHOT = 57690
const SOME = 57691
const SQL_P = 57692
const STABLE = 57693
const STANDALONE_P = 57694
const START = 57695
const STATEMENT = 57696
const STATISTICS = 57697
const STDIN = 57698
const STDOUT = 57699
const STORAGE = 57700
const STRICT_P = 57701
const STRIP_P = 57702
const SUBSTRING = 57703
const SYMMETRIC = 57704
const SYSID = 57705
const SYSTEM_P = 57706
const TABLE = 57707
const TABLES = 57708
const TABLESAMPLE = 57709
const TABLESPACE = 57710
const TEMP = 57711
const TEMPLATE = 57712
const TEMPORARY = 57713
const TEXT_P = 57714
const THEN = 57715
const TIME = 57716
const TIMESTAMP = 57717
const TO = 57718
const TRAILING = 57719
const TRANSACTION = 57720
const TRANSFORM = 57721
const TREAT = 57722
const TRIGGER = 57723
const TRIM = 57724
const TRUE_P = 57725
const TRUNCATE = 57726
const TRUSTED = 57727
const TYPE_P = 57728
const TYPES_P = 57729
const UNBOUNDED = 57730
const UNCOMMITTED = 57731
const UNENCRYPTED = 57732
const UNION = 57733
const UNIQUE = 57734
const UNKNOWN = 57735
const UNLISTEN = 57736
const UNLOGGED = 57737
const UNTIL = 57738
const UPDATE = 57739
const USER = 57740
const USING = 57741
const VACUUM = 57742
const VALID = 57743
const VALIDATE = 57744
const VALIDATOR = 57745
const VALUE_P = 57746
const VALUES = 57747
const VARCHAR = 57748
const VARIADIC = 57749
const VARYING = 57750
const VERBOSE = 57751
const VERSION_P = 57752
const VIEW = 57753
const VIEWS = 57754
const VOLATILE = 57755
const WHEN = 57756
const WHERE = 57757
const WHITESPACE_P = 57758
const WINDOW = 57759
const WITH = 57760
const WITHIN = 57761
const WITHOUT = 57762
const WORK = 57763
const WRAPPER = 57764
const WRITE = 57765
const XML_P = 57766
const XMLATTRIBUTES = 57767
const XMLCONCAT = 57768
const XMLELEMENT = 57769
const XMLEXISTS = 57770
const XMLFOREST = 57771
const XMLPARSE = 57772
const XMLPI = 57773
const XMLROOT = 57774
const XMLSERIALIZE = 57775
const YEAR_P = 57776
const YES_P = 57777
const ZONE = 57778
const NOT_LA = 57779
const NULLS_LA = 57780
const WITH_LA = 57781
const POSTFIXOP = 57782
const UMINUS = 57783

var sqlToknames = []string{
	"OP",
	"any_operator",
	"IDENT",
	"FCONST",
	"SCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ABORT_P",
	"ABSOLUTE_P",
	"ACCESS",
	"ACTION",
	"ADD_P",
	"ADMIN",
	"AFTER",
	"AGGREGATE",
	"ALL",
	"ALSO",
	"ALTER",
	"ALWAYS",
	"ANALYSE",
	"ANALYZE",
	"AND",
	"ANY",
	"ARRAY",
	"AS",
	"ASC",
	"ASSERTION",
	"ASSIGNMENT",
	"ASYMMETRIC",
	"AT",
	"ATTRIBUTE",
	"AUTHORIZATION",
	"BACKWARD",
	"BEFORE",
	"BEGIN_P",
	"BETWEEN",
	"BIGINT",
	"BINARY",
	"BIT",
	"BOOLEAN_P",
	"BOTH",
	"BY",
	"CACHE",
	"CALLED",
	"CASCADE",
	"CASCADED",
	"CASE",
	"CAST",
	"CATALOG_P",
	"CHAIN",
	"CHAR_P",
	"CHARACTER",
	"CHARACTERISTICS",
	"CHECK",
	"CHECKPOINT",
	"CLASS",
	"CLOSE",
	"CLUSTER",
	"COALESCE",
	"COLLATE",
	"COLLATION",
	"COLUMN",
	"COMMENT",
	"COMMENTS",
	"COMMIT",
	"COMMITTED",
	"CONCURRENTLY",
	"CONFIGURATION",
	"CONFLICT",
	"CONNECTION",
	"CONSTRAINT",
	"CONSTRAINTS",
	"CONTENT_P",
	"CONTINUE_P",
	"CONVERSION_P",
	"COPY",
	"COST",
	"CREATE",
	"CROSS",
	"CSV",
	"CUBE",
	"CURRENT_P",
	"CURRENT_CATALOG",
	"CURRENT_DATE",
	"CURRENT_ROLE",
	"CURRENT_SCHEMA",
	"CURRENT_TIME",
	"CURRENT_TIMESTAMP",
	"CURRENT_USER",
	"CURSOR",
	"CYCLE",
	"DATA_P",
	"DATABASE",
	"DAY_P",
	"DEALLOCATE",
	"DEC",
	"DECIMAL_P",
	"DECLARE",
	"DEFAULT",
	"DEFAULTS",
	"DEFERRABLE",
	"DEFERRED",
	"DEFINER",
	"DELETE_P",
	"DELIMITER",
	"DELIMITERS",
	"DESC",
	"DICTIONARY",
	"DISABLE_P",
	"DISCARD",
	"DISTINCT",
	"DO",
	"DOCUMENT_P",
	"DOMAIN_P",
	"DOUBLE_P",
	"DROP",
	"EACH",
	"ELSE",
	"ENABLE_P",
	"ENCODING",
	"ENCRYPTED",
	"END_P",
	"ENUM_P",
	"ESCAPE",
	"EVENT",
	"EXCEPT",
	"EXCLUDE",
	"EXCLUDING",
	"EXCLUSIVE",
	"EXECUTE",
	"EXISTS",
	"EXPLAIN",
	"EXTENSION",
	"EXTERNAL",
	"EXTRACT",
	"FALSE_P",
	"FAMILY",
	"FETCH",
	"FILTER",
	"FIRST_P",
	"FLOAT_P",
	"FOLLOWING",
	"FOR",
	"FORCE",
	"FOREIGN",
	"FORWARD",
	"FREEZE",
	"FROM",
	"FULL",
	"FUNCTION",
	"FUNCTIONS",
	"GLOBAL",
	"GRANT",
	"GRANTED",
	"GREATEST",
	"GROUP_P",
	"GROUPING",
	"HANDLER",
	"HAVING",
	"HEADER_P",
	"HOLD",
	"HOUR_P",
	"IDENTITY_P",
	"IF_P",
	"ILIKE",
	"IMMEDIATE",
	"IMMUTABLE",
	"IMPLICIT_P",
	"IMPORT_P",
	"IN_P",
	"INCLUDING",
	"INCREMENT",
	"INDEX",
	"INDEXES",
	"INHERIT",
	"INHERITS",
	"INITIALLY",
	"INLINE_P",
	"INNER_P",
	"INOUT",
	"INPUT_P",
	"INSENSITIVE",
	"INSERT",
	"INSTEAD",
	"INT_P",
	"INTEGER",
	"INTERSECT",
	"INTERVAL",
	"INTO",
	"INVOKER",
	"IS",
	"ISNULL",
	"ISOLATION",
	"JOIN",
	"KEY",
	"LABEL",
	"LANGUAGE",
	"LARGE_P",
	"LAST_P",
	"LATERAL_P",
	"LEADING",
	"LEAKPROOF",
	"LEAST",
	"LEFT",
	"LEVEL",
	"LIKE",
	"LIMIT",
	"LISTEN",
	"LOAD",
	"LOCAL",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"LOCATION",
	"LOCK_P",
	"LOCKED",
	"LOGGED",
	"MAPPING",
	"MATCH",
	"MATERIALIZED",
	"MAXVALUE",
	"MINUTE_P",
	"MINVALUE",
	"MODE",
	"MONTH_P",
	"MOVE",
	"NAME_P",
	"NAMES",
	"NATIONAL",
	"NATURAL",
	"NCHAR",
	"NEXT",
	"NO",
	"NONE",
	"NOT",
	"NOTHING",
	"NOTIFY",
	"NOTNULL",
	"NOWAIT",
	"NULL_P",
	"NULLIF",
	"NULLS_P",
	"NUMERIC",
	"OBJECT_P",
	"OF",
	"OFF",
	"OFFSET",
	"OIDS",
	"ON",
	"ONLY",
	"OPERATOR",
	"OPTION",
	"OPTIONS",
	"OR",
	"ORDER",
	"ORDINALITY",
	"OUT_P",
	"OUTER_P",
	"OVER",
	"OVERLAPS",
	"OVERLAY",
	"OWNED",
	"OWNER",
	"PARSER",
	"PARTIAL",
	"PARTITION",
	"PASSING",
	"PASSWORD",
	"PLACING",
	"PLANS",
	"POLICY",
	"POSITION",
	"PRECEDING",
	"PRECISION",
	"PRESERVE",
	"PREPARE",
	"PREPARED",
	"PRIMARY",
	"PRIOR",
	"PRIVILEGES",
	"PROCEDURAL",
	"PROCEDURE",
	"PROGRAM",
	"QUOTE",
	"RANGE",
	"READ",
	"REAL",
	"REASSIGN",
	"RECHECK",
	"RECURSIVE",
	"REF",
	"REFERENCES",
	"REFRESH",
	"REINDEX",
	"RELATIVE_P",
	"RELEASE",
	"RENAME",
	"REPEATABLE",
	"REPLACE",
	"REPLICA",
	"RESET",
	"RESTART",
	"RESTRICT",
	"RETURNING",
	"RETURNS",
	"REVOKE",
	"RIGHT",
	"ROLE",
	"ROLLBACK",
	"ROLLUP",
	"ROW",
	"ROWS",
	"RULE",
	"SAVEPOINT",
	"SCHEMA",
	"SCROLL",
	"SEARCH",
	"SECOND_P",
	"SECURITY",
	"SELECT",
	"SEQUENCE",
	"SEQUENCES",
	"SERIALIZABLE",
	"SERVER",
	"SESSION",
	"SESSION_USER",
	"SET",
	"SETS",
	"SETOF",
	"SHARE",
	"SHOW",
	"SIMILAR",
	"SIMPLE",
	"SKIP",
	"SMALLINT",
	"SNAPSHOT",
	"SOME",
	"SQL_P",
	"STABLE",
	"STANDALONE_P",
	"START",
	"STATEMENT",
	"STATISTICS",
	"STDIN",
	"STDOUT",
	"STORAGE",
	"STRICT_P",
	"STRIP_P",
	"SUBSTRING",
	"SYMMETRIC",
	"SYSID",
	"SYSTEM_P",
	"TABLE",
	"TABLES",
	"TABLESAMPLE",
	"TABLESPACE",
	"TEMP",
	"TEMPLATE",
	"TEMPORARY",
	"TEXT_P",
	"THEN",
	"TIME",
	"TIMESTAMP",
	"TO",
	"TRAILING",
	"TRANSACTION",
	"TRANSFORM",
	"TREAT",
	"TRIGGER",
	"TRIM",
	"TRUE_P",
	"TRUNCATE",
	"TRUSTED",
	"TYPE_P",
	"TYPES_P",
	"UNBOUNDED",
	"UNCOMMITTED",
	"UNENCRYPTED",
	"UNION",
	"UNIQUE",
	"UNKNOWN",
	"UNLISTEN",
	"UNLOGGED",
	"UNTIL",
	"UPDATE",
	"USER",
	"USING",
	"VACUUM",
	"VALID",
	"VALIDATE",
	"VALIDATOR",
	"VALUE_P",
	"VALUES",
	"VARCHAR",
	"VARIADIC",
	"VARYING",
	"VERBOSE",
	"VERSION_P",
	"VIEW",
	"VIEWS",
	"VOLATILE",
	"WHEN",
	"WHERE",
	"WHITESPACE_P",
	"WINDOW",
	"WITH",
	"WITHIN",
	"WITHOUT",
	"WORK",
	"WRAPPER",
	"WRITE",
	"XML_P",
	"XMLATTRIBUTES",
	"XMLCONCAT",
	"XMLELEMENT",
	"XMLEXISTS",
	"XMLFOREST",
	"XMLPARSE",
	"XMLPI",
	"XMLROOT",
	"XMLSERIALIZE",
	"YEAR_P",
	"YES_P",
	"ZONE",
	"NOT_LA",
	"NULLS_LA",
	"WITH_LA",
	"'<'",
	"'>'",
	"'='",
	"POSTFIXOP",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'^'",
	"UMINUS",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
}
var sqlStatenames = []string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlMaxDepth = 200

//line sql.y:2432

// The parser expects the lexer to return 0 on EOF.  Give it a name
// for clarity.
const eof = 0

//line yacctab:1
var sqlExca = []int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 4,
	1, 111,
	-2, 119,
	-1, 5,
	1, 114,
	454, 114,
	-2, 118,
	-1, 12,
	1, 115,
	454, 115,
	-2, 135,
	-1, 397,
	16, 285,
	17, 285,
	453, 285,
	-2, 282,
	-1, 398,
	16, 286,
	17, 286,
	453, 286,
	-2, 283,
	-1, 459,
	323, 205,
	324, 205,
	-2, 29,
	-1, 506,
	139, 119,
	151, 119,
	156, 119,
	200, 119,
	220, 119,
	259, 119,
	267, 119,
	391, 119,
	-2, 82,
	-1, 510,
	453, 273,
	-2, 245,
	-1, 568,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 41,
	-1, 569,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 42,
	-1, 570,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 43,
	-1, 571,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 44,
	-1, 572,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 45,
	-1, 573,
	18, 0,
	19, 0,
	20, 0,
	440, 0,
	441, 0,
	442, 0,
	-2, 46,
	-1, 577,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 53,
	-1, 581,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 57,
	-1, 692,
	453, 272,
	-2, 8,
	-1, 735,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 55,
	-1, 736,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 59,
	-1, 739,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 61,
	-1, 787,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 54,
	-1, 790,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 63,
	-1, 791,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 58,
	-1, 794,
	204, 0,
	205, 0,
	250, 0,
	-2, 75,
	-1, 821,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 56,
	-1, 822,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 60,
	-1, 824,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 62,
	-1, 825,
	204, 0,
	205, 0,
	250, 0,
	-2, 76,
	-1, 844,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 64,
	-1, 866,
	178, 0,
	219, 0,
	344, 0,
	437, 0,
	-2, 565,
}

const sqlNprod = 713
const sqlPrivate = 57344

var sqlTokenNames []string
var sqlStates []string

const sqlLast = 9233

var sqlAct = []int{

	727, 865, 752, 838, 849, 834, 694, 864, 13, 811,
	725, 403, 31, 689, 721, 675, 774, 723, 685, 679,
	511, 372, 372, 468, 530, 434, 543, 371, 402, 677,
	389, 778, 874, 26, 873, 819, 17, 765, 766, 765,
	765, 28, 522, 858, 521, 851, 702, 538, 471, 24,
	512, 8, 784, 732, 863, 833, 831, 830, 28, 802,
	761, 431, 747, 696, 368, 399, 367, 390, 754, 852,
	771, 730, 683, 349, 509, 519, 517, 7, 430, 722,
	472, 733, 835, 377, 10, 724, 470, 755, 680, 750,
	843, 698, 447, 447, 588, 398, 744, 737, 582, 561,
	374, 354, 16, 5, 355, 356, 30, 579, 6, 474,
	350, 878, 525, 351, 534, 855, 531, 532, 828, 586,
	877, 742, 682, 30, 11, 17, 472, 767, 523, 445,
	445, 428, 358, 359, 461, 701, 358, 353, 387, 473,
	524, 472, 856, 454, 358, 816, 780, 815, 578, 15,
	812, 772, 775, 793, 796, 474, 745, 544, 442, 353,
	516, 362, 22, 15, 846, 813, 707, 859, 366, 882,
	474, 348, 7, 718, 719, 720, 472, 762, 763, 472,
	387, 779, 443, 472, 758, 473, 472, 484, 485, 486,
	881, 12, 370, 862, 547, 818, 429, 810, 673, 387,
	473, 357, 472, 361, 488, 357, 484, 485, 486, 535,
	773, 546, 474, 357, 427, 474, 549, 584, 548, 364,
	365, 401, 583, 488, 740, 757, 446, 446, 842, 594,
	17, 474, 18, 3, 455, 473, 472, 731, 559, 380,
	359, 854, 473, 827, 359, 473, 799, 681, 848, 384,
	876, 396, 433, 678, 748, 513, 363, 23, 383, 381,
	391, 473, 527, 837, 705, 474, 704, 708, 691, 746,
	510, 536, 460, 580, 533, 360, 352, 439, 457, 526,
	456, 444, 444, 450, 437, 25, 515, 453, 729, 728,
	540, 467, 726, 861, 20, 473, 21, 369, 9, 2,
	1, 0, 0, 0, 0, 492, 0, 0, 0, 0,
	385, 4, 0, 0, 0, 0, 0, 0, 19, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 490, 492, 0, 0,
	435, 0, 0, 585, 14, 741, 0, 0, 451, 0,
	458, 0, 0, 587, 0, 743, 492, 469, 387, 0,
	0, 472, 680, 494, 495, 0, 500, 501, 502, 503,
	504, 0, 0, 505, 0, 0, 0, 0, 490, 0,
	499, 0, 494, 495, 0, 777, 514, 0, 0, 0,
	474, 0, 0, 0, 0, 0, 0, 490, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 706, 496,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	473, 0, 499, 0, 0, 489, 0, 0, 496, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 499, 0, 0, 489, 0, 487, 449, 441, 448,
	459, 0, 440, 28, 438, 463, 520, 0, 463, 463,
	462, 493, 372, 465, 466, 0, 562, 563, 564, 565,
	566, 567, 568, 569, 570, 571, 572, 573, 574, 575,
	576, 577, 28, 581, 823, 537, 0, 0, 0, 545,
	0, 550, 0, 0, 560, 0, 528, 0, 387, 593,
	592, 472, 0, 493, 518, 480, 0, 0, 690, 487,
	695, 529, 435, 0, 593, 592, 0, 589, 30, 700,
	0, 674, 493, 0, 0, 487, 0, 0, 0, 469,
	474, 0, 487, 0, 0, 693, 692, 697, 0, 0,
	0, 699, 0, 487, 0, 0, 0, 30, 477, 478,
	479, 480, 703, 0, 491, 0, 0, 0, 558, 30,
	473, 475, 476, 477, 478, 479, 480, 0, 0, 735,
	736, 0, 0, 739, 487, 487, 487, 487, 487, 487,
	0, 0, 0, 591, 0, 715, 716, 717, 487, 709,
	710, 711, 712, 713, 714, 0, 491, 0, 591, 481,
	482, 483, 0, 475, 476, 477, 478, 479, 480, 0,
	499, 0, 0, 829, 0, 491, 0, 0, 481, 482,
	483, 0, 475, 476, 477, 478, 479, 480, 0, 0,
	0, 0, 768, 0, 0, 0, 487, 487, 487, 487,
	487, 487, 487, 487, 487, 487, 487, 487, 487, 487,
	487, 487, 0, 0, 0, 487, 475, 476, 477, 478,
	479, 480, 464, 0, 0, 464, 464, 0, 0, 0,
	0, 751, 0, 0, 0, 0, 0, 690, 690, 0,
	0, 0, 0, 506, 756, 0, 0, 508, 749, 0,
	0, 0, 0, 0, 0, 759, 760, 0, 0, 0,
	0, 764, 0, 753, 0, 692, 692, 0, 0, 770,
	0, 0, 0, 0, 0, 776, 0, 0, 0, 0,
	0, 695, 0, 28, 786, 787, 769, 783, 790, 791,
	0, 0, 0, 0, 593, 592, 794, 0, 785, 0,
	0, 797, 0, 0, 0, 0, 801, 0, 690, 0,
	499, 0, 0, 806, 807, 0, 809, 795, 804, 805,
	0, 803, 0, 0, 487, 0, 0, 0, 30, 487,
	0, 808, 0, 0, 487, 800, 692, 0, 814, 821,
	822, 817, 0, 824, 825, 0, 593, 592, 30, 826,
	820, 475, 476, 477, 478, 479, 480, 0, 0, 0,
	0, 487, 0, 836, 839, 0, 0, 0, 832, 487,
	487, 0, 0, 487, 844, 0, 840, 841, 591, 0,
	0, 0, 0, 0, 0, 487, 845, 0, 847, 0,
	0, 0, 0, 0, 853, 0, 0, 695, 0, 0,
	30, 0, 839, 857, 0, 860, 869, 869, 0, 0,
	487, 0, 872, 871, 870, 0, 850, 869, 875, 0,
	487, 487, 0, 0, 487, 487, 0, 0, 487, 0,
	591, 487, 0, 869, 883, 487, 0, 0, 0, 850,
	487, 487, 0, 487, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 487, 487, 0, 487, 487,
	487, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	487, 0, 0, 487, 0, 0, 0, 0, 487, 0,
	0, 30, 0, 0, 0, 0, 0, 487, 0, 0,
	590, 475, 476, 477, 478, 479, 480, 0, 0, 0,
	0, 0, 0, 487, 30, 32, 33, 34, 35, 36,
	37, 38, 39, 595, 40, 41, 42, 596, 597, 598,
	599, 600, 601, 602, 43, 44, 603, 45, 46, 404,
	47, 48, 49, 300, 301, 405, 302, 303, 604, 50,
	51, 52, 53, 54, 605, 606, 55, 56, 304, 305,
	57, 607, 58, 59, 60, 61, 306, 608, 406, 609,
	62, 63, 64, 65, 407, 66, 67, 68, 610, 69,
	70, 71, 72, 73, 74, 611, 408, 75, 76, 77,
	612, 613, 614, 409, 615, 616, 617, 78, 79, 80,
	81, 82, 83, 307, 308, 84, 618, 85, 619, 86,
	87, 88, 89, 90, 620, 91, 92, 93, 621, 622,
	94, 95, 96, 97, 98, 623, 99, 100, 101, 624,
	102, 103, 104, 625, 105, 106, 107, 108, 309, 109,
	110, 111, 310, 626, 112, 627, 113, 114, 311, 115,
	628, 116, 629, 117, 410, 630, 411, 118, 119, 120,
	631, 121, 312, 632, 313, 122, 633, 123, 124, 125,
	126, 127, 412, 128, 129, 130, 131, 634, 132, 133,
	134, 135, 136, 137, 635, 138, 413, 314, 139, 140,
	141, 142, 315, 316, 636, 317, 637, 143, 414, 415,
	144, 416, 145, 146, 147, 148, 149, 638, 639, 150,
	318, 417, 151, 418, 640, 152, 153, 154, 641, 642,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 319, 419, 320, 170, 171,
	321, 643, 172, 173, 420, 174, 644, 322, 175, 323,
	176, 177, 178, 645, 179, 646, 647, 180, 181, 182,
	648, 649, 183, 324, 421, 184, 422, 325, 185, 186,
	187, 188, 189, 190, 191, 650, 192, 193, 326, 194,
	327, 197, 195, 196, 651, 198, 199, 200, 201, 202,
	203, 204, 205, 328, 206, 207, 208, 209, 652, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	653, 221, 222, 423, 223, 224, 225, 329, 226, 227,
	228, 229, 230, 231, 232, 233, 654, 234, 235, 236,
	237, 238, 655, 239, 240, 330, 241, 242, 424, 243,
	244, 331, 245, 656, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 332, 657, 257, 258, 658,
	259, 425, 260, 261, 262, 263, 264, 659, 333, 334,
	660, 661, 265, 266, 335, 267, 336, 662, 268, 269,
	270, 271, 272, 273, 274, 663, 664, 275, 276, 277,
	278, 279, 665, 666, 280, 281, 282, 283, 284, 337,
	338, 667, 285, 426, 286, 287, 288, 289, 668, 669,
	290, 670, 671, 291, 292, 293, 294, 295, 296, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 297, 298,
	299, 590, 0, 0, 0, 0, 0, 0, 0, 0,
	676, 0, 0, 0, 0, 0, 32, 33, 34, 35,
	36, 37, 38, 39, 595, 40, 41, 42, 596, 597,
	598, 599, 600, 601, 602, 43, 44, 603, 45, 46,
	404, 47, 48, 49, 300, 301, 405, 302, 303, 604,
	50, 51, 52, 53, 54, 605, 606, 55, 56, 304,
	305, 57, 607, 58, 59, 60, 61, 306, 608, 406,
	609, 62, 63, 64, 65, 407, 66, 67, 68, 610,
	69, 70, 71, 72, 73, 74, 611, 408, 75, 76,
	77, 612, 613, 614, 409, 615, 616, 617, 78, 79,
	80, 81, 82, 83, 307, 308, 84, 618, 85, 619,
	86, 87, 88, 89, 90, 620, 91, 92, 93, 621,
	622, 94, 95, 96, 97, 98, 623, 99, 100, 101,
	624, 102, 103, 104, 625, 105, 106, 107, 108, 309,
	109, 110, 111, 310, 626, 112, 627, 113, 114, 311,
	115, 628, 116, 629, 117, 410, 630, 411, 118, 119,
	120, 631, 121, 312, 632, 313, 122, 633, 123, 124,
	125, 126, 127, 412, 128, 129, 130, 131, 634, 132,
	133, 134, 135, 136, 137, 635, 138, 413, 314, 139,
	140, 141, 142, 315, 316, 636, 317, 637, 143, 414,
	415, 144, 416, 145, 146, 147, 148, 149, 638, 639,
	150, 318, 417, 151, 418, 640, 152, 153, 154, 641,
	642, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 319, 419, 320, 170,
	171, 321, 643, 172, 173, 420, 174, 644, 322, 175,
	323, 176, 177, 178, 645, 179, 646, 647, 180, 181,
	182, 648, 649, 183, 324, 421, 184, 422, 325, 185,
	186, 187, 188, 189, 190, 191, 650, 192, 193, 326,
	194, 327, 197, 195, 196, 651, 198, 199, 200, 201,
	202, 203, 204, 205, 328, 206, 207, 208, 209, 652,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 653, 221, 222, 423, 223, 224, 225, 329, 226,
	227, 228, 229, 230, 231, 232, 233, 654, 234, 235,
	236, 237, 238, 655, 239, 240, 330, 241, 242, 424,
	243, 244, 331, 245, 656, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 332, 657, 257, 258,
	658, 259, 425, 260, 261, 262, 263, 264, 659, 333,
	334, 660, 661, 265, 266, 335, 267, 336, 662, 268,
	269, 270, 271, 272, 273, 274, 663, 664, 275, 276,
	277, 278, 279, 665, 666, 280, 281, 282, 283, 284,
	337, 338, 667, 285, 426, 286, 287, 288, 289, 668,
	669, 290, 670, 671, 291, 292, 293, 294, 295, 296,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 297,
	298, 299, 397, 0, 400, 0, 0, 387, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 33, 34,
	35, 36, 37, 38, 39, 686, 40, 41, 42, 0,
	0, 0, 0, 0, 0, 0, 43, 44, 0, 45,
	46, 404, 47, 48, 49, 300, 301, 405, 302, 303,
	0, 50, 51, 52, 53, 54, 395, 0, 55, 56,
	304, 305, 57, 0, 58, 59, 60, 61, 306, 0,
	406, 0, 62, 63, 64, 65, 407, 66, 67, 68,
	0, 69, 70, 71, 72, 73, 74, 0, 408, 75,
	76, 77, 0, 0, 0, 409, 0, 0, 0, 78,
	79, 80, 81, 82, 83, 307, 308, 84, 0, 85,
	0, 86, 87, 88, 89, 90, 0, 91, 92, 93,
	687, 0, 94, 95, 96, 97, 98, 0, 99, 100,
	101, 0, 102, 103, 104, 0, 105, 106, 107, 108,
	386, 109, 110, 111, 310, 393, 112, 0, 113, 114,
	311, 115, 0, 116, 0, 117, 410, 0, 411, 118,
	119, 120, 0, 121, 312, 0, 313, 122, 0, 123,
	124, 125, 126, 127, 412, 128, 129, 130, 131, 0,
	132, 133, 134, 135, 136, 137, 0, 138, 413, 314,
	139, 140, 141, 142, 315, 316, 0, 317, 0, 143,
	414, 415, 144, 416, 145, 146, 147, 148, 149, 0,
	0, 150, 318, 417, 151, 418, 0, 152, 153, 154,
	0, 0, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 319, 419, 320,
	170, 171, 321, 378, 172, 173, 420, 174, 394, 322,
	175, 323, 176, 177, 178, 0, 179, 0, 0, 388,
	181, 182, 0, 0, 183, 324, 421, 184, 422, 325,
	185, 186, 187, 188, 189, 190, 191, 0, 192, 193,
	326, 194, 327, 197, 195, 196, 0, 198, 199, 200,
	201, 202, 203, 204, 205, 328, 206, 207, 208, 209,
	0, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 0, 221, 222, 423, 223, 224, 225, 329,
	226, 227, 228, 229, 230, 231, 232, 233, 0, 234,
	235, 236, 237, 238, 0, 239, 240, 330, 241, 242,
	424, 243, 244, 331, 245, 0, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 332, 0, 257,
	258, 0, 259, 425, 260, 261, 262, 263, 264, 0,
	333, 334, 0, 0, 265, 266, 335, 267, 336, 392,
	268, 269, 270, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	284, 337, 338, 0, 285, 426, 286, 287, 288, 289,
	0, 0, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	297, 298, 299, 379, 0, 0, 0, 0, 0, 0,
	375, 376, 688, 0, 0, 0, 397, 0, 400, 382,
	684, 387, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 33, 34, 35, 36, 37, 38, 39, 0,
	40, 41, 42, 0, 0, 0, 0, 0, 0, 0,
	43, 44, 0, 45, 46, 404, 47, 48, 49, 300,
	301, 405, 302, 303, 0, 50, 51, 52, 53, 54,
	395, 0, 55, 56, 304, 305, 57, 0, 58, 59,
	60, 61, 306, 0, 406, 0, 62, 63, 64, 65,
	407, 66, 67, 68, 0, 69, 70, 71, 72, 73,
	74, 0, 408, 75, 76, 77, 0, 0, 0, 409,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 307,
	308, 84, 0, 85, 0, 86, 87, 88, 89, 90,
	0, 91, 92, 93, 0, 0, 94, 95, 96, 97,
	98, 0, 99, 100, 101, 0, 102, 103, 104, 0,
	105, 106, 107, 108, 386, 109, 110, 111, 310, 393,
	112, 0, 113, 114, 311, 115, 0, 116, 0, 117,
	410, 0, 411, 118, 119, 120, 0, 121, 312, 0,
	313, 122, 0, 123, 124, 125, 126, 127, 412, 128,
	129, 130, 131, 0, 132, 133, 134, 135, 136, 137,
	0, 138, 413, 314, 139, 140, 141, 142, 315, 316,
	0, 317, 0, 143, 414, 415, 144, 416, 145, 146,
	147, 148, 149, 0, 0, 150, 318, 417, 151, 418,
	0, 152, 153, 154, 0, 0, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 319, 419, 320, 170, 171, 321, 378, 172, 173,
	420, 174, 394, 322, 175, 323, 176, 177, 178, 0,
	179, 0, 0, 388, 181, 182, 0, 0, 183, 324,
	421, 184, 422, 325, 185, 186, 187, 188, 189, 190,
	191, 0, 192, 193, 326, 194, 327, 197, 195, 196,
	0, 198, 199, 200, 201, 202, 203, 204, 205, 328,
	206, 207, 208, 209, 0, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 0, 221, 222, 423,
	223, 224, 225, 329, 226, 227, 228, 229, 230, 231,
	232, 233, 8, 234, 235, 236, 237, 238, 0, 239,
	240, 330, 241, 242, 424, 243, 244, 331, 245, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 332, 0, 257, 258, 10, 259, 425, 260, 261,
	262, 263, 264, 0, 333, 334, 0, 0, 265, 266,
	335, 267, 336, 392, 268, 269, 270, 271, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 284, 507, 338, 0, 285, 426,
	286, 287, 288, 289, 0, 0, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 297, 298, 299, 379, 0, 0,
	0, 397, 0, 400, 375, 376, 387, 399, 0, 0,
	0, 0, 0, 382, 0, 0, 32, 33, 34, 35,
	36, 37, 38, 39, 0, 40, 41, 42, 0, 0,
	0, 0, 0, 0, 0, 43, 44, 0, 45, 46,
	404, 47, 48, 49, 300, 301, 405, 302, 303, 0,
	50, 51, 52, 53, 54, 395, 0, 55, 56, 304,
	305, 57, 0, 58, 59, 60, 61, 306, 0, 406,
	0, 62, 63, 64, 65, 407, 66, 67, 68, 0,
	69, 70, 71, 72, 73, 74, 0, 408, 75, 76,
	77, 0, 0, 0, 409, 0, 0, 0, 78, 79,
	80, 81, 82, 83, 307, 308, 84, 436, 85, 0,
	86, 87, 88, 89, 90, 0, 91, 92, 93, 0,
	0, 94, 95, 96, 97, 98, 0, 99, 100, 101,
	0, 102, 103, 104, 0, 105, 106, 107, 108, 386,
	109, 110, 111, 310, 393, 112, 0, 113, 114, 311,
	115, 0, 116, 0, 117, 410, 0, 411, 118, 119,
	120, 0, 121, 312, 0, 313, 122, 0, 123, 124,
	125, 126, 127, 412, 128, 129, 130, 131, 0, 132,
	133, 134, 135, 136, 137, 0, 138, 413, 314, 139,
	140, 141, 142, 315, 316, 0, 317, 0, 143, 414,
	415, 144, 416, 145, 146, 147, 148, 149, 0, 0,
	150, 318, 417, 151, 418, 0, 152, 153, 154, 0,
	0, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 319, 419, 320, 170,
	171, 321, 378, 172, 173, 420, 174, 394, 322, 175,
	323, 176, 177, 178, 0, 179, 0, 0, 388, 181,
	182, 0, 0, 183, 324, 421, 184, 422, 325, 185,
	186, 187, 188, 189, 190, 191, 0, 192, 193, 326,
	194, 327, 197, 195, 196, 0, 198, 199, 200, 201,
	202, 203, 204, 205, 328, 206, 207, 208, 209, 0,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 0, 221, 222, 423, 223, 224, 225, 329, 226,
	227, 228, 229, 230, 231, 232, 233, 0, 234, 235,
	236, 237, 238, 0, 239, 240, 330, 241, 242, 424,
	243, 244, 331, 245, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 332, 0, 257, 258,
	0, 259, 425, 260, 261, 262, 263, 264, 0, 333,
	334, 0, 0, 265, 266, 335, 267, 336, 392, 268,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 284,
	337, 338, 0, 285, 426, 286, 287, 288, 289, 0,
	0, 290, 0, 0, 291, 292, 293, 294, 295, 296,
	339, 340, 341, 342, 343, 344, 345, 346, 347, 297,
	298, 299, 379, 0, 0, 0, 397, 0, 400, 375,
	376, 387, 399, 0, 0, 0, 0, 0, 382, 0,
	0, 32, 33, 34, 35, 36, 37, 38, 39, 0,
	40, 41, 42, 0, 0, 0, 0, 0, 0, 0,
	43, 44, 0, 45, 46, 404, 47, 48, 49, 300,
	301, 405, 302, 303, 0, 50, 51, 52, 53, 54,
	395, 0, 55, 56, 304, 305, 57, 0, 58, 59,
	60, 61, 306, 0, 406, 0, 62, 63, 64, 65,
	407, 66, 67, 68, 0, 69, 70, 71, 72, 73,
	74, 0, 408, 75, 76, 77, 0, 0, 0, 409,
	0, 0, 0, 78, 79, 80, 81, 82, 83, 307,
	308, 84, 0, 85, 0, 86, 87, 88, 89, 90,
	0, 91, 92, 93, 0, 0, 94, 95, 96, 97,
	98, 0, 99, 100, 101, 0, 102, 103, 104, 0,
	105, 106, 107, 108, 386, 109, 110, 111, 310, 393,
	112, 0, 113, 114, 311, 115, 0, 116, 0, 117,
	410, 0, 411, 118, 119, 120, 0, 121, 312, 0,
	313, 122, 0, 123, 124, 125, 126, 127, 412, 128,
	129, 130, 131, 0, 132, 133, 134, 135, 136, 137,
	0, 138, 413, 314, 139, 140, 141, 142, 315, 316,
	0, 317, 0, 143, 414, 415, 144, 416, 145, 146,
	147, 148, 149, 0, 0, 150, 318, 417, 151, 418,
	0, 152, 153, 154, 0, 0, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 319, 419, 320, 170, 171, 321, 378, 172, 173,
	420, 174, 394, 322, 175, 323, 176, 177, 178, 0,
	179, 0, 0, 388, 181, 182, 0, 0, 183, 324,
	421, 184, 422, 325, 185, 186, 187, 188, 189, 190,
	191, 0, 192, 193, 326, 194, 327, 197, 195, 196,
	0, 198, 199, 200, 201, 202, 203, 204, 205, 328,
	206, 207, 208, 209, 0, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 0, 221, 222, 423,
	223, 224, 225, 329, 226, 227, 228, 229, 230, 231,
	232, 233, 0, 234, 235, 236, 237, 238, 0, 239,
	240, 330, 241, 242, 424, 243, 244, 331, 245, 0,
	246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
	256, 332, 0, 257, 258, 0, 259, 425, 260, 261,
	262, 263, 264, 0, 333, 334, 0, 0, 265, 266,
	335, 267, 336, 392, 268, 269, 270, 271, 272, 273,
	274, 0, 0, 275, 276, 277, 278, 279, 0, 0,
	280, 281, 282, 283, 284, 337, 338, 0, 285, 426,
	286, 287, 288, 289, 0, 0, 290, 0, 0, 291,
	292, 293, 294, 295, 296, 339, 340, 341, 342, 343,
	344, 345, 346, 347, 297, 298, 299, 379, 0, 0,
	0, 0, 0, 0, 375, 376, 373, 0, 0, 397,
	0, 400, 0, 382, 387, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 33, 34, 35, 36, 37,
	38, 39, 452, 40, 41, 42, 0, 0, 0, 0,
	0, 0, 0, 43, 44, 0, 45, 46, 404, 47,
	48, 49, 300, 301, 405, 302, 303, 0, 50, 51,
	52, 53, 54, 395, 0, 55, 56, 304, 305, 57,
	0, 58, 59, 60, 61, 306, 0, 406, 0, 62,
	63, 64, 65, 407, 66, 67, 68, 0, 69, 70,
	71, 72, 73, 74, 0, 408, 75, 76, 77, 0,
	0, 0, 409, 0, 0, 0, 78, 79, 80, 81,
	82, 83, 307, 308, 84, 0, 85, 0, 86, 87,
	88, 89, 90, 0, 91, 92, 93, 0, 0, 94,
	95, 96, 97, 98, 0, 99, 100, 101, 0, 102,
	103, 104, 0, 105, 106, 107, 108, 386, 109, 110,
	111, 310, 393, 112, 0, 113, 114, 311, 115, 0,
	116, 0, 117, 410, 0, 411, 118, 119, 120, 0,
	121, 312, 0, 313, 122, 0, 123, 124, 125, 126,
	127, 412, 128, 129, 130, 131, 0, 132, 133, 134,
	135, 136, 137, 0, 138, 413, 314, 139, 140, 141,
	142, 315, 316, 0, 317, 0, 143, 414, 415, 144,
	416, 145, 146, 147, 148, 149, 0, 0, 150, 318,
	417, 151, 418, 0, 152, 153, 154, 0, 0, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	166, 167, 168, 169, 319, 419, 320, 170, 171, 321,
	378, 172, 173, 420, 174, 394, 322, 175, 323, 176,
	177, 178, 0, 179, 0, 0, 388, 181, 182, 0,
	0, 183, 324, 421, 184, 422, 325, 185, 186, 187,
	188, 189, 190, 191, 0, 192, 193, 326, 194, 327,
	197, 195, 196, 0, 198, 199, 200, 201, 202, 203,
	204, 205, 328, 206, 207, 208, 209, 0, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 0,
	221, 222, 423, 223, 224, 225, 329, 226, 227, 228,
	229, 230, 231, 232, 233, 0, 234, 235, 236, 237,
	238, 0, 239, 240, 330, 241, 242, 424, 243, 244,
	331, 245, 0, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 332, 0, 257, 258, 0, 259,
	425, 260, 261, 262, 263, 264, 0, 333, 334, 0,
	0, 265, 266, 335, 267, 336, 392, 268, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 284, 337, 338,
	0, 285, 426, 286, 287, 288, 289, 0, 0, 290,
	0, 0, 291, 292, 293, 294, 295, 296, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 297, 298, 299,
	379, 0, 0, 0, 397, 0, 400, 375, 376, 387,
	399, 0, 0, 0, 0, 0, 382, 0, 0, 32,
	33, 34, 35, 36, 37, 38, 39, 0, 40, 41,
	42, 0, 0, 0, 0, 0, 0, 0, 43, 44,
	0, 45, 46, 404, 47, 48, 49, 300, 301, 405,
	302, 303, 0, 50, 51, 52, 53, 54, 395, 0,
	55, 56, 304, 305, 57, 0, 58, 59, 60, 61,
	306, 0, 406, 0, 62, 63, 64, 65, 407, 66,
	67, 68, 0, 69, 70, 71, 72, 73, 74, 0,
	408, 75, 76, 868, 0, 0, 0, 409, 0, 0,
	0, 78, 79, 80, 81, 82, 83, 307, 308, 84,
	0, 85, 0, 86, 87, 88, 89, 90, 0, 91,
	92, 93, 0, 0, 94, 95, 96, 97, 98, 0,
	99, 100, 101, 0, 102, 103, 104, 0, 105, 106,
	107, 108, 386, 109, 110, 111, 310, 393, 112, 0,
	113, 114, 311, 115, 0, 116, 0, 117, 410, 0,
	411, 118, 119, 120, 0, 121, 312, 0, 313, 122,
	0, 123, 124, 125, 126, 127, 412, 128, 129, 130,
	131, 0, 132, 133, 134, 135, 136, 137, 0, 138,
	413, 314, 139, 140, 141, 142, 315, 316, 0, 317,
	0, 143, 414, 415, 144, 416, 145, 146, 147, 148,
	149, 0, 0, 150, 318, 417, 151, 418, 0, 152,
	153, 154, 0, 0, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 319,
	419, 320, 170, 171, 321, 378, 172, 173, 420, 174,
	394, 322, 175, 323, 176, 177, 178, 0, 179, 0,
	0, 388, 181, 182, 0, 0, 183, 324, 421, 184,
	422, 325, 185, 186, 187, 188, 189, 190, 191, 0,
	192, 193, 326, 194, 327, 197, 195, 196, 0, 198,
	199, 200, 201, 202, 203, 204, 205, 328, 206, 207,
	208, 209, 0, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 0, 221, 222, 423, 223, 224,
	225, 329, 226, 227, 228, 229, 230, 231, 232, 233,
	0, 234, 235, 236, 237, 238, 0, 239, 240, 330,
	241, 242, 424, 243, 244, 331, 245, 0, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 332,
	0, 257, 258, 0, 259, 425, 260, 261, 262, 263,
	264, 0, 333, 334, 0, 0, 265, 266, 335, 267,
	336, 392, 268, 269, 270, 271, 867, 273, 274, 0,
	0, 275, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 284, 337, 338, 0, 285, 426, 286, 287,
	288, 289, 0, 0, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 297, 298, 299, 379, 0, 0, 0, 397,
	0, 400, 375, 376, 387, 399, 0, 0, 0, 0,
	0, 382, 0, 0, 32, 33, 34, 35, 36, 37,
	38, 39, 0, 40, 41, 42, 0, 0, 0, 0,
	0, 0, 0, 43, 44, 0, 45, 46, 404, 47,
	48, 49, 866, 301, 405, 302, 303, 0, 50, 51,
	52, 53, 54, 395, 0, 55, 56, 304, 305, 57,
	0, 58, 59, 60, 61, 306, 0, 406, 0, 62,
	63, 64, 65, 407, 66, 67, 68, 0, 69, 70,
	71, 72, 73, 74, 0, 408, 75, 76, 868, 0,
	0, 0, 409, 0, 0, 0, 78, 79, 80, 81,
	82, 83, 307, 308, 84, 0, 85, 0, 86, 87,
	88, 89, 90, 0, 91, 92, 93, 0, 0, 94,
	95, 96, 97, 98, 0, 99, 100, 101, 0, 102,
	103, 104, 0, 105, 106, 107, 108, 386, 109, 110,
	111, 310, 393, 112, 0, 113, 114, 311, 115, 0,
	116, 0, 117, 410, 0, 411, 118, 119, 120, 0,
	121, 312, 0, 313, 122, 0, 123, 124, 125, 126,
	127, 412, 128, 129, 130, 131, 0, 132, 133, 134,
	135, 136, 137, 0, 138, 413, 314, 139, 140, 141,
	142, 315, 316, 0, 317, 0, 143, 414, 415, 144,
	416, 145, 146, 147, 148, 149, 0, 0, 150, 318,
	417, 151, 418, 0, 152, 153, 154, 0, 0, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	166, 167, 168, 169, 319, 419, 320, 170, 171, 321,
	378, 172, 173, 420, 174, 394, 322, 175, 323, 176,
	177, 178, 0, 179, 0, 0, 388, 181, 182, 0,
	0, 183, 324, 421, 184, 422, 325, 185, 186, 187,
	188, 189, 190, 191, 0, 192, 193, 326, 194, 327,
	197, 195, 196, 0, 198, 199, 200, 201, 202, 203,
	204, 205, 328, 206, 207, 208, 209, 0, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 0,
	221, 222, 423, 223, 224, 225, 329, 226, 227, 228,
	229, 230, 231, 232, 233, 0, 234, 235, 236, 237,
	238, 0, 239, 240, 330, 241, 242, 424, 243, 244,
	331, 245, 0, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 332, 0, 257, 258, 0, 259,
	425, 260, 261, 262, 263, 264, 0, 333, 334, 0,
	0, 265, 266, 335, 267, 336, 392, 268, 269, 270,
	271, 867, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 284, 337, 338,
	0, 285, 426, 286, 287, 288, 289, 0, 0, 290,
	0, 0, 291, 292, 293, 294, 295, 296, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 297, 298, 299,
	379, 0, 0, 0, 397, 0, 400, 375, 376, 387,
	399, 0, 0, 0, 0, 0, 382, 0, 0, 32,
	33, 34, 35, 36, 37, 38, 39, 0, 40, 41,
	42, 0, 0, 0, 0, 0, 0, 0, 43, 44,
	0, 45, 46, 404, 47, 48, 49, 300, 301, 405,
	302, 303, 0, 50, 51, 52, 53, 54, 395, 0,
	55, 56, 304, 305, 57, 0, 58, 59, 60, 61,
	306, 0, 406, 0, 62, 63, 64, 65, 407, 66,
	67, 68, 0, 69, 70, 71, 72, 73, 74, 0,
	408, 75, 76, 77, 0, 0, 0, 409, 0, 0,
	0, 78, 79, 80, 81, 82, 83, 307, 308, 84,
	0, 85, 0, 86, 87, 88, 89, 90, 0, 91,
	92, 93, 0, 0, 94, 95, 96, 97, 98, 0,
	99, 100, 101, 0, 102, 103, 104, 0, 105, 106,
	107, 108, 386, 109, 110, 111, 310, 393, 112, 0,
	113, 114, 311, 115, 0, 116, 0, 117, 410, 0,
	411, 118, 119, 120, 0, 121, 312, 0, 313, 122,
	0, 123, 124, 125, 126, 127, 412, 128, 129, 130,
	131, 0, 132, 133, 134, 135, 136, 137, 0, 138,
	413, 314, 139, 140, 141, 142, 315, 316, 0, 317,
	0, 143, 414, 415, 144, 416, 145, 146, 147, 148,
	149, 0, 0, 150, 318, 417, 151, 418, 0, 152,
	153, 154, 0, 0, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 319,
	419, 320, 170, 171, 321, 378, 172, 173, 420, 174,
	394, 322, 175, 323, 176, 177, 178, 0, 179, 0,
	0, 388, 181, 182, 0, 0, 183, 324, 421, 184,
	422, 325, 185, 186, 187, 188, 189, 190, 191, 0,
	192, 193, 326, 194, 327, 197, 195, 196, 0, 198,
	199, 200, 201, 202, 203, 204, 205, 328, 206, 207,
	208, 209, 0, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 219, 220, 0, 221, 222, 423, 223, 224,
	225, 329, 226, 227, 228, 229, 230, 231, 232, 233,
	0, 234, 235, 236, 237, 238, 0, 239, 240, 330,
	241, 242, 424, 243, 244, 331, 245, 0, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 255, 256, 332,
	0, 257, 258, 0, 259, 425, 260, 261, 262, 263,
	264, 0, 333, 334, 0, 0, 265, 266, 335, 267,
	336, 392, 268, 269, 270, 271, 272, 273, 274, 0,
	0, 275, 276, 277, 278, 279, 0, 0, 280, 281,
	282, 283, 284, 337, 338, 0, 285, 426, 286, 287,
	288, 289, 0, 0, 290, 0, 0, 291, 292, 293,
	294, 295, 296, 339, 340, 341, 342, 343, 344, 345,
	346, 347, 297, 298, 299, 379, 0, 0, 0, 397,
	0, 400, 375, 376, 387, 399, 0, 0, 0, 0,
	0, 382, 0, 0, 32, 33, 34, 35, 36, 37,
	38, 39, 0, 40, 41, 42, 0, 0, 0, 0,
	0, 0, 0, 43, 44, 0, 45, 46, 404, 47,
	48, 49, 300, 301, 405, 302, 303, 0, 50, 51,
	52, 53, 54, 395, 0, 55, 56, 304, 305, 57,
	0, 58, 59, 60, 61, 306, 0, 406, 0, 62,
	63, 64, 65, 407, 66, 67, 68, 0, 69, 70,
	71, 72, 73, 74, 0, 408, 75, 76, 868, 0,
	0, 0, 409, 0, 0, 0, 78, 79, 80, 81,
	82, 83, 307, 308, 84, 0, 85, 0, 86, 87,
	88, 89, 90, 0, 91, 92, 93, 0, 0, 94,
	95, 96, 97, 98, 0, 99, 100, 101, 0, 102,
	103, 104, 0, 105, 106, 107, 108, 386, 109, 110,
	111, 310, 393, 112, 0, 113, 114, 311, 115, 0,
	116, 0, 117, 410, 0, 411, 118, 119, 120, 0,
	121, 312, 0, 313, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 130, 131, 0, 132, 133, 134,
	135, 136, 137, 0, 138, 413, 314, 139, 140, 141,
	142, 315, 316, 0, 317, 0, 143, 0, 0, 144,
	416, 145, 146, 147, 148, 149, 0, 0, 150, 318,
	417, 151, 0, 0, 152, 153, 154, 0, 0, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	166, 167, 168, 169, 319, 419, 320, 170, 171, 321,
	378, 172, 173, 0, 174, 394, 322, 175, 323, 176,
	177, 178, 0, 179, 0, 0, 388, 181, 182, 0,
	0, 183, 324, 421, 184, 422, 325, 185, 186, 187,
	188, 189, 190, 191, 0, 192, 193, 326, 194, 327,
	197, 195, 196, 0, 198, 199, 200, 201, 202, 203,
	204, 205, 328, 206, 207, 208, 209, 0, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 0,
	221, 222, 423, 223, 224, 225, 329, 226, 227, 228,
	229, 230, 231, 232, 233, 0, 234, 235, 236, 237,
	238, 0, 239, 240, 330, 241, 242, 0, 243, 244,
	331, 245, 0, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 332, 0, 257, 258, 0, 259,
	425, 260, 261, 262, 263, 264, 0, 333, 334, 0,
	0, 265, 266, 335, 267, 336, 392, 268, 269, 270,
	271, 867, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 284, 337, 338,
	0, 285, 426, 286, 287, 288, 289, 0, 0, 290,
	0, 0, 291, 292, 293, 294, 295, 296, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 297, 298, 299,
	0, 0, 29, 0, 0, 0, 0, 375, 376, 0,
	0, 0, 0, 0, 0, 0, 382, 32, 33, 34,
	35, 36, 37, 38, 39, 0, 40, 41, 42, 0,
	0, 0, 0, 0, 0, 0, 43, 44, 0, 45,
	46, 0, 47, 48, 49, 300, 301, 0, 302, 303,
	0, 50, 51, 52, 53, 54, 0, 0, 55, 56,
	304, 305, 57, 0, 58, 59, 60, 61, 306, 0,
	0, 0, 62, 63, 64, 65, 0, 66, 67, 68,
	0, 69, 70, 71, 72, 73, 74, 0, 0, 75,
	76, 77, 0, 0, 0, 0, 0, 0, 0, 78,
	79, 80, 81, 82, 83, 307, 308, 84, 0, 85,
	0, 86, 87, 88, 89, 90, 0, 91, 92, 93,
	0, 0, 94, 95, 96, 97, 98, 0, 99, 100,
	101, 0, 102, 103, 104, 0, 105, 106, 107, 108,
	309, 109, 110, 111, 310, 0, 112, 0, 113, 114,
	311, 115, 0, 116, 0, 117, 0, 0, 0, 118,
	119, 120, 0, 121, 312, 0, 313, 122, 0, 123,
	124, 125, 126, 127, 0, 128, 129, 130, 131, 0,
	132, 133, 134, 135, 136, 137, 0, 138, 0, 314,
	139, 140, 141, 142, 315, 316, 0, 317, 0, 143,
	0, 0, 144, 0, 145, 146, 147, 148, 149, 0,
	0, 150, 318, 0, 151, 0, 0, 152, 153, 154,
	0, 0, 155, 156, 157, 158, 159, 160, 161, 162,
	163, 164, 165, 166, 167, 168, 169, 319, 0, 320,
	170, 171, 321, 0, 172, 173, 0, 174, 0, 322,
	175, 323, 176, 177, 178, 0, 179, 0, 0, 180,
	181, 182, 0, 0, 183, 324, 0, 184, 0, 325,
	185, 186, 187, 188, 189, 190, 191, 0, 192, 193,
	326, 194, 327, 197, 195, 196, 0, 198, 199, 200,
	201, 202, 203, 204, 205, 328, 206, 207, 208, 209,
	0, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 0, 221, 222, 0, 223, 224, 225, 329,
	226, 227, 228, 229, 230, 231, 232, 233, 0, 234,
	235, 236, 237, 238, 0, 239, 240, 330, 241, 242,
	0, 243, 244, 331, 245, 0, 246, 247, 248, 249,
	250, 251, 252, 253, 254, 255, 256, 332, 0, 257,
	258, 0, 259, 0, 260, 261, 262, 263, 264, 0,
	333, 334, 0, 0, 265, 266, 335, 267, 336, 0,
	268, 269, 270, 271, 272, 273, 274, 0, 0, 275,
	276, 277, 278, 279, 0, 0, 280, 281, 282, 283,
	284, 337, 338, 0, 285, 0, 286, 287, 288, 289,
	0, 0, 290, 0, 0, 291, 292, 293, 294, 295,
	296, 339, 340, 341, 342, 343, 344, 345, 346, 347,
	297, 298, 299, 0, 0, 29, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 754,
	32, 33, 34, 35, 36, 37, 38, 39, 0, 40,
	41, 42, 0, 0, 0, 0, 0, 0, 0, 43,
	44, 0, 45, 46, 0, 47, 48, 49, 300, 301,
	0, 302, 303, 0, 50, 51, 52, 53, 54, 0,
	0, 55, 56, 304, 305, 57, 0, 58, 59, 60,
	61, 306, 0, 0, 0, 62, 63, 64, 65, 0,
	66, 67, 68, 0, 69, 70, 71, 72, 73, 74,
	0, 0, 75, 76, 77, 0, 0, 0, 0, 0,
	0, 0, 78, 79, 80, 81, 82, 83, 307, 308,
	84, 0, 85, 0, 86, 87, 88, 89, 90, 0,
	91, 92, 93, 0, 0, 94, 95, 96, 97, 98,
	0, 99, 100, 101, 0, 102, 103, 104, 0, 105,
	106, 107, 108, 309, 109, 110, 111, 310, 0, 112,
	0, 113, 114, 311, 115, 0, 116, 0, 117, 0,
	0, 0, 118, 119, 120, 0, 121, 312, 0, 313,
	122, 0, 123, 124, 125, 126, 127, 0, 128, 129,
	130, 131, 0, 132, 133, 134, 135, 136, 137, 0,
	138, 0, 314, 139, 140, 141, 142, 315, 316, 0,
	317, 0, 143, 0, 0, 144, 0, 145, 146, 147,
	148, 149, 0, 0, 150, 318, 0, 151, 0, 0,
	152, 153, 154, 0, 0, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
	319, 0, 320, 170, 171, 321, 0, 172, 173, 0,
	174, 0, 322, 175, 323, 176, 177, 178, 0, 179,
	0, 0, 180, 181, 182, 0, 0, 183, 324, 0,
	184, 0, 325, 185, 186, 187, 188, 189, 190, 191,
	0, 192, 193, 326, 194, 327, 197, 195, 196, 0,
	198, 199, 200, 201, 202, 203, 204, 205, 328, 206,
	207, 208, 209, 0, 210, 211, 212, 213, 214, 215,
	216, 217, 218, 219, 220, 0, 221, 222, 0, 223,
	224, 225, 329, 226, 227, 228, 229, 230, 231, 232,
	233, 0, 234, 235, 236, 237, 238, 0, 239, 240,
	330, 241, 242, 0, 243, 244, 331, 245, 0, 246,
	247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
	332, 0, 257, 258, 0, 259, 0, 260, 261, 262,
	263, 264, 0, 333, 334, 0, 0, 265, 266, 335,
	267, 336, 0, 268, 269, 270, 271, 272, 273, 274,
	0, 0, 275, 276, 277, 278, 279, 0, 0, 280,
	281, 282, 283, 284, 337, 338, 0, 285, 0, 286,
	287, 288, 289, 0, 0, 290, 0, 0, 291, 292,
	293, 294, 295, 296, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 297, 298, 299, 0, 0, 29, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 432, 32, 33, 34, 35, 36, 37, 38,
	39, 0, 40, 41, 42, 0, 0, 0, 0, 0,
	0, 0, 43, 44, 0, 45, 46, 0, 47, 48,
	49, 300, 301, 0, 302, 303, 0, 50, 51, 52,
	53, 54, 0, 0, 55, 56, 304, 305, 57, 0,
	58, 59, 60, 61, 306, 0, 0, 0, 62, 63,
	64, 65, 0, 66, 67, 68, 0, 69, 70, 71,
	72, 73, 74, 0, 0, 75, 76, 77, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 80, 81, 82,
	83, 307, 308, 84, 0, 85, 0, 86, 87, 88,
	89, 90, 0, 91, 92, 93, 0, 0, 94, 95,
	96, 97, 98, 0, 99, 100, 101, 0, 102, 103,
	104, 0, 105, 106, 107, 108, 309, 109, 110, 111,
	310, 0, 112, 0, 113, 114, 311, 115, 0, 116,
	0, 117, 0, 0, 0, 118, 119, 120, 0, 121,
	312, 0, 313, 122, 0, 123, 124, 125, 126, 127,
	0, 128, 129, 130, 131, 0, 132, 133, 134, 135,
	136, 137, 0, 138, 0, 314, 139, 140, 141, 142,
	315, 316, 0, 317, 0, 143, 0, 0, 144, 0,
	145, 146, 147, 148, 149, 0, 0, 150, 318, 0,
	151, 0, 0, 152, 153, 154, 0, 0, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 168, 169, 319, 0, 320, 170, 171, 321, 0,
	172, 173, 0, 174, 0, 322, 175, 323, 176, 177,
	178, 0, 179, 0, 27, 180, 181, 182, 0, 0,
	183, 324, 0, 184, 0, 325, 185, 186, 187, 188,
	189, 190, 191, 0, 192, 193, 326, 194, 327, 197,
	195, 196, 0, 198, 199, 200, 201, 202, 203, 204,
	205, 328, 206, 207, 208, 209, 0, 210, 211, 212,
	213, 214, 215, 216, 217, 218, 219, 220, 0, 221,
	222, 0, 223, 224, 225, 329, 226, 227, 228, 229,
	230, 231, 232, 233, 0, 234, 235, 236, 237, 238,
	0, 239, 240, 330, 241, 242, 0, 243, 244, 331,
	245, 0, 246, 247, 248, 249, 250, 251, 252, 253,
	254, 255, 256, 332, 0, 257, 258, 0, 259, 0,
	260, 261, 262, 263, 264, 0, 333, 334, 0, 0,
	265, 266, 335, 267, 336, 0, 268, 269, 270, 271,
	272, 273, 274, 0, 0, 275, 276, 277, 278, 279,
	0, 0, 280, 281, 282, 283, 284, 337, 338, 0,
	285, 0, 286, 287, 288, 289, 0, 0, 290, 0,
	0, 291, 292, 293, 294, 295, 296, 339, 340, 341,
	342, 343, 344, 345, 346, 347, 297, 298, 299, 29,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 32, 33, 34, 35, 36, 37,
	38, 39, 0, 40, 41, 42, 0, 0, 0, 0,
	0, 0, 0, 43, 44, 0, 45, 46, 0, 47,
	48, 49, 300, 301, 0, 302, 303, 0, 50, 51,
	52, 53, 54, 0, 0, 55, 56, 304, 305, 57,
	0, 58, 59, 60, 61, 306, 0, 0, 0, 62,
	63, 64, 65, 0, 66, 67, 68, 0, 69, 70,
	71, 72, 73, 74, 0, 0, 75, 76, 77, 0,
	0, 0, 0, 0, 0, 0, 78, 79, 80, 81,
	82, 83, 307, 308, 84, 0, 85, 0, 86, 87,
	88, 89, 90, 0, 91, 92, 93, 0, 0, 94,
	95, 96, 97, 98, 0, 99, 100, 101, 0, 102,
	103, 104, 0, 105, 106, 107, 108, 309, 109, 110,
	111, 310, 0, 112, 0, 113, 114, 311, 115, 0,
	116, 0, 117, 0, 0, 0, 118, 119, 120, 0,
	121, 312, 0, 313, 122, 0, 123, 124, 125, 126,
	127, 0, 128, 129, 130, 131, 0, 132, 133, 134,
	135, 136, 137, 0, 138, 0, 314, 139, 140, 141,
	142, 315, 316, 0, 317, 0, 143, 0, 0, 144,
	0, 145, 146, 147, 148, 149, 0, 0, 150, 318,
	0, 151, 0, 0, 152, 153, 154, 0, 0, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	166, 167, 168, 169, 319, 0, 320, 170, 171, 321,
	0, 172, 173, 0, 174, 0, 322, 175, 323, 176,
	177, 178, 0, 179, 0, 0, 180, 181, 182, 0,
	0, 183, 324, 0, 184, 0, 325, 185, 186, 187,
	188, 189, 190, 191, 0, 192, 193, 326, 194, 327,
	197, 195, 196, 0, 198, 199, 200, 201, 202, 203,
	204, 205, 328, 206, 207, 208, 209, 0, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 0,
	221, 222, 0, 223, 224, 225, 329, 226, 227, 228,
	229, 230, 231, 232, 233, 0, 234, 235, 236, 237,
	238, 0, 239, 240, 330, 241, 242, 0, 243, 244,
	331, 245, 0, 246, 247, 248, 249, 250, 251, 252,
	253, 254, 255, 256, 332, 0, 257, 258, 0, 259,
	0, 260, 261, 262, 263, 264, 0, 333, 334, 0,
	0, 265, 266, 335, 267, 336, 0, 268, 269, 270,
	271, 272, 273, 274, 0, 0, 275, 276, 277, 278,
	279, 0, 0, 280, 281, 282, 283, 284, 337, 338,
	0, 285, 0, 286, 287, 288, 289, 0, 0, 290,
	0, 0, 291, 292, 293, 294, 295, 296, 339, 340,
	341, 342, 343, 344, 345, 346, 347, 297, 298, 299,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 32, 33, 34, 35, 36,
	37, 38, 39, 0, 40, 41, 42, 0, 0, 0,
	0, 0, 0, 0, 43, 44, 0, 45, 46, 0,
	47, 48, 49, 300, 301, 0, 302, 303, 0, 50,
	51, 52, 53, 54, 0, 0, 55, 56, 304, 305,
	57, 0, 58, 59, 60, 61, 306, 0, 0, 0,
	62, 63, 64, 65, 0, 66, 67, 68, 0, 69,
	70, 71, 72, 73, 74, 0, 0, 75, 76, 77,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 80,
	81, 82, 83, 307, 308, 84, 0, 85, 0, 86,
	87, 88, 89, 90, 0, 91, 92, 93, 0, 0,
	94, 95, 96, 97, 98, 0, 99, 100, 101, 0,
	102, 103, 104, 0, 105, 106, 107, 108, 309, 109,
	110, 111, 310, 0, 112, 0, 113, 114, 311, 115,
	0, 116, 0, 117, 0, 0, 0, 118, 119, 120,
	0, 121, 312, 0, 313, 122, 0, 123, 124, 125,
	126, 127, 0, 128, 129, 130, 131, 0, 132, 133,
	134, 135, 136, 137, 0, 138, 0, 314, 139, 140,
	141, 142, 315, 316, 0, 317, 0, 143, 0, 0,
	144, 0, 145, 146, 147, 148, 149, 0, 0, 150,
	318, 0, 151, 0, 0, 152, 153, 154, 0, 0,
	155, 156, 157, 158, 159, 160, 161, 162, 163, 164,
	165, 166, 167, 168, 169, 319, 0, 320, 170, 171,
	321, 0, 172, 173, 0, 174, 0, 322, 175, 323,
	176, 177, 178, 0, 179, 0, 0, 180, 181, 182,
	0, 0, 183, 324, 0, 184, 0, 325, 185, 186,
	187, 188, 0, 190, 191, 0, 192, 193, 326, 194,
	327, 197, 195, 196, 0, 198, 199, 200, 201, 202,
	203, 0, 205, 328, 206, 207, 208, 209, 0, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	0, 221, 222, 0, 223, 224, 225, 329, 0, 227,
	228, 229, 230, 231, 232, 233, 0, 234, 235, 236,
	237, 238, 0, 239, 240, 330, 241, 242, 0, 243,
	244, 331, 245, 0, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 332, 0, 257, 258, 0,
	259, 0, 260, 261, 262, 263, 264, 0, 333, 334,
	0, 0, 265, 266, 335, 267, 336, 0, 268, 269,
	270, 271, 272, 273, 274, 0, 0, 275, 276, 277,
	278, 279, 0, 0, 280, 281, 282, 283, 284, 337,
	338, 0, 285, 0, 286, 287, 288, 289, 0, 0,
	290, 0, 0, 291, 292, 293, 294, 295, 296, 339,
	340, 341, 342, 343, 344, 345, 346, 347, 297, 298,
	299, 557, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 32, 33, 34, 35,
	36, 37, 38, 39, 0, 40, 41, 42, 0, 0,
	0, 0, 0, 0, 0, 43, 44, 0, 45, 46,
	404, 47, 48, 49, 0, 554, 405, 0, 556, 0,
	50, 51, 52, 53, 54, 0, 0, 55, 56, 0,
	0, 57, 0, 58, 59, 60, 61, 0, 0, 406,
	0, 62, 63, 64, 65, 407, 66, 67, 68, 0,
	69, 70, 71, 72, 73, 74, 0, 408, 75, 76,
	77, 0, 0, 0, 409, 0, 0, 0, 78, 79,
	80, 81, 82, 83, 0, 0, 84, 0, 85, 0,
	86, 87, 88, 89, 90, 0, 91, 92, 93, 0,
	0, 94, 95, 96, 97, 98, 0, 99, 100, 101,
	0, 102, 103, 104, 0, 105, 106, 107, 108, 0,
	109, 110, 111, 0, 0, 112, 0, 113, 114, 0,
	115, 0, 116, 0, 117, 410, 0, 411, 118, 119,
	120, 0, 121, 0, 0, 0, 122, 0, 123, 124,
	125, 126, 127, 412, 128, 129, 130, 131, 0, 132,
	133, 134, 135, 136, 137, 0, 138, 413, 0, 139,
	140, 141, 142, 551, 552, 0, 0, 0, 143, 414,
	415, 144, 416, 145, 146, 147, 148, 149, 0, 0,
	150, 0, 417, 151, 418, 0, 152, 153, 154, 0,
	0, 155, 156, 157, 158, 159, 160, 161, 162, 163,
	164, 165, 166, 167, 168, 169, 0, 419, 0, 170,
	171, 0, 0, 172, 173, 420, 174, 0, 0, 175,
	0, 176, 177, 178, 0, 179, 0, 0, 180, 181,
	182, 0, 0, 183, 0, 421, 184, 422, 0, 185,
	186, 187, 188, 189, 190, 191, 0, 192, 193, 0,
	194, 0, 197, 195, 196, 0, 198, 199, 200, 201,
	202, 203, 204, 205, 555, 206, 207, 208, 209, 0,
	210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
	220, 0, 221, 222, 423, 223, 224, 225, 0, 226,
	227, 228, 229, 230, 231, 232, 233, 0, 234, 235,
	236, 237, 238, 0, 239, 240, 0, 241, 242, 424,
	243, 244, 553, 245, 0, 246, 247, 248, 249, 250,
	251, 252, 253, 254, 255, 256, 0, 0, 257, 258,
	0, 259, 425, 260, 261, 262, 263, 264, 0, 0,
	0, 0, 0, 265, 266, 0, 267, 0, 0, 268,
	269, 270, 271, 272, 273, 274, 0, 0, 275, 276,
	277, 278, 279, 0, 0, 280, 281, 282, 283, 284,
	0, 0, 0, 285, 426, 286, 287, 288, 289, 0,
	0, 290, 0, 0, 291, 292, 293, 294, 295, 296,
	0, 0, 0, 0, 0, 387, 0, 0, 472, 297,
	298, 299, 484, 485, 486, 0, 0, 0, 0, 0,
	0, 0, 0, 387, 0, 0, 472, 0, 0, 488,
	484, 485, 486, 0, 0, 0, 0, 474, 0, 0,
	0, 387, 0, 0, 472, 0, 0, 488, 484, 485,
	486, 541, 0, 0, 0, 474, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 488, 0, 473, 0, 782,
	0, 0, 0, 474, 387, 0, 0, 472, 0, 0,
	0, 484, 485, 486, 0, 473, 0, 0, 0, 0,
	0, 0, 387, 0, 0, 472, 0, 0, 488, 0,
	0, 781, 0, 473, 0, 0, 474, 0, 0, 498,
	0, 0, 0, 0, 387, 0, 0, 472, 0, 0,
	0, 484, 485, 486, 474, 0, 0, 0, 0, 0,
	0, 0, 542, 0, 0, 0, 473, 0, 488, 0,
	0, 497, 0, 0, 0, 0, 474, 0, 0, 0,
	0, 0, 0, 0, 473, 0, 0, 387, 0, 0,
	472, 0, 0, 0, 484, 485, 486, 0, 387, 0,
	0, 472, 492, 0, 0, 0, 473, 0, 0, 0,
	387, 488, 0, 472, 0, 880, 0, 0, 0, 474,
	492, 0, 0, 0, 387, 0, 0, 472, 494, 495,
	474, 0, 0, 0, 0, 0, 0, 0, 492, 0,
	0, 0, 474, 490, 0, 0, 494, 495, 792, 473,
	0, 0, 0, 0, 0, 0, 474, 0, 0, 387,
	473, 490, 472, 0, 494, 495, 0, 0, 0, 0,
	0, 492, 473, 0, 496, 0, 0, 0, 0, 490,
	0, 0, 0, 0, 0, 0, 473, 499, 0, 0,
	489, 474, 496, 0, 0, 0, 0, 494, 495, 0,
	0, 0, 0, 0, 0, 499, 0, 0, 489, 0,
	496, 492, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 473, 0, 499, 789, 0, 489, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 788, 494, 495, 0,
	0, 0, 0, 496, 0, 879, 0, 0, 0, 0,
	738, 0, 490, 0, 492, 0, 499, 0, 387, 489,
	0, 472, 0, 0, 0, 484, 485, 486, 493, 0,
	0, 0, 0, 0, 499, 0, 0, 0, 0, 0,
	494, 495, 488, 496, 0, 734, 493, 0, 0, 0,
	474, 0, 0, 0, 0, 490, 499, 0, 387, 489,
	0, 472, 0, 0, 493, 484, 485, 486, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	473, 0, 488, 0, 0, 0, 496, 0, 0, 0,
	474, 0, 0, 0, 0, 0, 0, 493, 0, 499,
	0, 539, 489, 0, 0, 0, 0, 0, 387, 0,
	499, 472, 0, 0, 0, 484, 485, 486, 0, 0,
	473, 491, 499, 0, 481, 482, 483, 0, 475, 476,
	477, 478, 479, 480, 0, 0, 499, 493, 672, 491,
	474, 0, 481, 482, 483, 0, 475, 476, 477, 478,
	479, 480, 0, 0, 0, 0, 0, 491, 0, 0,
	481, 482, 483, 0, 475, 476, 477, 478, 479, 480,
	473, 499, 0, 0, 387, 0, 0, 472, 0, 0,
	493, 484, 485, 486, 0, 492, 0, 0, 0, 0,
	491, 0, 0, 481, 482, 483, 0, 475, 476, 477,
	478, 479, 480, 0, 0, 0, 474, 0, 0, 798,
	0, 494, 495, 0, 0, 475, 476, 477, 478, 479,
	480, 0, 0, 0, 0, 492, 490, 0, 0, 0,
	491, 0, 0, 481, 482, 483, 473, 475, 476, 477,
	478, 479, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 494, 495, 0, 0, 0, 0, 496, 0, 0,
	0, 0, 0, 0, 0, 0, 490, 0, 0, 0,
	499, 0, 0, 491, 0, 492, 481, 482, 483, 0,
	475, 476, 477, 478, 479, 480, 0, 0, 0, 0,
	0, 475, 476, 477, 478, 479, 480, 496, 0, 0,
	0, 494, 495, 475, 476, 477, 478, 479, 480, 0,
	499, 0, 0, 489, 0, 0, 490, 475, 476, 477,
	478, 479, 480, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 492, 0, 0, 0, 0, 0, 496, 0, 0,
	0, 493, 475, 476, 477, 478, 479, 480, 0, 0,
	499, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 490, 0, 0, 0, 0, 0, 0, 0,
	0, 493, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 499, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 493, 0, 0, 491, 0, 0, 481, 482, 483,
	0, 475, 476, 477, 478, 479, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 0, 481, 482, 483,
	0, 475, 476, 477, 478, 479, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 493, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 491, 0, 0, 481, 482, 483,
	0, 475, 476, 477, 478, 479, 480, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	491, 0, 0, 481, 482, 483, 0, 475, 476, 477,
	478, 479, 480,
}
var sqlPact = []int{

	-281, -1000, -1000, -1000, -1000, -1000, -37, -281, 133, -407,
	6592, -380, -1000, -19, 132, 132, 132, 113, -388, -390,
	3110, 3110, -1000, -130, -380, -1000, -368, 6159, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 2675,
	-15, 3, 2, -116, -126, -7, -1000, 3553, -10, 4858,
	-123, -281, -1000, -1000, -281, -281, 4858, -1000, -1000, -1000,
	-408, -1000, 8413, -1000, -1000, 4858, 4858, 4858, 4858, 4858,
	-1000, -1000, 2240, -1000, -1000, -1000, -376, -1000, -379, -405,
	-1000, -1000, -1000, -1000, -1000, 4858, 8, -1000, -1000, -1000,
	-1000, -377, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -408, -378, -1000,
	-1000, -1000, 7023, -412, -1000, 8667, -1000, -1000, -1000, -1000,
	-1000, -1000, -115, -134, -1000, -68, -1000, -230, -1000, -1000,
	-1000, 8667, -1000, 53, -1000, -1000, -1000, -207, 8667, -1000,
	-137, 7023, -51, -1000, -1000, -1000, -51, -409, -1000, 8322,
	-4, 3110, 7885, 7023, -275, 4858, 4858, 4858, 4858, 4858,
	4858, 4858, 4858, 4858, 4858, 4858, 4858, 4858, 4858, 4858,
	4858, -71, 4858, -278, -30, -1000, -1000, 1365, -1000, -379,
	165, 165, 222, 8717, 8717, 8304, -390, -380, -1000, 193,
	-405, -1000, 934, -326, 8667, -149, -381, 1796, -4, 4858,
	-391, 2675, -1000, -1000, -306, -1000, -207, -1000, 4858, -1000,
	-1000, -1000, -1000, -1000, -1000, -93, -410, -1000, 4858, 155,
	-359, -1000, -1000, -330, 4858, -1000, -1000, -1000, -1000, -1000,
	-382, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-402, -355, 112, 112, 66, 66, 66, 172, 127, 127,
	127, 127, 127, 127, 222, 8717, 8627, 8528, 4858, 4858,
	-279, 8493, 4858, -1000, -28, -1000, -1000, -1000, -5, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -392, -1000, -1000, -1000, -1000, -42, -1000,
	4858, -1000, 5726, -328, -1000, -231, 4858, 4858, -394, -1000,
	8667, 161, -1000, -330, -416, 8667, -1000, -1000, -1000, -135,
	188, -1000, 7023, -1000, -359, -1000, -383, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -2, -17, 4858, -61, -1000, 8373, -1000, -1000,
	4858, -403, 1365, 4858, 4858, 8479, 8467, 4858, 4858, 8391,
	-1000, -1000, -1000, -1000, -8, 4858, -405, -1000, 19, -1000,
	4858, 8456, -1000, -1000, 7454, 4858, -395, 4858, -1000, -231,
	-231, -1000, 4858, 4858, -17, 4858, -1000, -1000, -1000, -1000,
	-1000, 192, -1000, -1000, -22, 110, 8667, 4858, -60, -62,
	4858, 189, -1000, -419, 1365, -1000, 162, 497, 4858, 4858,
	357, 497, 4858, 4858, 8783, -1000, -1000, 8667, 4858, -160,
	-1000, 169, -1000, -1000, -397, -398, 8667, 8667, -22, 8667,
	-399, -335, 4858, 4858, -1000, 4858, 4858, -171, -1000, -1000,
	-1000, 497, 497, 4858, 497, 8783, 8667, -142, 109, -1000,
	-1000, -1000, -335, -1000, -1000, 7023, 8667, -411, -1000, 8667,
	-1000, -1000, -384, 4858, 497, -182, 4858, -1000, -413, -1000,
	129, 4858, 187, 8667, -400, 4423, 4423, -417, 7023, -385,
	-1000, -422, -1000, -1000, -1000, -1000, 5293, -35, -212, 8340,
	-1000, -1000, -1000, 184, -1000, 134, -1000, -1000, -1000, -1000,
	-1000, -1000, 3988, -1000,
}
var sqlPgo = []int{

	0, 300, 299, 232, 310, 108, 103, 298, 297, 192,
	296, 6, 294, 10, 27, 0, 100, 26, 293, 292,
	17, 23, 8, 184, 291, 290, 14, 86, 289, 288,
	24, 287, 287, 286, 285, 113, 284, 101, 104, 283,
	280, 279, 278, 277, 110, 276, 105, 275, 274, 272,
	271, 270, 269, 269, 20, 15, 33, 30, 269, 268,
	267, 83, 266, 264, 16, 263, 3, 9, 203, 67,
	262, 260, 259, 258, 255, 254, 253, 19, 25, 252,
	171, 251, 18, 13, 249, 248, 5, 4, 2, 247,
	246, 243, 241, 7, 1, 239, 238, 237, 29, 95,
	12, 28, 11, 229, 221, 218, 216, 211, 194, 194,
}
var sqlR1 = []int{

	0, 1, 25, 25, 25, 26, 26, 26, 59, 13,
	13, 13, 96, 96, 97, 97, 107, 28, 108, 108,
	105, 29, 29, 106, 106, 106, 106, 106, 106, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 15, 15, 15, 15, 16, 16, 16,
	16, 16, 16, 16, 81, 81, 81, 81, 81, 84,
	18, 18, 19, 19, 19, 19, 19, 17, 17, 17,
	48, 48, 48, 11, 11, 82, 82, 83, 83, 83,
	2, 2, 4, 4, 3, 3, 3, 3, 5, 5,
	6, 6, 6, 6, 6, 6, 6, 27, 68, 68,
	68, 10, 10, 12, 12, 22, 22, 23, 24, 24,
	21, 21, 64, 64, 65, 65, 66, 67, 67, 44,
	44, 43, 43, 45, 45, 46, 47, 47, 47, 47,
	49, 49, 86, 86, 85, 85, 87, 89, 89, 89,
	88, 90, 90, 91, 91, 92, 92, 92, 93, 93,
	94, 94, 94, 94, 94, 34, 34, 34, 34, 35,
	35, 35, 35, 36, 36, 37, 37, 38, 38, 39,
	39, 40, 41, 41, 41, 42, 30, 30, 31, 31,
	7, 7, 20, 20, 32, 32, 33, 33, 63, 63,
	60, 60, 60, 60, 60, 60, 60, 60, 60, 60,
	60, 60, 61, 61, 62, 62, 73, 76, 76, 77,
	75, 75, 74, 74, 95, 95, 54, 54, 51, 51,
	52, 52, 78, 78, 79, 79, 80, 8, 8, 9,
	9, 14, 14, 14, 14, 50, 50, 56, 53, 53,
	58, 55, 104, 104, 72, 72, 72, 72, 72, 69,
	71, 70, 57, 57, 57, 101, 101, 101, 109, 109,
	109, 109, 98, 98, 98, 98, 98, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
	99, 99, 99, 99, 99, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
	100, 100, 100, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 102, 102, 102, 102, 102, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
	103, 103, 103,
}
var sqlR2 = []int{

	0, 1, 1, 1, 0, 2, 2, 0, 1, 1,
	3, 2, 1, 2, 2, 3, 2, 0, 1, 1,
	2, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 5, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 3,
	3, 2, 2, 3, 5, 4, 6, 3, 5, 4,
	6, 4, 6, 5, 7, 3, 2, 4, 2, 3,
	4, 3, 4, 3, 4, 5, 6, 1, 1, 4,
	1, 1, 1, 2, 3, 5, 6, 6, 4, 3,
	1, 3, 3, 4, 4, 7, 5, 2, 2, 0,
	1, 2, 0, 1, 3, 1, 3, 1, 3, 3,
	1, 1, 3, 3, 1, 2, 4, 4, 1, 1,
	9, 9, 1, 2, 4, 4, 4, 0, 1, 1,
	0, 1, 5, 1, 0, 1, 0, 3, 1, 3,
	4, 3, 3, 0, 1, 3, 1, 2, 0, 1,
	3, 1, 0, 1, 2, 3, 2, 4, 2, 3,
	2, 0, 2, 0, 1, 3, 3, 2, 2, 0,
	6, 1, 0, 3, 0, 2, 2, 0, 1, 4,
	2, 2, 2, 2, 2, 1, 2, 2, 4, 2,
	2, 1, 1, 1, 0, 2, 5, 2, 3, 1,
	1, 1, 1, 3, 0, 1, 1, 1, 1, 1,
	2, 3, 2, 0, 5, 0, 5, 0, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 1, 4, 5, 1, 2, 4,
	2, 0, 1, 0, 1, 2, 2, 2, 1, 2,
	0, 2, 1, 1, 1, 3, 3, 1, 0, 1,
	3, 3, 2, 1, 1, 1, 3, 1, 1, 3,
	1, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1,
}
var sqlChk = []int{

	-1000, -1, -2, -3, -4, -6, -5, 453, 332, -7,
	365, 405, -23, -22, 391, 200, 139, 267, -3, -4,
	-12, -10, 29, 124, 456, -34, -56, 262, -57, 6,
	-99, -100, 21, 22, 23, 24, 25, 26, 27, 28,
	30, 31, 32, 40, 41, 43, 44, 46, 47, 48,
	55, 56, 57, 58, 59, 62, 63, 66, 68, 69,
	70, 71, 76, 77, 78, 79, 81, 82, 83, 85,
	86, 87, 88, 89, 90, 93, 94, 95, 103, 104,
	105, 106, 107, 108, 111, 113, 115, 116, 117, 118,
	119, 121, 122, 123, 126, 127, 128, 129, 130, 132,
	133, 134, 136, 137, 138, 140, 141, 142, 143, 145,
	146, 147, 150, 152, 153, 155, 157, 159, 163, 164,
	165, 167, 171, 173, 174, 175, 176, 177, 179, 180,
	181, 182, 184, 185, 186, 187, 188, 189, 191, 194,
	195, 196, 197, 203, 206, 208, 209, 210, 211, 212,
	215, 218, 221, 222, 223, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
	244, 245, 248, 249, 251, 254, 256, 257, 258, 260,
	263, 264, 265, 268, 271, 274, 275, 276, 277, 278,
	279, 280, 282, 283, 285, 288, 289, 287, 291, 292,
	293, 294, 295, 296, 297, 298, 300, 301, 302, 303,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 317, 318, 320, 321, 322, 324, 325, 326, 327,
	328, 329, 330, 331, 333, 334, 335, 336, 337, 339,
	340, 342, 343, 345, 346, 348, 350, 351, 352, 353,
	354, 355, 356, 357, 358, 359, 360, 363, 364, 366,
	368, 369, 370, 371, 372, 378, 379, 381, 384, 385,
	386, 387, 388, 389, 390, 393, 394, 395, 396, 397,
	400, 401, 402, 403, 404, 408, 410, 411, 412, 413,
	416, 419, 420, 421, 422, 423, 424, 434, 435, 436,
	49, 50, 52, 53, 64, 65, 72, 109, 110, 144,
	148, 154, 168, 170, 193, 198, 199, 201, 216, 241,
	243, 246, 253, 255, 269, 273, 284, 286, 299, 323,
	341, 347, 361, 374, 375, 380, 382, 405, 406, 425,
	426, 427, 428, 429, 430, 431, 432, 433, -80, 453,
	-44, -35, -45, 156, -37, -38, -46, 220, 151, 259,
	-47, -68, 29, 124, -68, -68, 55, 454, 454, -8,
	-9, -14, -15, 446, -16, 444, 445, -61, 247, 437,
	-95, -72, 453, -73, -84, -4, 144, 11, 263, -57,
	-69, -71, 383, 149, 252, 60, -81, 6, -99, 12,
	8, -104, -101, -102, 45, 51, 74, 80, 92, 99,
	160, 162, 178, 192, 204, 205, 207, 217, 219, 242,
	250, 270, 272, 319, 344, 367, 409, -9, 261, -80,
	446, -56, 453, -79, -78, -15, 112, -36, -35, -43,
	-44, -46, 156, 298, 397, 245, 342, 208, -38, -37,
	-39, -15, 29, -31, 153, 244, -40, -42, -15, -16,
	-49, 257, -5, -6, -4, -5, -5, -24, -21, -15,
	-27, 456, 14, 73, 43, 444, 445, 446, 447, 448,
	449, 440, 441, 442, 18, 19, 20, -61, 35, 266,
	219, 437, 178, 344, 204, 205, 250, 38, 6, 263,
	-15, -15, -15, -15, -15, -15, -4, 405, -4, 453,
	-51, -54, 455, -74, -15, -33, 152, 453, -27, 453,
	-56, 456, 454, 262, 208, 342, -41, -70, 453, -69,
	-30, 323, 324, -48, 251, 346, -50, -56, 456, 399,
	-25, 39, 120, -17, 161, -14, -107, -108, -105, -106,
	-101, 198, 199, 347, 50, 299, 53, 6, -99, -96,
	-57, 374, -15, -15, -15, -15, -15, -15, -15, -15,
	-15, -15, -15, -15, -15, -15, -15, -15, 219, 178,
	344, -15, 376, 252, 247, 383, 149, 393, 124, -98,
	6, -99, -100, -102, -103, 29, 33, 34, 35, 36,
	37, 38, 39, 42, 54, 60, 61, 67, 73, 75,
	84, 91, 96, 97, 98, 100, 101, 102, 112, 114,
	120, 124, 125, 131, 135, 139, 149, 151, 156, 158,
	161, 166, 169, 172, 183, 190, 200, 202, 213, 214,
	220, 224, 225, 247, 252, 259, 261, 262, 266, 267,
	281, 290, 304, 316, 332, 338, 349, 362, 365, 373,
	376, 377, 383, 391, 392, 398, 399, 407, 414, 415,
	417, 418, 454, 5, -54, -55, 446, -98, -76, -77,
	414, -89, 271, 453, 454, -82, 29, 124, 446, -83,
	-15, -59, -101, -17, -11, -15, 454, -78, 397, -30,
	-15, 228, 456, -21, -62, -63, 263, 11, -60, 444,
	445, 446, 447, 448, 449, 440, 441, 442, 18, 19,
	20, -26, 438, -20, 415, -13, -19, -15, -28, -29,
	453, -97, 455, 436, 137, -15, -15, 376, 137, -15,
	252, 383, 149, 393, 124, 161, -52, 454, -75, -77,
	131, -15, -88, -57, 453, 415, -22, 456, -23, -82,
	-82, 454, 16, 17, -20, 456, 454, 262, 454, -56,
	-26, 453, 153, 212, -64, 169, -15, 456, 92, 242,
	207, 38, 6, -11, 455, -55, -15, -15, 137, 137,
	-15, -15, 137, 161, -15, -54, 135, -15, 373, -90,
	-57, -15, 454, -83, -22, -22, -15, -15, -64, -15,
	5, -67, 172, 55, -13, 207, 207, -13, 6, 454,
	-55, -15, -15, 137, -15, -15, -15, -91, 278, 454,
	454, 454, -67, 454, -86, 417, -15, -65, -66, -15,
	-13, -13, 399, 261, -15, -22, 55, -86, -85, -87,
	-57, 456, 453, -15, -92, 297, 324, -11, 456, 38,
	-66, -18, 6, 454, -93, -94, 49, 388, 95, -15,
	-93, -87, -88, 456, 454, -94, 285, 155, 323, 285,
	155, 6, 35, -94,
}
var sqlDef = []int{

	0, -2, 1, 110, -2, -2, 136, 0, 134, 122,
	0, 0, -2, 0, 130, 130, 130, 0, 0, 119,
	258, 0, 133, 131, 0, 123, 185, 0, 267, 282,
	283, 284, 297, 298, 299, 300, 301, 302, 303, 304,
	305, 306, 307, 308, 309, 310, 311, 312, 313, 314,
	315, 316, 317, 318, 319, 320, 321, 322, 323, 324,
	325, 326, 327, 328, 329, 330, 331, 332, 333, 334,
	335, 336, 337, 338, 339, 340, 341, 342, 343, 344,
	345, 346, 347, 348, 349, 350, 351, 352, 353, 354,
	355, 356, 357, 358, 359, 360, 361, 362, 363, 364,
	365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
	375, 376, 377, 378, 379, 380, 381, 382, 383, 384,
	385, 386, 387, 388, 389, 390, 391, 392, 393, 394,
	395, 396, 397, 398, 399, 400, 401, 402, 403, 404,
	405, 406, 407, 408, 409, 410, 411, 412, 413, 414,
	415, 416, 417, 418, 419, 420, 421, 422, 423, 424,
	425, 426, 427, 428, 429, 430, 431, 432, 433, 434,
	435, 436, 437, 438, 439, 440, 441, 442, 443, 444,
	445, 446, 447, 448, 449, 450, 451, 452, 453, 454,
	455, 456, 457, 458, 459, 460, 461, 462, 463, 464,
	465, 466, 467, 468, 469, 470, 471, 472, 473, 474,
	475, 476, 477, 478, 479, 480, 481, 482, 483, 484,
	485, 486, 487, 488, 489, 490, 491, 492, 493, 494,
	495, 496, 497, 498, 499, 500, 501, 502, 503, 504,
	505, 506, 507, 508, 509, 510, 511, 512, 513, 514,
	515, 516, 517, 518, 519, 520, 521, 522, 523, 524,
	525, 526, 527, 528, 529, 530, 531, 532, 533, 534,
	535, 536, 537, 538, 539, 540, 541, 542, 543, 544,
	545, 546, 547, 548, 549, 550, 551, 552, 553, 554,
	555, 556, 557, 558, 559, 560, 561, 562, 563, 564,
	565, 566, 567, 568, 569, 570, 571, 572, 573, 574,
	575, 576, 577, 578, 579, 580, 581, 582, 583, 584,
	585, 586, 587, 588, 589, 590, 591, 592, 593, 594,
	595, 596, 597, 598, 599, 600, 601, 602, 603, 604,
	605, 606, 607, 608, 609, 610, 611, 612, 210, 0,
	194, 152, 149, 0, 191, 192, 153, 0, 0, 0,
	161, 0, 128, 129, 0, 0, 0, 112, 113, 127,
	257, 259, 263, 264, 29, 0, 0, 0, 0, 0,
	77, 78, 0, 80, 81, 82, 574, 232, 445, 244,
	274, 275, 276, 277, 278, 243, 217, -2, -2, 279,
	280, 0, 272, 287, 613, 614, 615, 616, 617, 618,
	619, 620, 621, 622, 623, 624, 625, 626, 627, 628,
	629, 630, 631, 632, 633, 634, 635, 127, 0, 211,
	186, 187, 0, 0, 254, 252, 253, 116, 193, 117,
	151, 154, 0, 0, 156, 0, 158, 0, 189, 190,
	195, 199, 200, 204, 208, 209, 197, 0, 201, -2,
	102, 0, 124, 118, 119, 125, 126, 137, 138, 4,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 68, 0, 262, 0,
	33, 34, 48, 51, 52, 0, -2, 602, 83, 0,
	-2, 248, 0, 0, 242, 169, 0, 0, 99, 0,
	0, 0, 256, 150, 0, 159, 0, 202, 0, 281,
	198, 206, 207, 155, 100, 0, 160, 265, 0, 0,
	7, 2, 3, 213, 0, 260, 30, 17, 18, 19,
	22, 23, 24, 25, 26, 27, 28, 285, 286, 31,
	12, 0, 35, 36, 37, 38, 39, 40, -2, -2,
	-2, -2, -2, -2, 47, 49, 50, -2, 0, 0,
	0, -2, 0, 65, 0, 69, 71, 73, 0, 261,
	292, 293, 294, 295, 296, 636, 637, 638, 639, 640,
	641, 642, 643, 644, 645, 646, 647, 648, 649, 650,
	651, 652, 653, 654, 655, 656, 657, 658, 659, 660,
	661, 662, 663, 664, 665, 666, 667, 668, 669, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 250, 0, 249, 246, 247, 271, 241, 237,
	0, 89, 0, 0, 84, 136, 0, 0, 0, 105,
	107, 0, -2, 213, 0, 103, 188, 255, 157, 0,
	0, 101, 0, 139, 7, 234, 0, 218, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 141, 0, 143, 0, 97, 98, 9, 16, 20,
	0, 13, 0, 0, 0, -2, -2, 0, 0, -2,
	67, 70, 72, 74, 0, 0, 79, 233, 0, 238,
	0, 0, 167, 168, 172, 0, 0, 0, 135, 136,
	136, 88, 0, 0, 143, 0, 132, 196, 203, 266,
	140, 0, 5, 6, 148, 0, 212, 0, 0, 0,
	0, 0, 11, 0, 0, 14, 32, -2, 0, 0,
	-2, -2, 0, 0, -2, 251, 236, 240, 0, 174,
	171, 0, 85, 106, 0, 0, 108, 109, 148, 104,
	0, 163, 0, 0, 92, 0, 0, 0, 10, 21,
	15, -2, -2, 0, -2, -2, 239, 136, 0, 216,
	86, 87, 163, 235, 120, 0, 147, 142, 144, 146,
	93, 94, 0, 0, -2, 177, 0, 121, 162, 164,
	0, 0, 0, 96, 0, 0, 0, 173, 0, 0,
	145, 0, 90, 170, 175, 178, -2, 537, 342, 0,
	176, 165, 166, 0, 95, 0, 180, 181, 182, 183,
	184, 91, 0, 179,
}
var sqlTok1 = []int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 448, 3, 3,
	453, 454, 446, 444, 456, 445, 455, 447, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	440, 442, 441, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 451, 3, 452, 449,
}
var sqlTok2 = []int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132, 133, 134, 135, 136, 137, 138, 139, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257,
}
var sqlTok3 = []int{
	57600, 258, 57601, 259, 57602, 260, 57603, 261, 57604, 262,
	57605, 263, 57606, 264, 57607, 265, 57608, 266, 57609, 267,
	57610, 268, 57611, 269, 57612, 270, 57613, 271, 57614, 272,
	57615, 273, 57616, 274, 57617, 275, 57618, 276, 57619, 277,
	57620, 278, 57621, 279, 57622, 280, 57623, 281, 57624, 282,
	57625, 283, 57626, 284, 57627, 285, 57628, 286, 57629, 287,
	57630, 288, 57631, 289, 57632, 290, 57633, 291, 57634, 292,
	57635, 293, 57636, 294, 57637, 295, 57638, 296, 57639, 297,
	57640, 298, 57641, 299, 57642, 300, 57643, 301, 57644, 302,
	57645, 303, 57646, 304, 57647, 305, 57648, 306, 57649, 307,
	57650, 308, 57651, 309, 57652, 310, 57653, 311, 57654, 312,
	57655, 313, 57656, 314, 57657, 315, 57658, 316, 57659, 317,
	57660, 318, 57661, 319, 57662, 320, 57663, 321, 57664, 322,
	57665, 323, 57666, 324, 57667, 325, 57668, 326, 57669, 327,
	57670, 328, 57671, 329, 57672, 330, 57673, 331, 57674, 332,
	57675, 333, 57676, 334, 57677, 335, 57678, 336, 57679, 337,
	57680, 338, 57681, 339, 57682, 340, 57683, 341, 57684, 342,
	57685, 343, 57686, 344, 57687, 345, 57688, 346, 57689, 347,
	57690, 348, 57691, 349, 57692, 350, 57693, 351, 57694, 352,
	57695, 353, 57696, 354, 57697, 355, 57698, 356, 57699, 357,
	57700, 358, 57701, 359, 57702, 360, 57703, 361, 57704, 362,
	57705, 363, 57706, 364, 57707, 365, 57708, 366, 57709, 367,
	57710, 368, 57711, 369, 57712, 370, 57713, 371, 57714, 372,
	57715, 373, 57716, 374, 57717, 375, 57718, 376, 57719, 377,
	57720, 378, 57721, 379, 57722, 380, 57723, 381, 57724, 382,
	57725, 383, 57726, 384, 57727, 385, 57728, 386, 57729, 387,
	57730, 388, 57731, 389, 57732, 390, 57733, 391, 57734, 392,
	57735, 393, 57736, 394, 57737, 395, 57738, 396, 57739, 397,
	57740, 398, 57741, 399, 57742, 400, 57743, 401, 57744, 402,
	57745, 403, 57746, 404, 57747, 405, 57748, 406, 57749, 407,
	57750, 408, 57751, 409, 57752, 410, 57753, 411, 57754, 412,
	57755, 413, 57756, 414, 57757, 415, 57758, 416, 57759, 417,
	57760, 418, 57761, 419, 57762, 420, 57763, 421, 57764, 422,
	57765, 423, 57766, 424, 57767, 425, 57768, 426, 57769, 427,
	57770, 428, 57771, 429, 57772, 430, 57773, 431, 57774, 432,
	57775, 433, 57776, 434, 57777, 435, 57778, 436, 57779, 437,
	57780, 438, 57781, 439, 57782, 443, 57783, 450, 0,
}

//line yaccpar:1

/*	parser for yacc output	*/

var sqlDebug = 0

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	// 4 is TOKSTART above
	if c >= 4 && c-4 < len(sqlToknames) {
		if sqlToknames[c-4] != "" {
			return sqlToknames[c-4]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqllex1(lex sqlLexer, lval *sqlSymType) int {
	c := 0
	char := lex.Lex(lval)
	if char <= 0 {
		c = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		c = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			c = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		c = sqlTok3[i+0]
		if c == char {
			c = sqlTok3[i+1]
			goto out
		}
	}

out:
	if c == 0 {
		c = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(c), uint(char))
	}
	return c
}

func sqlParse(sqllex sqlLexer) int {
	var sqln int
	var sqllval sqlSymType
	var sqlVAL sqlSymType
	sqlS := make([]sqlSymType, sqlMaxDepth)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlchar := -1
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqlchar), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlchar < 0 {
		sqlchar = sqllex1(sqllex, &sqllval)
	}
	sqln += sqlchar
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqlchar { /* valid shift */
		sqlchar = -1
		sqlVAL = sqllval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlchar < 0 {
			sqlchar = sqllex1(sqllex, &sqllval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqlchar {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error("syntax error")
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqlchar))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqlchar))
			}
			if sqlchar == sqlEofCode {
				goto ret1
			}
			sqlchar = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		//line sql.y:332
		{
			sqlVAL.sqlSelect = sqlS[sqlpt-0].sqlSelect
			sqllex.(*sqlLex).stmt = sqlS[sqlpt-0].sqlSelect
		}
	case 2:
		//line sql.y:338
		{
			sqlVAL.str = "asc"
		}
	case 3:
		//line sql.y:339
		{
			sqlVAL.str = "desc"
		}
	case 4:
		//line sql.y:340
		{
			sqlVAL.str = ""
		}
	case 5:
		//line sql.y:343
		{
			sqlVAL.str = "first"
		}
	case 6:
		//line sql.y:344
		{
			sqlVAL.str = "last"
		}
	case 7:
		//line sql.y:345
		{
			sqlVAL.str = ""
		}
	case 8:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 9:
		//line sql.y:354
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 10:
		//line sql.y:358
		{
			sqlVAL.expr = AliasedExpr{Expr: sqlS[sqlpt-2].expr, Alias: sqlS[sqlpt-0].str}
		}
	case 11:
		//line sql.y:362
		{
			sqlVAL.expr = AliasedExpr{Expr: sqlS[sqlpt-1].expr, Alias: sqlS[sqlpt-0].str}
		}
	case 12:
		//line sql.y:368
		{
			sqlVAL.qualifiedName = QualifiedName{sqlS[sqlpt-0].str}
		}
	case 13:
		//line sql.y:370
		{
			sqlVAL.qualifiedName = QualifiedName{sqlS[sqlpt-1].str}
			sqlVAL.qualifiedName = append(sqlVAL.qualifiedName, sqlS[sqlpt-0].qualifiedName...)
		}
	case 14:
		//line sql.y:377
		{
			sqlVAL.qualifiedName = QualifiedName{sqlS[sqlpt-0].str}
		}
	case 15:
		//line sql.y:381
		{
			sqlVAL.qualifiedName = append(sqlS[sqlpt-2].qualifiedName, sqlS[sqlpt-0].str)
		}
	case 16:
		//line sql.y:399
		{
			sqlVAL.pgType = sqlS[sqlpt-1].pgType
		}
	case 17:
		//line sql.y:425
		{
			sqlVAL.placeholder = nil
		}
	case 18:
		//line sql.y:428
		{
			sqlVAL.pgType = sqlS[sqlpt-0].pgType
		}
	case 19:
		//line sql.y:429
		{
			sqlVAL.pgType = sqlS[sqlpt-0].pgType
		}
	case 20:
		//line sql.y:476
		{
			sqlVAL.pgType = PgType{Name: sqlS[sqlpt-1].str}
		}
	case 21:
		//line sql.y:487
		{
			sqlVAL.placeholder = sqlS[sqlpt-1].fields
		}
	case 22:
		//line sql.y:488
		{
			sqlVAL.placeholder = nil
		}
	case 23:
		//line sql.y:495
		{
			sqlVAL.pgType = PgType{Name: "int"}
		}
	case 24:
		//line sql.y:499
		{
			sqlVAL.pgType = PgType{Name: "integer"}
		}
	case 25:
		//line sql.y:503
		{
			sqlVAL.pgType = PgType{Name: "smallint"}
		}
	case 26:
		//line sql.y:507
		{
			sqlVAL.pgType = PgType{Name: "bigint"}
		}
	case 27:
		//line sql.y:511
		{
			sqlVAL.pgType = PgType{Name: "real"}
		}
	case 28:
		//line sql.y:545
		{
			sqlVAL.pgType = PgType{Name: "bool"}
		}
	case 29:
		sqlVAL.expr = sqlS[sqlpt-0].expr
	case 30:
		//line sql.y:601
		{
			sqlVAL.expr = TypecastExpr{Expr: sqlS[sqlpt-2].expr, Typename: sqlS[sqlpt-0].pgType}
		}
	case 31:
		//line sql.y:605
		{
			sqlVAL.expr = CollateExpr{Expr: sqlS[sqlpt-2].expr, Collation: sqlS[sqlpt-0].qualifiedName}
		}
	case 32:
		//line sql.y:609
		{
			sqlVAL.expr = AtTimeZoneExpr{Expr: sqlS[sqlpt-4].expr, TimeZone: sqlS[sqlpt-0].expr}
		}
	case 33:
		//line sql.y:622
		{
			sqlVAL.expr = UnaryExpr{Operator: "+", Expr: sqlS[sqlpt-0].expr}
		}
	case 34:
		//line sql.y:626
		{
			sqlVAL.expr = UnaryExpr{Operator: "-", Expr: sqlS[sqlpt-0].expr}
		}
	case 35:
		//line sql.y:630
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "+", Right: sqlS[sqlpt-0].expr}
		}
	case 36:
		//line sql.y:634
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "-", Right: sqlS[sqlpt-0].expr}
		}
	case 37:
		//line sql.y:638
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "*", Right: sqlS[sqlpt-0].expr}
		}
	case 38:
		//line sql.y:642
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "/", Right: sqlS[sqlpt-0].expr}
		}
	case 39:
		//line sql.y:646
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "%", Right: sqlS[sqlpt-0].expr}
		}
	case 40:
		//line sql.y:650
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "^", Right: sqlS[sqlpt-0].expr}
		}
	case 41:
		//line sql.y:654
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "<", Right: sqlS[sqlpt-0].expr}
		}
	case 42:
		//line sql.y:658
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: ">", Right: sqlS[sqlpt-0].expr}
		}
	case 43:
		//line sql.y:662
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "=", Right: sqlS[sqlpt-0].expr}
		}
	case 44:
		//line sql.y:666
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "<=", Right: sqlS[sqlpt-0].expr}
		}
	case 45:
		//line sql.y:670
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: ">=", Right: sqlS[sqlpt-0].expr}
		}
	case 46:
		//line sql.y:674
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: "!=", Right: sqlS[sqlpt-0].expr}
		}
	case 47:
		//line sql.y:678
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-2].expr, Operator: sqlS[sqlpt-1].str, Right: sqlS[sqlpt-0].expr}
		}
	case 48:
		//line sql.y:682
		{
			sqlVAL.expr = UnaryExpr{Operator: sqlS[sqlpt-1].str, Expr: sqlS[sqlpt-0].expr}
		}
	case 49:
		//line sql.y:689
		{
			sqlVAL.expr = BooleanExpr{Left: sqlS[sqlpt-2].expr, Operator: "and", Right: sqlS[sqlpt-0].expr}
		}
	case 50:
		//line sql.y:693
		{
			sqlVAL.expr = BooleanExpr{Left: sqlS[sqlpt-2].expr, Operator: "or", Right: sqlS[sqlpt-0].expr}
		}
	case 51:
		//line sql.y:697
		{
			sqlVAL.expr = NotExpr{Expr: sqlS[sqlpt-0].expr}
		}
	case 52:
		//line sql.y:701
		{
			sqlVAL.expr = NotExpr{Expr: sqlS[sqlpt-0].expr}
		}
	case 53:
		//line sql.y:705
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-2].expr, Operator: "like", Right: sqlS[sqlpt-0].expr}
		}
	case 54:
		//line sql.y:709
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-4].expr, Operator: "like", Right: sqlS[sqlpt-2].expr, Escape: sqlS[sqlpt-0].expr}
		}
	case 55:
		//line sql.y:713
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-3].expr, Operator: "not like", Right: sqlS[sqlpt-0].expr}
		}
	case 56:
		//line sql.y:717
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-5].expr, Operator: "not like", Right: sqlS[sqlpt-2].expr, Escape: sqlS[sqlpt-0].expr}
		}
	case 57:
		//line sql.y:721
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-2].expr, Operator: "ilike", Right: sqlS[sqlpt-0].expr}
		}
	case 58:
		//line sql.y:725
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-4].expr, Operator: "ilike", Right: sqlS[sqlpt-2].expr, Escape: sqlS[sqlpt-0].expr}
		}
	case 59:
		//line sql.y:729
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-3].expr, Operator: "not ilike", Right: sqlS[sqlpt-0].expr}
		}
	case 60:
		//line sql.y:733
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-5].expr, Operator: "not ilike", Right: sqlS[sqlpt-2].expr, Escape: sqlS[sqlpt-0].expr}
		}
	case 61:
		//line sql.y:738
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-3].expr, Operator: "similar to", Right: sqlS[sqlpt-0].expr}
		}
	case 62:
		//line sql.y:742
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-5].expr, Operator: "similar to", Right: sqlS[sqlpt-2].expr, Escape: sqlS[sqlpt-0].expr}
		}
	case 63:
		//line sql.y:746
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-4].expr, Operator: "not similar to", Right: sqlS[sqlpt-0].expr}
		}
	case 64:
		//line sql.y:750
		{
			sqlVAL.expr = TextOpWithEscapeExpr{Left: sqlS[sqlpt-6].expr, Operator: "not similar to", Right: sqlS[sqlpt-2].expr, Escape: sqlS[sqlpt-0].expr}
		}
	case 65:
		//line sql.y:763
		{
			sqlVAL.expr = IsNullExpr{Expr: sqlS[sqlpt-2].expr}
		}
	case 66:
		//line sql.y:767
		{
			sqlVAL.expr = IsNullExpr{Expr: sqlS[sqlpt-1].expr}
		}
	case 67:
		//line sql.y:771
		{
			sqlVAL.expr = IsNullExpr{Expr: sqlS[sqlpt-3].expr, Not: true}
		}
	case 68:
		//line sql.y:775
		{
			sqlVAL.expr = IsNullExpr{Expr: sqlS[sqlpt-1].expr, Not: true}
		}
	case 69:
		//line sql.y:782
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlS[sqlpt-2].expr, Op: "true"}
		}
	case 70:
		//line sql.y:786
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlS[sqlpt-3].expr, Not: true, Op: "true"}
		}
	case 71:
		//line sql.y:790
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlS[sqlpt-2].expr, Op: "false"}
		}
	case 72:
		//line sql.y:794
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlS[sqlpt-3].expr, Not: true, Op: "false"}
		}
	case 73:
		//line sql.y:798
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlS[sqlpt-2].expr, Op: "unknown"}
		}
	case 74:
		//line sql.y:802
		{
			sqlVAL.expr = IsBoolOpExpr{Expr: sqlS[sqlpt-3].expr, Not: true, Op: "unknown"}
		}
	case 75:
		//line sql.y:806
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-4].expr, Operator: "is distinct from", Right: sqlS[sqlpt-0].expr}
		}
	case 76:
		//line sql.y:810
		{
			sqlVAL.expr = BinaryExpr{Left: sqlS[sqlpt-5].expr, Operator: "is not distinct from", Right: sqlS[sqlpt-0].expr}
		}
	case 77:
		//line sql.y:837
		{
			sqlVAL.expr = sqlS[sqlpt-0].qualifiedName
		}
	case 78:
		//line sql.y:838
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 79:
		//line sql.y:845
		{
			sqlVAL.expr = ParenExpr{Expr: sqlS[sqlpt-2].expr}
		}
	case 80:
		//line sql.y:848
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 81:
		//line sql.y:849
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 82:
		//line sql.y:851
		{
			sqlVAL.expr = sqlS[sqlpt-0].sqlSelect
		}
	case 83:
		//line sql.y:858
		{
			sqlVAL.expr = ExistsExpr(*sqlS[sqlpt-0].sqlSelect)
		}
	case 84:
		//line sql.y:873
		{
			sqlVAL.funcApplication = FuncApplication{Name: sqlS[sqlpt-2].str}
		}
	case 85:
		//line sql.y:877
		{
			sqlVAL.funcApplication = FuncApplication{Name: sqlS[sqlpt-4].str, Args: sqlS[sqlpt-2].funcArgs, OrderClause: sqlS[sqlpt-1].orderClause}
		}
	case 86:
		//line sql.y:885
		{
			sqlVAL.funcApplication = FuncApplication{Name: sqlS[sqlpt-5].str, Args: sqlS[sqlpt-2].funcArgs, OrderClause: sqlS[sqlpt-1].orderClause}
		}
	case 87:
		//line sql.y:889
		{
			sqlVAL.funcApplication = FuncApplication{Name: sqlS[sqlpt-5].str, Distinct: true, Args: sqlS[sqlpt-2].funcArgs, OrderClause: sqlS[sqlpt-1].orderClause}
		}
	case 88:
		//line sql.y:893
		{
			sqlVAL.funcApplication = FuncApplication{Name: sqlS[sqlpt-3].str, Star: true}
		}
	case 89:
		//line sql.y:909
		{
			sqlVAL.expr = &FuncExpr{FuncApplication: sqlS[sqlpt-2].funcApplication, FilterClause: sqlS[sqlpt-1].filterClause, OverClause: sqlS[sqlpt-0].overClause}
		}
	case 90:
		//line sql.y:927
		{
			sqlVAL.identifiers = []string{sqlS[sqlpt-0].str}
		}
	case 91:
		//line sql.y:931
		{
			sqlVAL.identifiers = append(sqlS[sqlpt-2].identifiers, sqlS[sqlpt-0].str)
		}
	case 92:
		//line sql.y:937
		{
			sqlVAL.expr = JoinExpr{Left: sqlS[sqlpt-2].expr, Join: ",", Right: sqlS[sqlpt-0].expr}
		}
	case 93:
		//line sql.y:941
		{
			sqlVAL.expr = JoinExpr{Left: sqlS[sqlpt-3].expr, Join: "cross join", Right: sqlS[sqlpt-0].expr}
		}
	case 94:
		//line sql.y:945
		{
			sqlVAL.expr = JoinExpr{Left: sqlS[sqlpt-3].expr, Join: "natural join", Right: sqlS[sqlpt-0].expr}
		}
	case 95:
		//line sql.y:949
		{
			sqlVAL.expr = JoinExpr{Left: sqlS[sqlpt-6].expr, Join: "join", Right: sqlS[sqlpt-4].expr, Using: sqlS[sqlpt-1].identifiers}
		}
	case 96:
		//line sql.y:953
		{
			sqlVAL.expr = JoinExpr{Left: sqlS[sqlpt-4].expr, Join: "join", Right: sqlS[sqlpt-2].expr, On: sqlS[sqlpt-0].expr}
		}
	case 97:
		//line sql.y:959
		{
			sqlVAL.fromClause = &FromClause{Expr: sqlS[sqlpt-0].expr}
		}
	case 98:
		//line sql.y:963
		{
			sqlVAL.fromClause = &FromClause{Expr: sqlS[sqlpt-0].expr}
		}
	case 99:
		//line sql.y:966
		{
			sqlVAL.fromClause = nil
		}
	case 100:
		//line sql.y:970
		{
			sqlVAL.str = "nowait"
		}
	case 101:
		//line sql.y:971
		{
			sqlVAL.str = "skip locked"
		}
	case 102:
		//line sql.y:972
		{
			sqlVAL.str = ""
		}
	case 103:
		//line sql.y:977
		{
			sqlVAL.fields = []Expr{sqlS[sqlpt-0].expr}
		}
	case 104:
		//line sql.y:981
		{
			sqlVAL.fields = append(sqlS[sqlpt-2].fields, sqlS[sqlpt-0].expr)
		}
	case 105:
		//line sql.y:988
		{
			sqlVAL.funcArgs = []FuncArg{sqlS[sqlpt-0].funcArg}
		}
	case 106:
		//line sql.y:992
		{
			sqlVAL.funcArgs = append(sqlS[sqlpt-2].funcArgs, sqlS[sqlpt-0].funcArg)
		}
	case 107:
		//line sql.y:998
		{
			sqlVAL.funcArg = FuncArg{Expr: sqlS[sqlpt-0].expr}
		}
	case 108:
		//line sql.y:1002
		{
			sqlVAL.funcArg = FuncArg{Name: sqlS[sqlpt-2].str, NameOp: ":=", Expr: sqlS[sqlpt-0].expr}
		}
	case 109:
		//line sql.y:1006
		{
			sqlVAL.funcArg = FuncArg{Name: sqlS[sqlpt-2].str, NameOp: "=>", Expr: sqlS[sqlpt-0].expr}
		}
	case 110:
		sqlVAL.sqlSelect = sqlS[sqlpt-0].sqlSelect
	case 111:
		sqlVAL.sqlSelect = sqlS[sqlpt-0].sqlSelect
	case 112:
		//line sql.y:1063
		{
			sqlS[sqlpt-1].sqlSelect.ParenWrapped = true
			sqlVAL.sqlSelect = sqlS[sqlpt-1].sqlSelect
		}
	case 113:
		//line sql.y:1067
		{
			sqlVAL.sqlSelect = sqlS[sqlpt-1].sqlSelect
		}
	case 114:
		//line sql.y:1071
		{
			ss := &SelectStmt{}
			ss.SimpleSelect = *sqlS[sqlpt-0].simpleSelect
			sqlVAL.sqlSelect = ss
		}
	case 115:
		//line sql.y:1077
		{
			sqlS[sqlpt-1].sqlSelect.OrderClause = sqlS[sqlpt-0].orderClause
			sqlVAL.sqlSelect = sqlS[sqlpt-1].sqlSelect
		}
	case 116:
		//line sql.y:1082
		{
			sqlS[sqlpt-3].sqlSelect.OrderClause = sqlS[sqlpt-2].orderClause
			sqlS[sqlpt-3].sqlSelect.LockingClause = sqlS[sqlpt-1].lockingClause
			sqlS[sqlpt-3].sqlSelect.LimitClause = sqlS[sqlpt-0].limitClause
			sqlVAL.sqlSelect = sqlS[sqlpt-3].sqlSelect
		}
	case 117:
		//line sql.y:1089
		{
			sqlS[sqlpt-3].sqlSelect.OrderClause = sqlS[sqlpt-2].orderClause
			sqlS[sqlpt-3].sqlSelect.LimitClause = sqlS[sqlpt-1].limitClause
			sqlS[sqlpt-3].sqlSelect.LockingClause = sqlS[sqlpt-0].lockingClause
			sqlVAL.sqlSelect = sqlS[sqlpt-3].sqlSelect
		}
	case 118:
		//line sql.y:1098
		{
			ss := &SelectStmt{}
			ss.SimpleSelect = *sqlS[sqlpt-0].simpleSelect
			sqlVAL.sqlSelect = ss
		}
	case 119:
		sqlVAL.sqlSelect = sqlS[sqlpt-0].sqlSelect
	case 120:
		//line sql.y:1132
		{
			ss := &SimpleSelect{}
			ss.TargetList = sqlS[sqlpt-6].fields
			ss.FromClause = sqlS[sqlpt-4].fromClause
			ss.WhereClause = sqlS[sqlpt-3].whereClause
			ss.GroupByClause = sqlS[sqlpt-2].groupByClause
			ss.HavingClause = sqlS[sqlpt-1].expr
			ss.WindowClause = sqlS[sqlpt-0].windowDefinitions
			sqlVAL.simpleSelect = ss
		}
	case 121:
		//line sql.y:1145
		{
			ss := &SimpleSelect{}
			ss.DistinctList = sqlS[sqlpt-7].fields
			ss.TargetList = sqlS[sqlpt-6].fields
			ss.FromClause = sqlS[sqlpt-4].fromClause
			ss.WhereClause = sqlS[sqlpt-3].whereClause
			ss.GroupByClause = sqlS[sqlpt-2].groupByClause
			ss.HavingClause = sqlS[sqlpt-1].expr
			ss.WindowClause = sqlS[sqlpt-0].windowDefinitions
			sqlVAL.simpleSelect = ss
		}
	case 122:
		//line sql.y:1157
		{
			ss := &SimpleSelect{}
			ss.ValuesClause = sqlS[sqlpt-0].valuesClause
			sqlVAL.simpleSelect = ss
		}
	case 123:
		//line sql.y:1163
		{
			ss := &SimpleSelect{}
			ss.Table = sqlS[sqlpt-0].relationExpr
			sqlVAL.simpleSelect = ss
		}
	case 124:
		//line sql.y:1169
		{
			ss := &SimpleSelect{}
			ss.LeftSelect = sqlS[sqlpt-3].sqlSelect
			ss.SetOp = "union"
			ss.SetAll = sqlS[sqlpt-1].boolean
			ss.RightSelect = sqlS[sqlpt-0].sqlSelect
			sqlVAL.simpleSelect = ss
		}
	case 125:
		//line sql.y:1178
		{
			ss := &SimpleSelect{}
			ss.LeftSelect = sqlS[sqlpt-3].sqlSelect
			ss.SetOp = "intersect"
			ss.SetAll = sqlS[sqlpt-1].boolean
			ss.RightSelect = sqlS[sqlpt-0].sqlSelect
			sqlVAL.simpleSelect = ss
		}
	case 126:
		//line sql.y:1187
		{
			ss := &SimpleSelect{}
			ss.LeftSelect = sqlS[sqlpt-3].sqlSelect
			ss.SetOp = "except"
			ss.SetAll = sqlS[sqlpt-1].boolean
			ss.RightSelect = sqlS[sqlpt-0].sqlSelect
			sqlVAL.simpleSelect = ss
		}
	case 127:
		//line sql.y:1211
		{
			sqlVAL.placeholder = nil
		}
	case 128:
		//line sql.y:1216
		{
			sqlVAL.boolean = true
		}
	case 129:
		//line sql.y:1217
		{
			sqlVAL.boolean = false
		}
	case 130:
		//line sql.y:1218
		{
			sqlVAL.boolean = false
		}
	case 131:
		//line sql.y:1223
		{
			sqlVAL.fields = make([]Expr, 0)
		}
	case 132:
		//line sql.y:1224
		{
			sqlVAL.fields = sqlS[sqlpt-1].fields
		}
	case 133:
		//line sql.y:1227
		{
			sqlVAL.placeholder = nil
		}
	case 134:
		//line sql.y:1228
		{
			sqlVAL.placeholder = nil
		}
	case 135:
		//line sql.y:1231
		{
			sqlVAL.orderClause = sqlS[sqlpt-0].orderClause
		}
	case 136:
		//line sql.y:1232
		{
			sqlVAL.orderClause = nil
		}
	case 137:
		//line sql.y:1235
		{
			sqlVAL.orderClause = sqlS[sqlpt-0].orderClause
		}
	case 138:
		//line sql.y:1239
		{
			sqlVAL.orderClause = &OrderClause{Exprs: []OrderExpr{sqlS[sqlpt-0].orderExpr}}
		}
	case 139:
		//line sql.y:1243
		{
			sqlS[sqlpt-2].orderClause.Exprs = append(sqlS[sqlpt-2].orderClause.Exprs, sqlS[sqlpt-0].orderExpr)
			sqlVAL.orderClause = sqlS[sqlpt-2].orderClause
		}
	case 140:
		//line sql.y:1251
		{
			sqlVAL.orderExpr = OrderExpr{Expr: sqlS[sqlpt-3].expr, Using: sqlS[sqlpt-1].str, Nulls: sqlS[sqlpt-0].str}
		}
	case 141:
		//line sql.y:1255
		{
			sqlVAL.orderExpr = OrderExpr{Expr: sqlS[sqlpt-2].expr, Order: sqlS[sqlpt-1].str, Nulls: sqlS[sqlpt-0].str}
		}
	case 142:
		//line sql.y:1280
		{
			sqlVAL.groupByClause = &GroupByClause{Exprs: sqlS[sqlpt-0].fields}
		}
	case 143:
		//line sql.y:1281
		{
			sqlVAL.groupByClause = nil
		}
	case 144:
		//line sql.y:1285
		{
			sqlVAL.fields = []Expr{sqlS[sqlpt-0].expr}
		}
	case 145:
		//line sql.y:1289
		{
			sqlVAL.fields = append(sqlS[sqlpt-2].fields, sqlS[sqlpt-0].expr)
		}
	case 146:
		sqlVAL.expr = sqlS[sqlpt-0].expr
	case 147:
		//line sql.y:1302
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 148:
		//line sql.y:1303
		{
			sqlVAL.expr = nil
		}
	case 149:
		//line sql.y:1306
		{
			sqlVAL.lockingClause = sqlS[sqlpt-0].lockingClause
		}
	case 150:
		//line sql.y:1307
		{
			sqlVAL.lockingClause = nil
		}
	case 151:
		//line sql.y:1310
		{
			sqlVAL.lockingClause = sqlS[sqlpt-0].lockingClause
		}
	case 152:
		//line sql.y:1311
		{
			sqlVAL.lockingClause = nil
		}
	case 153:
		//line sql.y:1315
		{
			sqlVAL.lockingClause = &LockingClause{Locks: []LockingItem{sqlS[sqlpt-0].lockingItem}}
		}
	case 154:
		//line sql.y:1319
		{
			sqlS[sqlpt-1].lockingClause.Locks = append(sqlS[sqlpt-1].lockingClause.Locks, sqlS[sqlpt-0].lockingItem)
			sqlVAL.lockingClause = sqlS[sqlpt-1].lockingClause
		}
	case 155:
		//line sql.y:1326
		{
			sqlVAL.lockingItem = LockingItem{Strength: sqlS[sqlpt-2].str, LockedRels: sqlS[sqlpt-1].identifiers, WaitPolicy: sqlS[sqlpt-0].str}
		}
	case 156:
		//line sql.y:1331
		{
			sqlVAL.str = "update"
		}
	case 157:
		//line sql.y:1332
		{
			sqlVAL.str = "no key update"
		}
	case 158:
		//line sql.y:1333
		{
			sqlVAL.str = "share"
		}
	case 159:
		//line sql.y:1334
		{
			sqlVAL.str = "key share"
		}
	case 160:
		//line sql.y:1337
		{
			sqlVAL.identifiers = sqlS[sqlpt-0].identifiers
		}
	case 161:
		//line sql.y:1338
		{
			sqlVAL.identifiers = nil
		}
	case 162:
		//line sql.y:1346
		{
			sqlVAL.windowDefinitions = sqlS[sqlpt-0].windowDefinitions
		}
	case 163:
		//line sql.y:1349
		{
			sqlVAL.windowDefinitions = nil
		}
	case 164:
		//line sql.y:1353
		{
			sqlVAL.windowDefinitions = []WindowDefinition{sqlS[sqlpt-0].windowDefinition}
		}
	case 165:
		//line sql.y:1357
		{
			sqlVAL.windowDefinitions = append(sqlS[sqlpt-2].windowDefinitions, sqlS[sqlpt-0].windowDefinition)
		}
	case 166:
		//line sql.y:1363
		{
			sqlVAL.windowDefinition = WindowDefinition{Name: sqlS[sqlpt-2].str, Specification: sqlS[sqlpt-0].windowSpecification}
		}
	case 167:
		//line sql.y:1369
		{
			spec := sqlS[sqlpt-0].windowSpecification
			sqlVAL.overClause = &OverClause{Specification: &spec}
		}
	case 168:
		//line sql.y:1374
		{
			sqlVAL.overClause = &OverClause{Name: sqlS[sqlpt-0].str}
		}
	case 169:
		//line sql.y:1377
		{
			sqlVAL.overClause = nil
		}
	case 170:
		//line sql.y:1381
		{
			sqlVAL.windowSpecification = WindowSpecification{ExistingName: sqlS[sqlpt-4].str, PartitionClause: sqlS[sqlpt-3].partitionClause, OrderClause: sqlS[sqlpt-2].orderClause, FrameClause: sqlS[sqlpt-1].frameClause}
		}
	case 171:
		//line sql.y:1396
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 172:
		//line sql.y:1397
		{
			sqlVAL.str = ""
		}
	case 173:
		//line sql.y:1400
		{
			sqlVAL.partitionClause = PartitionClause(sqlS[sqlpt-0].fields)
		}
	case 174:
		//line sql.y:1401
		{
			sqlVAL.partitionClause = nil
		}
	case 175:
		//line sql.y:1412
		{
			sqlS[sqlpt-0].frameClause.Mode = "range"
			sqlVAL.frameClause = sqlS[sqlpt-0].frameClause
		}
	case 176:
		//line sql.y:1417
		{
			sqlS[sqlpt-0].frameClause.Mode = "rows"
			sqlVAL.frameClause = sqlS[sqlpt-0].frameClause
		}
	case 177:
		//line sql.y:1422
		{
			sqlVAL.frameClause = nil
		}
	case 178:
		//line sql.y:1428
		{
			sqlVAL.frameClause = &FrameClause{Start: sqlS[sqlpt-0].frameBound}
		}
	case 179:
		//line sql.y:1432
		{
			sqlVAL.frameClause = &FrameClause{Start: sqlS[sqlpt-2].frameBound, End: sqlS[sqlpt-0].frameBound}
		}
	case 180:
		//line sql.y:1443
		{
			sqlVAL.frameBound = &FrameBound{Direction: "preceding"}
		}
	case 181:
		//line sql.y:1447
		{
			sqlVAL.frameBound = &FrameBound{Direction: "following"}
		}
	case 182:
		//line sql.y:1451
		{
			sqlVAL.frameBound = &FrameBound{CurrentRow: true}
		}
	case 183:
		//line sql.y:1455
		{
			sqlVAL.frameBound = &FrameBound{BoundExpr: sqlS[sqlpt-1].expr, Direction: "preceding"}
		}
	case 184:
		//line sql.y:1459
		{
			sqlVAL.frameBound = &FrameBound{BoundExpr: sqlS[sqlpt-1].expr, Direction: "following"}
		}
	case 185:
		//line sql.y:1467
		{
			sqlVAL.relationExpr = &RelationExpr{Name: sqlS[sqlpt-0].str}
		}
	case 186:
		//line sql.y:1471
		{
			sqlVAL.relationExpr = &RelationExpr{Name: sqlS[sqlpt-1].str, Star: true}
		}
	case 187:
		//line sql.y:1475
		{
			sqlVAL.relationExpr = &RelationExpr{Name: sqlS[sqlpt-0].str, Only: true}
		}
	case 188:
		//line sql.y:1479
		{
			sqlVAL.relationExpr = &RelationExpr{Name: sqlS[sqlpt-1].str, Only: true}
		}
	case 189:
		//line sql.y:1487
		{
			sqlVAL.limitClause = &LimitClause{Limit: sqlS[sqlpt-1].expr, Offset: sqlS[sqlpt-0].expr}
		}
	case 190:
		//line sql.y:1491
		{
			sqlVAL.limitClause = &LimitClause{Limit: sqlS[sqlpt-0].expr, Offset: sqlS[sqlpt-1].expr}
		}
	case 191:
		//line sql.y:1495
		{
			sqlVAL.limitClause = &LimitClause{Limit: sqlS[sqlpt-0].expr}
		}
	case 192:
		//line sql.y:1499
		{
			sqlVAL.limitClause = &LimitClause{Offset: sqlS[sqlpt-0].expr}
		}
	case 193:
		sqlVAL.limitClause = sqlS[sqlpt-0].limitClause
	case 194:
		//line sql.y:1506
		{
			sqlVAL.limitClause = nil
		}
	case 195:
		//line sql.y:1510
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 196:
		//line sql.y:1515
		{
			sqlVAL.expr = sqlS[sqlpt-2].expr
		}
	case 197:
		//line sql.y:1521
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 198:
		//line sql.y:1526
		{
			sqlVAL.expr = sqlS[sqlpt-1].expr
		}
	case 199:
		//line sql.y:1531
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 200:
		//line sql.y:1533
		{
			sqlVAL.expr = nil
		}
	case 201:
		//line sql.y:1538
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 202:
		//line sql.y:1547
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 203:
		//line sql.y:1548
		{
			sqlVAL.expr = sqlS[sqlpt-1].expr
		}
	case 204:
		//line sql.y:1549
		{
			sqlVAL.expr = IntegerLiteral("1")
		}
	case 205:
		//line sql.y:1556
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 206:
		//line sql.y:1560
		{
			sqlVAL.placeholder = 0
		}
	case 207:
		//line sql.y:1561
		{
			sqlVAL.placeholder = 0
		}
	case 208:
		//line sql.y:1564
		{
			sqlVAL.placeholder = 0
		}
	case 209:
		//line sql.y:1565
		{
			sqlVAL.placeholder = 0
		}
	case 210:
		//line sql.y:1569
		{
			sqlVAL.valuesClause = ValuesClause{sqlS[sqlpt-0].valuesRow}
		}
	case 211:
		//line sql.y:1573
		{
			sqlVAL.valuesClause = append(sqlS[sqlpt-2].valuesClause, sqlS[sqlpt-0].valuesRow)
		}
	case 212:
		//line sql.y:1590
		{
			sqlVAL.whereClause = &WhereClause{Expr: sqlS[sqlpt-0].expr}
		}
	case 213:
		//line sql.y:1591
		{
			sqlVAL.whereClause = nil
		}
	case 214:
		//line sql.y:1600
		{
			panic("TODO")
		}
	case 215:
		//line sql.y:1601
		{
			sqlVAL.placeholder = nil
		}
	case 216:
		//line sql.y:1606
		{
			sqlVAL.filterClause = &FilterClause{Expr: sqlS[sqlpt-1].expr}
		}
	case 217:
		//line sql.y:1609
		{
			sqlVAL.filterClause = nil
		}
	case 218:
		//line sql.y:1613
		{
			sqlVAL.str = string(sqlS[sqlpt-0].str)
		}
	case 219:
		//line sql.y:1614
		{
			sqlVAL.str = string(sqlS[sqlpt-0].str)
		}
	case 220:
		//line sql.y:1617
		{
			sqlVAL.str = "+"
		}
	case 221:
		//line sql.y:1618
		{
			sqlVAL.str = "-"
		}
	case 222:
		//line sql.y:1619
		{
			sqlVAL.str = "*"
		}
	case 223:
		//line sql.y:1620
		{
			sqlVAL.str = "/"
		}
	case 224:
		//line sql.y:1621
		{
			sqlVAL.str = "%"
		}
	case 225:
		//line sql.y:1622
		{
			sqlVAL.str = "^"
		}
	case 226:
		//line sql.y:1623
		{
			sqlVAL.str = "<"
		}
	case 227:
		//line sql.y:1624
		{
			sqlVAL.str = ">"
		}
	case 228:
		//line sql.y:1625
		{
			sqlVAL.str = "="
		}
	case 229:
		//line sql.y:1626
		{
			sqlVAL.str = "<="
		}
	case 230:
		//line sql.y:1627
		{
			sqlVAL.str = ">="
		}
	case 231:
		//line sql.y:1628
		{
			sqlVAL.str = "<>"
		}
	case 232:
		//line sql.y:1631
		{
			sqlVAL.str = string(sqlS[sqlpt-0].str)
		}
	case 233:
		//line sql.y:1632
		{
			sqlVAL.str = sqlS[sqlpt-1].str
		}
	case 234:
		//line sql.y:1635
		{
			sqlVAL.str = string(sqlS[sqlpt-0].str)
		}
	case 235:
		//line sql.y:1636
		{
			sqlVAL.str = sqlS[sqlpt-1].str
		}
	case 236:
		//line sql.y:1648
		{
			sqlVAL.expr = CaseExpr{CaseArg: sqlS[sqlpt-3].expr, WhenClauses: sqlS[sqlpt-2].whenClauses, Default: sqlS[sqlpt-1].expr}
		}
	case 237:
		//line sql.y:1655
		{
			sqlVAL.whenClauses = []WhenClause{sqlS[sqlpt-0].whenClause}
		}
	case 238:
		//line sql.y:1659
		{
			sqlVAL.whenClauses = append(sqlS[sqlpt-1].whenClauses, sqlS[sqlpt-0].whenClause)
		}
	case 239:
		//line sql.y:1665
		{
			sqlVAL.whenClause = WhenClause{When: sqlS[sqlpt-2].expr, Then: sqlS[sqlpt-0].expr}
		}
	case 240:
		//line sql.y:1670
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 241:
		//line sql.y:1671
		{
			sqlVAL.expr = nil
		}
	case 242:
		//line sql.y:1674
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 243:
		//line sql.y:1675
		{
			sqlVAL.expr = nil
		}
	case 244:
		//line sql.y:1679
		{
			sqlVAL.qualifiedName = QualifiedName{sqlS[sqlpt-0].str}
		}
	case 245:
		//line sql.y:1683
		{
			sqlVAL.qualifiedName = QualifiedName{sqlS[sqlpt-1].str}
			sqlVAL.qualifiedName = append(sqlVAL.qualifiedName, sqlS[sqlpt-0].identifiers...)
		}
	case 246:
		//line sql.y:1692
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 247:
		//line sql.y:1696
		{
			sqlVAL.str = "*"
		}
	case 248:
		//line sql.y:1715
		{
			sqlVAL.identifiers = []string{sqlS[sqlpt-0].str}
		}
	case 249:
		//line sql.y:1716
		{
			sqlVAL.identifiers = append(sqlS[sqlpt-1].identifiers, sqlS[sqlpt-0].str)
		}
	case 250:
		//line sql.y:1719
		{
			sqlVAL.identifiers = nil
		}
	case 251:
		//line sql.y:1721
		{
			if sqlS[sqlpt-1].identifiers != nil {
				sqlVAL.identifiers = append(sqlS[sqlpt-1].identifiers, sqlS[sqlpt-0].str)
			} else {
				sqlVAL.identifiers = []string{sqlS[sqlpt-0].str}
			}
		}
	case 252:
		//line sql.y:1737
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 253:
		//line sql.y:1738
		{
			sqlVAL.expr = DefaultExpr(true)
		}
	case 254:
		//line sql.y:1742
		{
			sqlVAL.valuesRow = ValuesRow{sqlS[sqlpt-0].expr}
		}
	case 255:
		//line sql.y:1746
		{
			sqlVAL.valuesRow = append(sqlS[sqlpt-2].valuesRow, sqlS[sqlpt-0].expr)
		}
	case 256:
		//line sql.y:1757
		{
			sqlVAL.valuesRow = sqlS[sqlpt-1].valuesRow
		}
	case 257:
		//line sql.y:1768
		{
			sqlVAL.fields = sqlS[sqlpt-0].fields
		}
	case 258:
		//line sql.y:1769
		{
			sqlVAL.fields = nil
		}
	case 259:
		//line sql.y:1772
		{
			sqlVAL.fields = []Expr{sqlS[sqlpt-0].expr}
		}
	case 260:
		//line sql.y:1774
		{
			sqlVAL.fields = append(sqlS[sqlpt-2].fields, sqlS[sqlpt-0].expr)
		}
	case 261:
		//line sql.y:1780
		{
			sqlVAL.expr = AliasedExpr{Expr: sqlS[sqlpt-2].expr, Alias: sqlS[sqlpt-0].str}
		}
	case 262:
		//line sql.y:1784
		{
			sqlVAL.expr = AliasedExpr{Expr: sqlS[sqlpt-1].expr, Alias: sqlS[sqlpt-0].str}
		}
	case 263:
		sqlVAL.expr = sqlS[sqlpt-0].expr
	case 264:
		//line sql.y:1789
		{
			sqlVAL.expr = QualifiedName{"*"}
		}
	case 265:
		//line sql.y:1803
		{
			sqlVAL.identifiers = []string{sqlS[sqlpt-0].str}
		}
	case 266:
		//line sql.y:1807
		{
			sqlVAL.identifiers = append(sqlS[sqlpt-2].identifiers, sqlS[sqlpt-0].str)
		}
	case 267:
		//line sql.y:1820
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 268:
		//line sql.y:1852
		{
			sqlVAL.identifiers = []string{sqlS[sqlpt-0].str}
		}
	case 269:
		//line sql.y:1854
		{
			sqlVAL.identifiers = append(sqlS[sqlpt-2].identifiers, sqlS[sqlpt-0].str)
		}
	case 270:
		//line sql.y:1859
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 271:
		//line sql.y:1862
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 272:
		//line sql.y:1875
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 273:
		//line sql.y:1879
		{
			panic("TODO")
		}
	case 274:
		//line sql.y:1889
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 275:
		//line sql.y:1896
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 276:
		//line sql.y:1909
		{
			sqlVAL.expr = BoolLiteral(true)
		}
	case 277:
		//line sql.y:1913
		{
			sqlVAL.expr = BoolLiteral(false)
		}
	case 278:
		//line sql.y:1917
		{
			sqlVAL.expr = NullLiteral{}
		}
	case 279:
		//line sql.y:1921
		{
			sqlVAL.expr = IntegerLiteral(sqlS[sqlpt-0].str)
		}
	case 280:
		//line sql.y:1922
		{
			sqlVAL.expr = StringLiteral(sqlS[sqlpt-0].str)
		}
	case 281:
		//line sql.y:1925
		{
			sqlVAL.expr = sqlS[sqlpt-0].expr
		}
	case 282:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 283:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 284:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 285:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 286:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 287:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 292:
		//line sql.y:1968
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 293:
		//line sql.y:1969
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 294:
		//line sql.y:1970
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 295:
		//line sql.y:1971
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 296:
		//line sql.y:1972
		{
			sqlVAL.str = sqlS[sqlpt-0].str
		}
	case 297:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 298:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 299:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 300:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 301:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 302:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 303:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 304:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 305:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 306:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 307:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 308:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 309:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 310:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 311:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 312:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 313:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 314:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 315:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 316:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 317:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 318:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 319:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 320:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 321:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 322:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 323:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 324:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 325:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 326:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 327:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 328:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 329:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 330:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 331:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 332:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 333:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 334:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 335:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 336:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 337:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 338:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 339:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 340:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 341:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 342:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 343:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 344:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 345:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 346:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 347:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 348:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 349:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 350:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 351:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 352:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 353:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 354:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 355:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 356:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 357:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 358:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 359:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 360:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 361:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 362:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 363:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 364:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 365:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 366:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 367:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 368:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 369:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 370:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 371:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 372:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 373:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 374:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 375:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 376:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 377:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 378:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 379:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 380:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 381:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 382:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 383:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 384:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 385:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 386:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 387:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 388:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 389:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 390:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 391:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 392:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 393:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 394:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 395:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 396:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 397:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 398:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 399:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 400:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 401:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 402:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 403:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 404:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 405:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 406:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 407:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 408:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 409:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 410:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 411:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 412:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 413:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 414:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 415:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 416:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 417:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 418:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 419:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 420:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 421:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 422:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 423:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 424:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 425:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 426:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 427:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 428:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 429:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 430:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 431:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 432:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 433:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 434:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 435:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 436:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 437:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 438:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 439:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 440:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 441:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 442:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 443:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 444:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 445:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 446:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 447:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 448:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 449:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 450:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 451:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 452:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 453:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 454:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 455:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 456:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 457:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 458:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 459:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 460:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 461:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 462:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 463:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 464:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 465:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 466:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 467:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 468:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 469:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 470:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 471:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 472:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 473:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 474:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 475:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 476:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 477:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 478:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 479:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 480:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 481:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 482:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 483:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 484:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 485:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 486:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 487:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 488:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 489:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 490:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 491:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 492:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 493:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 494:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 495:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 496:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 497:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 498:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 499:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 500:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 501:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 502:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 503:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 504:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 505:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 506:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 507:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 508:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 509:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 510:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 511:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 512:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 513:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 514:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 515:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 516:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 517:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 518:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 519:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 520:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 521:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 522:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 523:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 524:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 525:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 526:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 527:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 528:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 529:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 530:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 531:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 532:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 533:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 534:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 535:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 536:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 537:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 538:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 539:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 540:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 541:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 542:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 543:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 544:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 545:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 546:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 547:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 548:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 549:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 550:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 551:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 552:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 553:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 554:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 555:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 556:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 557:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 558:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 559:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 560:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 561:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 562:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 563:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 564:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 565:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 566:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 567:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 568:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 569:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 570:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 571:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 572:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 573:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 574:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 575:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 576:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 577:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 578:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 579:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 580:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 581:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 582:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 583:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 584:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 585:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 586:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 587:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 588:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 589:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 590:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 591:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 592:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 593:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 594:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 595:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 596:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 597:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 598:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 599:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 600:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 601:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 602:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 603:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 604:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 605:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 606:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 607:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 608:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 609:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 610:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 611:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 612:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 613:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 614:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 615:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 616:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 617:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 618:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 619:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 620:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 621:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 622:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 623:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 624:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 625:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 626:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 627:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 628:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 629:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 630:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 631:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 632:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 633:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 634:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 635:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 636:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 637:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 638:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 639:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 640:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 641:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 642:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 643:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 644:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 645:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 646:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 647:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 648:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 649:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 650:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 651:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 652:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 653:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 654:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 655:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 656:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 657:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 658:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 659:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 660:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 661:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 662:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 663:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 664:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 665:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 666:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 667:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 668:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 669:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 670:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 671:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 672:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 673:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 674:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 675:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 676:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 677:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 678:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 679:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 680:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 681:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 682:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 683:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 684:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 685:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 686:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 687:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 688:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 689:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 690:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 691:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 692:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 693:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 694:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 695:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 696:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 697:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 698:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 699:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 700:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 701:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 702:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 703:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 704:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 705:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 706:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 707:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 708:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 709:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 710:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 711:
		sqlVAL.str = sqlS[sqlpt-0].str
	case 712:
		sqlVAL.str = sqlS[sqlpt-0].str
	}
	goto sqlstack /* stack new state and value */
}
